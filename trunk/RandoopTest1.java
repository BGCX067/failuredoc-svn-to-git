
import junit.framework.*;

public class RandoopTest1 extends TestCase {

  // Runs all the tests in this file.
  public static void main(String[] args) {
    junit.textui.TestRunner.run(RandoopTest1.class);
  }

  public void test1() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.util.List var13 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.lang.Object[] var15 = var14.toArray();
    java.util.NavigableSet var18 = var14.headSet((java.lang.Object)10L, true);
    var14.clear();
    java.util.Map var20 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var14);
    java.util.Comparator var21 = java.util.Collections.reverseOrder();
    java.util.TreeSet var22 = new java.util.TreeSet(var21);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var29 = java.util.Collections.lastIndexOfSubList(var25, var28);
    java.util.Comparator var30 = java.util.Collections.reverseOrder();
    java.util.Comparator var31 = java.util.Collections.reverseOrder(var30);
    java.lang.Object var32 = java.util.Collections.min((java.util.Collection)var25, var30);
    int var33 = java.util.Collections.frequency((java.util.Collection)var22, (java.lang.Object)var30);
    boolean var34 = var14.equals((java.lang.Object)var33);
    java.lang.Object var35 = var3.higher((java.lang.Object)var14);
    int var36 = var14.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 0+ "'", var32.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test2() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.Collections.rotate(var2, 0);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.ArrayList var16 = java.util.Collections.list(var15);
    java.util.Collections.swap((java.util.List)var16, 1, 0);
    java.util.Collections.reverse((java.util.List)var16);
    java.util.List var21 = java.util.Collections.unmodifiableList((java.util.List)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.<java.lang.Comparable>sort(var21);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);

  }

  public void test3() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.Comparator var2 = java.util.Collections.reverseOrder(var0);
    java.util.TreeSet var3 = new java.util.TreeSet(var0);
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.util.Enumeration var11 = java.util.Collections.enumeration((java.util.Collection)var9);
    java.util.ArrayList var12 = java.util.Collections.list(var11);
    java.util.Comparator var13 = java.util.Collections.reverseOrder();
    java.util.TreeSet var14 = new java.util.TreeSet(var13);
    java.util.Comparator var15 = java.util.Collections.reverseOrder(var13);
    java.lang.Object var16 = java.util.Collections.max((java.util.Collection)var12, var15);
    java.lang.Object[] var18 = new java.lang.Object[] { (byte)10};
    boolean var19 = java.util.Collections.addAll((java.util.Collection)var12, var18);
    java.lang.Object var20 = var3.higher((java.lang.Object)var19);
    java.util.TreeSet var21 = new java.util.TreeSet();
    java.lang.Object var22 = var21.clone();
    java.lang.Object var23 = var21.pollFirst();
    java.util.List var25 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.Collection)var25);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.SortedSet)var26);
    java.lang.Object var28 = var26.pollLast();
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var26);
    java.lang.Object[] var30 = var26.toArray();
    java.lang.Object var31 = var21.floor((java.lang.Object)var26);
    java.util.List var34 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var37 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var38 = java.util.Collections.lastIndexOfSubList(var34, var37);
    boolean var39 = var21.equals((java.lang.Object)var37);
    java.util.List var41 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var42 = new java.util.TreeSet((java.util.Collection)var41);
    java.util.TreeSet var43 = new java.util.TreeSet((java.util.SortedSet)var42);
    java.lang.Object var44 = var42.pollLast();
    java.util.List var47 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var50 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var51 = java.util.Collections.lastIndexOfSubList(var47, var50);
    boolean var52 = var42.removeAll((java.util.Collection)var47);
    java.util.List var55 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var56 = new java.util.TreeSet((java.util.Collection)var55);
    java.lang.Object[] var57 = var56.toArray();
    java.util.NavigableSet var60 = var56.headSet((java.lang.Object)10L, true);
    var56.clear();
    java.util.Map var62 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var56);
    java.lang.Object[] var63 = var56.toArray();
    java.util.List var65 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var66 = new java.util.TreeSet((java.util.Collection)var65);
    java.lang.Object[] var67 = var66.toArray();
    java.util.NavigableSet var70 = var66.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var71 = var66.descendingSet();
    boolean var72 = var56.add((java.lang.Object)var71);
    java.util.SortedSet var74 = var56.tailSet((java.lang.Object)"");
    java.util.SortedSet var75 = var42.headSet((java.lang.Object)"");
    java.util.TreeSet var76 = new java.util.TreeSet(var75);
    java.util.List var78 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var79 = new java.util.TreeSet((java.util.Collection)var78);
    java.lang.Object[] var80 = var79.toArray();
    java.util.NavigableSet var83 = var79.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var84 = var79.descendingSet();
    java.util.List var87 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var88 = java.util.Collections.max((java.util.Collection)var87);
    java.util.List var90 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var91 = new java.util.TreeSet((java.util.Collection)var90);
    java.lang.Object[] var92 = var91.toArray();
    java.util.NavigableSet var95 = var91.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var96 = var79.tailSet(var88, true);
    java.lang.Object var97 = var76.lower(var88);
    java.util.SortedSet var98 = var21.headSet(var88);
    boolean var99 = var3.addAll((java.util.Collection)var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + 0+ "'", var16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + (byte)1+ "'", var28.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (byte)1+ "'", var44.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + 0+ "'", var88.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var98 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test4() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.SortedSet)var9);
    java.util.SortedSet var11 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var10);
    java.lang.Object var12 = var10.clone();
    java.util.Iterator var13 = var10.descendingIterator();
    java.lang.Object var14 = java.util.Collections.max((java.util.Collection)var10);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var10);
    java.util.List var16 = java.util.Collections.nCopies(var6, (java.lang.Object)var10);
    java.util.Enumeration var17 = java.util.Collections.enumeration((java.util.Collection)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + (byte)1+ "'", var14.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);

  }

  public void test5() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.lang.Object var4 = var2.pollFirst();
    java.util.TreeSet var5 = new java.util.TreeSet((java.util.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));

  }

  public void test6() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.Iterator var4 = var2.iterator();
    java.util.Set var5 = java.util.Collections.singleton((java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test7() throws Throwable {

    java.util.Map var2 = java.util.Collections.singletonMap((java.lang.Object)(byte)0, (java.lang.Object)'4');
    java.util.List var3 = java.util.Collections.singletonList((java.lang.Object)'4');
    java.util.Collections.reverse(var3);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    java.lang.Object[] var8 = var7.toArray();
    java.util.NavigableSet var9 = var7.descendingSet();
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var15 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var16 = java.util.Collections.lastIndexOfSubList(var12, var15);
    java.util.List var19 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var20 = java.util.Collections.indexOfSubList(var12, var19);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var26 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var27 = java.util.Collections.lastIndexOfSubList(var23, var26);
    int var28 = java.util.Collections.indexOfSubList(var12, var26);
    java.util.List var31 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var32 = new java.util.TreeSet((java.util.Collection)var31);
    java.lang.Object[] var33 = var32.toArray();
    java.util.NavigableSet var36 = var32.headSet((java.lang.Object)10L, true);
    var32.clear();
    java.util.Map var38 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var32);
    java.util.List var39 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.Collections.shuffle(var39);
    int var41 = java.util.Collections.indexOfSubList(var12, var39);
    java.util.List var44 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var47 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var48 = java.util.Collections.lastIndexOfSubList(var44, var47);
    java.util.List var51 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var52 = java.util.Collections.indexOfSubList(var44, var51);
    java.util.List var55 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var58 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var55, 0);
    java.util.List var62 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var65 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var62, 0);
    java.util.Collections.rotate(var55, 0);
    java.util.Enumeration var68 = java.util.Collections.enumeration((java.util.Collection)var55);
    java.util.Collection var69 = java.util.Collections.synchronizedCollection((java.util.Collection)var55);
    int var70 = java.util.Collections.indexOfSubList(var44, var55);
    int var71 = java.util.Collections.indexOfSubList(var12, var55);
    java.util.List var74 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var74, 100);
    java.util.Set var77 = java.util.Collections.emptySet();
    java.util.TreeSet var78 = new java.util.TreeSet((java.util.Collection)var77);
    java.util.Enumeration var79 = java.util.Collections.enumeration((java.util.Collection)var78);
    java.util.List var80 = java.util.Collections.nCopies(100, (java.lang.Object)var79);
    java.util.ArrayList var81 = java.util.Collections.list(var79);
    int var82 = java.util.Collections.indexOfSubList(var12, (java.util.List)var81);
    boolean var83 = var7.removeAll((java.util.Collection)var81);
    java.util.List var84 = java.util.Collections.singletonList((java.lang.Object)var7);
    int var85 = java.util.Collections.lastIndexOfSubList(var3, var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));

  }

  public void test8() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.Iterator var3 = var2.iterator();
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.lang.Object[] var11 = new java.lang.Object[] { var6};
    java.lang.Object[] var12 = var2.toArray(var11);
    java.util.Comparator var14 = java.util.Collections.reverseOrder();
    java.util.TreeSet var15 = new java.util.TreeSet(var14);
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var22 = java.util.Collections.lastIndexOfSubList(var18, var21);
    boolean var23 = var15.removeAll((java.util.Collection)var18);
    java.util.NavigableSet var24 = var2.tailSet((java.lang.Object)10.0d, var23);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.SortedSet)var27);
    java.lang.Object var29 = var27.pollLast();
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var36 = java.util.Collections.lastIndexOfSubList(var32, var35);
    boolean var37 = var27.removeAll((java.util.Collection)var32);
    java.util.List var40 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var41 = new java.util.TreeSet((java.util.Collection)var40);
    java.lang.Object[] var42 = var41.toArray();
    java.util.NavigableSet var45 = var41.headSet((java.lang.Object)10L, true);
    var41.clear();
    java.util.Map var47 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var41);
    java.lang.Object[] var48 = var41.toArray();
    java.util.List var50 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var51 = new java.util.TreeSet((java.util.Collection)var50);
    java.lang.Object[] var52 = var51.toArray();
    java.util.NavigableSet var55 = var51.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var56 = var51.descendingSet();
    boolean var57 = var41.add((java.lang.Object)var56);
    java.util.SortedSet var59 = var41.tailSet((java.lang.Object)"");
    java.util.SortedSet var60 = var27.headSet((java.lang.Object)"");
    java.util.TreeSet var61 = new java.util.TreeSet(var60);
    boolean var62 = var2.removeAll((java.util.Collection)var60);
    java.lang.Object var63 = var2.first();
    java.util.List var65 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var66 = new java.util.TreeSet((java.util.Collection)var65);
    java.util.TreeSet var67 = new java.util.TreeSet((java.util.SortedSet)var66);
    java.util.SortedSet var68 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var67);
    java.util.Set var69 = java.util.Collections.synchronizedSet((java.util.Set)var67);
    boolean var70 = var2.removeAll((java.util.Collection)var67);
    java.lang.Object[] var71 = var2.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + (byte)1+ "'", var29.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + (byte)1+ "'", var63.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);

  }

  public void test9() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.lang.Object var11 = var3.pollFirst();
    java.util.SortedSet var12 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.lang.Object[] var16 = var15.toArray();
    java.util.NavigableSet var17 = var15.descendingSet();
    java.lang.String var18 = var15.toString();
    java.util.List var19 = java.util.Collections.emptyList();
    java.util.Set var20 = java.util.Collections.emptySet();
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.util.NavigableSet var22 = var21.descendingSet();
    int var23 = java.util.Collections.binarySearch(var19, (java.lang.Object)var21);
    java.util.List var26 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var26, 100);
    java.util.Collections.rotate(var19, 100);
    boolean var30 = var15.addAll((java.util.Collection)var19);
    java.util.List var33 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var34 = new java.util.TreeSet((java.util.Collection)var33);
    java.lang.Object[] var35 = var34.toArray();
    java.util.NavigableSet var38 = var34.headSet((java.lang.Object)10L, true);
    var34.clear();
    java.util.Map var40 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var34);
    java.util.List var41 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    int var42 = java.util.Collections.binarySearch(var19, (java.lang.Object)10.0d);
    boolean var43 = var3.addAll((java.util.Collection)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[1]"+ "'", var18.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test10() throws Throwable {

    java.util.TreeSet var0 = new java.util.TreeSet();
    java.lang.Object var1 = var0.clone();
    java.lang.Object var2 = var0.pollFirst();
    java.util.List var4 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var5 = new java.util.TreeSet((java.util.Collection)var4);
    java.util.TreeSet var6 = new java.util.TreeSet((java.util.SortedSet)var5);
    java.lang.Object var7 = var5.pollLast();
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var5);
    java.lang.Object[] var9 = var5.toArray();
    java.lang.Object var10 = var0.floor((java.lang.Object)var5);
    java.lang.Object var11 = var5.pollLast();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test11() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Enumeration var12 = java.util.Collections.enumeration((java.util.Collection)var10);
    java.util.ArrayList var13 = java.util.Collections.list(var12);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var20 = java.util.Collections.lastIndexOfSubList(var16, var19);
    java.util.List var23 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var24 = java.util.Collections.indexOfSubList(var16, var23);
    java.util.List var27 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var30 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var27, 0);
    java.util.List var34 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var37 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var34, 0);
    java.util.Collections.rotate(var27, 0);
    java.util.Enumeration var40 = java.util.Collections.enumeration((java.util.Collection)var27);
    java.util.Collection var41 = java.util.Collections.synchronizedCollection((java.util.Collection)var27);
    int var42 = java.util.Collections.indexOfSubList(var16, var27);
    int var43 = java.util.Collections.lastIndexOfSubList((java.util.List)var13, var27);
    boolean var44 = var2.retainAll((java.util.Collection)var27);
    java.util.List var46 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var47 = new java.util.TreeSet((java.util.Collection)var46);
    java.lang.Object[] var48 = var47.toArray();
    java.util.NavigableSet var51 = var47.headSet((java.lang.Object)10L, true);
    int var52 = var47.size();
    java.util.List var54 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var55 = new java.util.TreeSet((java.util.Collection)var54);
    java.lang.Object[] var56 = var55.toArray();
    java.util.NavigableSet var59 = var55.headSet((java.lang.Object)10L, true);
    int var60 = var55.size();
    java.util.List var61 = java.util.Collections.nCopies(var52, (java.lang.Object)var60);
    int var62 = java.util.Collections.lastIndexOfSubList(var27, var61);
    java.util.Set var63 = java.util.Collections.emptySet();
    java.util.TreeSet var64 = new java.util.TreeSet((java.util.Collection)var63);
    java.util.NavigableSet var65 = var64.descendingSet();
    java.lang.Object var66 = var64.pollLast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var67 = java.util.Collections.nCopies(var62, (java.lang.Object)var64);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);

  }

  public void test12() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.Iterator var4 = var2.iterator();
    java.util.Collection var5 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.lang.Object var6 = var2.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + (byte)1+ "'", var6.equals((byte)1));

  }

  public void test13() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object var11 = var3.lower((java.lang.Object)'#');
    java.util.Iterator var12 = var3.descendingIterator();
    boolean var14 = var3.contains((java.lang.Object)'4');
    boolean var16 = var3.remove((java.lang.Object)1);
    java.lang.String var17 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));

  }

  public void test14() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.SortedSet)var13);
    java.util.SortedSet var15 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var14);
    java.lang.Object var16 = var14.clone();
    java.util.Iterator var17 = var14.descendingIterator();
    java.lang.Object var18 = java.util.Collections.max((java.util.Collection)var14);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var14);
    java.util.List var20 = java.util.Collections.nCopies(var10, (java.lang.Object)var14);
    boolean var21 = var2.containsAll((java.util.Collection)var14);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var27 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var28 = java.util.Collections.lastIndexOfSubList(var24, var27);
    java.util.Comparator var29 = java.util.Collections.reverseOrder();
    java.util.Comparator var30 = java.util.Collections.reverseOrder(var29);
    java.lang.Object var31 = java.util.Collections.min((java.util.Collection)var24, var29);
    java.util.Comparator var32 = java.util.Collections.reverseOrder(var29);
    java.lang.Object var33 = java.util.Collections.min((java.util.Collection)var2, var32);
    java.util.List var35 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var36 = new java.util.TreeSet((java.util.Collection)var35);
    java.util.TreeSet var37 = new java.util.TreeSet((java.util.SortedSet)var36);
    java.lang.Object var38 = var36.pollLast();
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var44 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var45 = java.util.Collections.lastIndexOfSubList(var41, var44);
    boolean var46 = var36.removeAll((java.util.Collection)var41);
    java.util.List var49 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var50 = new java.util.TreeSet((java.util.Collection)var49);
    java.lang.Object[] var51 = var50.toArray();
    java.util.NavigableSet var54 = var50.headSet((java.lang.Object)10L, true);
    var50.clear();
    java.util.Map var56 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var50);
    java.lang.Object[] var57 = var50.toArray();
    java.util.List var59 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var60 = new java.util.TreeSet((java.util.Collection)var59);
    java.lang.Object[] var61 = var60.toArray();
    java.util.NavigableSet var64 = var60.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var65 = var60.descendingSet();
    boolean var66 = var50.add((java.lang.Object)var65);
    java.util.SortedSet var68 = var50.tailSet((java.lang.Object)"");
    java.util.SortedSet var69 = var36.headSet((java.lang.Object)"");
    boolean var70 = java.util.Collections.disjoint((java.util.Collection)var2, (java.util.Collection)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + (byte)1+ "'", var18.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + 0+ "'", var31.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + (byte)1+ "'", var33.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + (byte)1+ "'", var38.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);

  }

  public void test15() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder();
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.TreeSet var10 = new java.util.TreeSet(var7);
    java.lang.String var11 = var10.toString();
    java.util.Comparator var12 = var10.comparator();
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.SortedSet)var15);
    java.lang.Object var17 = var15.pollLast();
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var24 = java.util.Collections.lastIndexOfSubList(var20, var23);
    boolean var25 = var15.removeAll((java.util.Collection)var20);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var28);
    java.lang.Object[] var30 = var29.toArray();
    java.util.NavigableSet var33 = var29.headSet((java.lang.Object)10L, true);
    var29.clear();
    java.util.Map var35 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var29);
    java.lang.Object[] var36 = var29.toArray();
    java.util.List var38 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var39 = new java.util.TreeSet((java.util.Collection)var38);
    java.lang.Object[] var40 = var39.toArray();
    java.util.NavigableSet var43 = var39.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var44 = var39.descendingSet();
    boolean var45 = var29.add((java.lang.Object)var44);
    java.util.SortedSet var47 = var29.tailSet((java.lang.Object)"");
    java.util.SortedSet var48 = var15.headSet((java.lang.Object)"");
    java.util.TreeSet var49 = new java.util.TreeSet(var48);
    java.util.List var51 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var52 = new java.util.TreeSet((java.util.Collection)var51);
    java.lang.Object[] var53 = var52.toArray();
    java.util.NavigableSet var56 = var52.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var57 = var52.descendingSet();
    java.util.List var60 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var61 = java.util.Collections.max((java.util.Collection)var60);
    java.util.List var63 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var64 = new java.util.TreeSet((java.util.Collection)var63);
    java.lang.Object[] var65 = var64.toArray();
    java.util.NavigableSet var68 = var64.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var69 = var52.tailSet(var61, true);
    java.lang.Object var70 = var49.lower(var61);
    java.lang.Object var71 = var10.floor((java.lang.Object)var49);
    java.lang.String var72 = var49.toString();
    java.util.List var74 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var75 = new java.util.TreeSet((java.util.Collection)var74);
    java.lang.Object[] var76 = var75.toArray();
    java.util.NavigableSet var79 = var75.headSet((java.lang.Object)10L, true);
    java.lang.Object[] var80 = var75.toArray();
    java.util.List var83 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var86 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var87 = java.util.Collections.lastIndexOfSubList(var83, var86);
    java.lang.Object var88 = java.util.Collections.min((java.util.Collection)var83);
    boolean var89 = var75.removeAll((java.util.Collection)var83);
    java.lang.Object var90 = var75.pollLast();
    java.util.TreeSet var91 = new java.util.TreeSet((java.util.SortedSet)var75);
    java.lang.Object[] var92 = new java.lang.Object[] { var91};
    boolean var93 = java.util.Collections.addAll((java.util.Collection)var49, var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + (byte)1+ "'", var17.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + 0+ "'", var61.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "[]"+ "'", var72.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + 0+ "'", var88.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + (byte)1+ "'", var90.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);

  }

  public void test16() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Enumeration var7 = java.util.Collections.enumeration((java.util.Collection)var5);
    java.util.ArrayList var8 = java.util.Collections.list(var7);
    java.util.Comparator var9 = java.util.Collections.reverseOrder();
    java.util.TreeSet var10 = new java.util.TreeSet(var9);
    java.util.Comparator var11 = java.util.Collections.reverseOrder(var9);
    java.lang.Object var12 = java.util.Collections.max((java.util.Collection)var8, var11);
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.lang.Object[] var16 = var15.toArray();
    java.util.NavigableSet var19 = var15.headSet((java.lang.Object)10L, true);
    int var20 = var15.size();
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var26 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var27 = java.util.Collections.lastIndexOfSubList(var23, var26);
    java.util.Collections.swap((java.util.List)var8, var20, var27);
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.util.TreeSet var32 = new java.util.TreeSet((java.util.SortedSet)var31);
    java.util.SortedSet var33 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var32);
    java.util.Comparator var34 = java.util.Collections.reverseOrder();
    java.util.Comparator var35 = java.util.Collections.reverseOrder(var34);
    java.util.Comparator var36 = java.util.Collections.reverseOrder(var35);
    java.lang.Object var37 = java.util.Collections.min((java.util.Collection)var33, var36);
    java.util.Collections.sort((java.util.List)var8, var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 0+ "'", var12.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + (byte)1+ "'", var37.equals((byte)1));

  }

  public void test17() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    boolean var9 = var1.removeAll((java.util.Collection)var4);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.lang.Object var13 = var12.clone();
    java.util.Iterator var14 = var12.iterator();
    java.util.Map var15 = java.util.Collections.singletonMap((java.lang.Object)var4, (java.lang.Object)var12);
    java.util.Comparator var16 = java.util.Collections.reverseOrder();
    java.util.TreeSet var17 = new java.util.TreeSet(var16);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var24 = java.util.Collections.lastIndexOfSubList(var20, var23);
    java.util.Comparator var25 = java.util.Collections.reverseOrder();
    java.util.Comparator var26 = java.util.Collections.reverseOrder(var25);
    java.lang.Object var27 = java.util.Collections.min((java.util.Collection)var20, var25);
    int var28 = java.util.Collections.frequency((java.util.Collection)var17, (java.lang.Object)var25);
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.lang.Object[] var32 = var31.toArray();
    java.util.NavigableSet var35 = var31.headSet((java.lang.Object)10L, true);
    int var36 = var31.size();
    java.lang.Object var37 = var31.clone();
    java.lang.Object[] var38 = var31.toArray();
    java.lang.Object var39 = var17.ceiling((java.lang.Object)var31);
    java.util.Iterator var40 = var17.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var41 = var12.remove((java.lang.Object)var40);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 0+ "'", var27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);

  }

  public void test18() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    var1.clear();
    java.util.Comparator var3 = java.util.Collections.reverseOrder();
    java.util.TreeSet var4 = new java.util.TreeSet(var3);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Comparator var12 = java.util.Collections.reverseOrder();
    java.util.Comparator var13 = java.util.Collections.reverseOrder(var12);
    java.lang.Object var14 = java.util.Collections.min((java.util.Collection)var7, var12);
    int var15 = java.util.Collections.frequency((java.util.Collection)var4, (java.lang.Object)var12);
    java.util.Map var16 = java.util.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)var4);
    java.util.Map var17 = java.util.Collections.unmodifiableMap(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 0+ "'", var14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);

  }

  public void test19() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)var3);
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.SortedSet)var8);
    java.lang.Object var10 = var8.pollLast();
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)var8);
    int var12 = java.util.Collections.lastIndexOfSubList(var5, var11);
    java.util.List var13 = java.util.Collections.unmodifiableList(var5);
    java.util.Enumeration var14 = java.util.Collections.enumeration((java.util.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + (byte)1+ "'", var10.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);

  }

  public void test20() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.Iterator var4 = var2.iterator();
    java.util.Collection var5 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.lang.Object[] var10 = var9.toArray();
    java.util.NavigableSet var13 = var9.headSet((java.lang.Object)10L, true);
    var9.clear();
    java.util.Map var15 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var9);
    java.util.NavigableSet var16 = var9.descendingSet();
    java.lang.Object var17 = var9.pollFirst();
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.SortedSet)var20);
    java.util.SortedSet var22 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var21);
    java.lang.Object var23 = var9.higher((java.lang.Object)var21);
    boolean var24 = var2.removeAll((java.util.Collection)var21);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var21);
    java.util.Comparator var26 = java.util.Collections.reverseOrder();
    java.util.Comparator var27 = java.util.Collections.reverseOrder(var26);
    java.util.Comparator var28 = java.util.Collections.reverseOrder(var26);
    boolean var29 = var25.equals((java.lang.Object)var28);
    java.util.Iterator var30 = var25.descendingIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);

  }

  public void test21() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var7 = var2.descendingSet();
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.List var9 = java.util.Collections.emptyList();
    java.util.Set var10 = java.util.Collections.emptySet();
    java.util.TreeSet var11 = new java.util.TreeSet((java.util.Collection)var10);
    java.util.NavigableSet var12 = var11.descendingSet();
    int var13 = java.util.Collections.binarySearch(var9, (java.lang.Object)var11);
    java.util.List var15 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.Collection)var15);
    boolean var17 = java.util.Collections.disjoint((java.util.Collection)var9, (java.util.Collection)var15);
    java.util.Set var18 = java.util.Collections.singleton((java.lang.Object)var9);
    java.util.Collections.reverse(var9);
    java.util.List var21 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.lang.Object var23 = var22.clone();
    java.lang.Object var24 = var22.pollFirst();
    java.util.List var27 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.Collection)var27);
    java.lang.Object[] var29 = var28.toArray();
    java.util.NavigableSet var32 = var28.headSet((java.lang.Object)10L, true);
    var28.clear();
    java.util.Map var34 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var28);
    java.util.Map var35 = java.util.Collections.synchronizedMap(var34);
    java.util.Map var36 = java.util.Collections.synchronizedMap(var34);
    java.util.Map var37 = java.util.Collections.synchronizedMap(var34);
    java.lang.Object var38 = var22.lower((java.lang.Object)var34);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var44 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var45 = java.util.Collections.lastIndexOfSubList(var41, var44);
    java.util.Comparator var46 = java.util.Collections.reverseOrder();
    java.util.Comparator var47 = java.util.Collections.reverseOrder(var46);
    java.lang.Object var48 = java.util.Collections.min((java.util.Collection)var41, var46);
    java.util.TreeSet var49 = new java.util.TreeSet(var46);
    java.lang.String var50 = var49.toString();
    java.util.Comparator var51 = var49.comparator();
    int var52 = java.util.Collections.binarySearch(var9, (java.lang.Object)var22, var51);
    java.lang.Object var53 = java.util.Collections.max((java.util.Collection)var2, var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + (byte)1+ "'", var24.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + 0+ "'", var48.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[]"+ "'", var50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + (byte)1+ "'", var53.equals((byte)1));

  }

  public void test22() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    boolean var8 = java.util.Collections.disjoint((java.util.Collection)var0, (java.util.Collection)var6);
    java.util.Set var9 = java.util.Collections.singleton((java.lang.Object)var0);
    java.util.Collections.reverse(var0);
    java.util.List var11 = java.util.Collections.emptyList();
    java.util.Set var12 = java.util.Collections.emptySet();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.NavigableSet var14 = var13.descendingSet();
    int var15 = java.util.Collections.binarySearch(var11, (java.lang.Object)var13);
    java.util.List var17 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    boolean var19 = java.util.Collections.disjoint((java.util.Collection)var11, (java.util.Collection)var17);
    java.util.Set var20 = java.util.Collections.singleton((java.lang.Object)var11);
    java.util.Collections.reverse(var11);
    int var22 = java.util.Collections.indexOfSubList(var0, var11);
    java.util.List var24 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.SortedSet)var25);
    java.lang.Object[] var27 = var25.toArray();
    int var28 = java.util.Collections.binarySearch(var0, (java.lang.Object)var27);
    java.util.Enumeration var29 = java.util.Collections.enumeration((java.util.Collection)var0);
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var32, 0);
    java.util.List var39 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var42 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var39, 0);
    java.util.Collections.rotate(var32, 0);
    java.util.Enumeration var45 = java.util.Collections.enumeration((java.util.Collection)var32);
    java.util.ArrayList var46 = java.util.Collections.list(var45);
    java.lang.Object var47 = java.util.Collections.min((java.util.Collection)var46);
    java.util.List var50 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var53 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var50, 0);
    java.util.List var57 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var60 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var57, 0);
    java.util.Collections.rotate(var50, 0);
    java.util.Enumeration var63 = java.util.Collections.enumeration((java.util.Collection)var50);
    java.util.List var64 = java.util.Collections.synchronizedList(var50);
    int var65 = java.util.Collections.indexOfSubList((java.util.List)var46, var50);
    java.util.Collections.rotate(var0, var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + 0+ "'", var47.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test23() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.SortedSet)var7);
    java.lang.Object var9 = var7.pollLast();
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var15 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var16 = java.util.Collections.lastIndexOfSubList(var12, var15);
    boolean var17 = var7.removeAll((java.util.Collection)var12);
    java.util.List var20 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.lang.Object[] var22 = var21.toArray();
    java.util.NavigableSet var25 = var21.headSet((java.lang.Object)10L, true);
    var21.clear();
    java.util.Map var27 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var21);
    java.lang.Object[] var28 = var21.toArray();
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.lang.Object[] var32 = var31.toArray();
    java.util.NavigableSet var35 = var31.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var36 = var31.descendingSet();
    boolean var37 = var21.add((java.lang.Object)var36);
    java.util.SortedSet var39 = var21.tailSet((java.lang.Object)"");
    java.util.SortedSet var40 = var7.headSet((java.lang.Object)"");
    java.util.SortedSet var41 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var7);
    boolean var42 = var2.addAll((java.util.Collection)var41);
    java.util.List var44 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.lang.Object[] var46 = var45.toArray();
    java.util.NavigableSet var49 = var45.headSet((java.lang.Object)10L, true);
    java.util.SortedSet var50 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var45);
    boolean var51 = var2.removeAll((java.util.Collection)var50);
    java.util.List var54 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    java.util.List var55 = java.util.Collections.unmodifiableList(var54);
    java.util.Collection var56 = java.util.Collections.unmodifiableCollection((java.util.Collection)var54);
    java.util.List var58 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var59 = new java.util.TreeSet((java.util.Collection)var58);
    java.util.TreeSet var60 = new java.util.TreeSet((java.util.SortedSet)var59);
    java.lang.Object var61 = var59.pollLast();
    java.util.List var64 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var67 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var68 = java.util.Collections.lastIndexOfSubList(var64, var67);
    boolean var69 = var59.removeAll((java.util.Collection)var64);
    java.util.List var72 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var73 = new java.util.TreeSet((java.util.Collection)var72);
    java.lang.Object[] var74 = var73.toArray();
    java.util.NavigableSet var77 = var73.headSet((java.lang.Object)10L, true);
    var73.clear();
    java.util.Map var79 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var73);
    java.lang.Object[] var80 = var73.toArray();
    java.util.List var82 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var83 = new java.util.TreeSet((java.util.Collection)var82);
    java.lang.Object[] var84 = var83.toArray();
    java.util.NavigableSet var87 = var83.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var88 = var83.descendingSet();
    boolean var89 = var73.add((java.lang.Object)var88);
    java.util.SortedSet var91 = var73.tailSet((java.lang.Object)"");
    java.util.SortedSet var92 = var59.headSet((java.lang.Object)"");
    java.util.Collection var93 = java.util.Collections.synchronizedCollection((java.util.Collection)var59);
    int var94 = java.util.Collections.frequency(var56, (java.lang.Object)var93);
    java.util.Set var95 = java.util.Collections.singleton((java.lang.Object)var93);
    java.lang.Object var96 = var2.floor((java.lang.Object)var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (byte)1+ "'", var9.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + (byte)1+ "'", var61.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);

  }

  public void test24() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java.util.Iterator var6 = var3.descendingIterator();
    java.lang.Object var7 = java.util.Collections.max((java.util.Collection)var3);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.util.TreeSet var11 = new java.util.TreeSet((java.util.SortedSet)var10);
    java.util.SortedSet var12 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var11);
    java.util.Comparator var13 = java.util.Collections.reverseOrder();
    java.util.Comparator var14 = java.util.Collections.reverseOrder(var13);
    java.util.Comparator var15 = java.util.Collections.reverseOrder(var14);
    java.lang.Object var16 = java.util.Collections.min((java.util.Collection)var12, var15);
    boolean var17 = var3.add(var16);
    java.util.List var20 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.lang.Object[] var22 = var21.toArray();
    java.util.NavigableSet var25 = var21.headSet((java.lang.Object)10L, true);
    var21.clear();
    java.util.Map var27 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var21);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.Comparator var29 = java.util.Collections.reverseOrder();
    java.util.Map var30 = java.util.Collections.singletonMap((java.lang.Object)var28, (java.lang.Object)var29);
    boolean var31 = var3.equals((java.lang.Object)var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.<java.lang.Comparable>sort(var28);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + (byte)1+ "'", var16.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test25() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    var2.clear();
    java.util.SortedSet var8 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test26() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.util.List var13 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.lang.Object[] var15 = var14.toArray();
    java.util.NavigableSet var18 = var14.headSet((java.lang.Object)10L, true);
    var14.clear();
    java.util.Map var20 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var14);
    java.util.Comparator var21 = java.util.Collections.reverseOrder();
    java.util.TreeSet var22 = new java.util.TreeSet(var21);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var29 = java.util.Collections.lastIndexOfSubList(var25, var28);
    java.util.Comparator var30 = java.util.Collections.reverseOrder();
    java.util.Comparator var31 = java.util.Collections.reverseOrder(var30);
    java.lang.Object var32 = java.util.Collections.min((java.util.Collection)var25, var30);
    int var33 = java.util.Collections.frequency((java.util.Collection)var22, (java.lang.Object)var30);
    boolean var34 = var14.equals((java.lang.Object)var33);
    java.lang.Object var35 = var3.higher((java.lang.Object)var14);
    java.util.List var37 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var38 = new java.util.TreeSet((java.util.Collection)var37);
    java.lang.Object[] var39 = var38.toArray();
    java.util.NavigableSet var42 = var38.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var43 = var38.descendingSet();
    java.util.Collection var44 = java.util.Collections.synchronizedCollection((java.util.Collection)var38);
    boolean var46 = var38.add((java.lang.Object)(byte)100);
    java.util.List var48 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var49 = new java.util.TreeSet((java.util.Collection)var48);
    java.lang.Object[] var50 = var49.toArray();
    java.util.NavigableSet var51 = var49.descendingSet();
    java.lang.Object[] var52 = var49.toArray();
    boolean var53 = var38.equals((java.lang.Object)var49);
    java.util.List var56 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var57 = java.util.Collections.max((java.util.Collection)var56);
    java.util.Collection var58 = java.util.Collections.unmodifiableCollection((java.util.Collection)var56);
    int var60 = java.util.Collections.frequency(var58, (java.lang.Object)false);
    java.lang.Object var61 = java.util.Collections.max(var58);
    java.util.List var64 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    java.util.List var65 = java.util.Collections.unmodifiableList(var64);
    java.util.Collection var66 = java.util.Collections.unmodifiableCollection((java.util.Collection)var64);
    java.util.List var68 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var69 = new java.util.TreeSet((java.util.Collection)var68);
    java.lang.Object[] var70 = var69.toArray();
    java.util.NavigableSet var73 = var69.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var74 = var69.descendingSet();
    java.util.TreeSet var75 = new java.util.TreeSet((java.util.SortedSet)var69);
    java.lang.String var76 = var75.toString();
    java.util.List var78 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var79 = new java.util.TreeSet((java.util.Collection)var78);
    java.util.TreeSet var80 = new java.util.TreeSet((java.util.SortedSet)var79);
    java.lang.Object var81 = var79.pollLast();
    java.util.List var84 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var87 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var88 = java.util.Collections.lastIndexOfSubList(var84, var87);
    boolean var89 = var79.removeAll((java.util.Collection)var84);
    java.util.Set var90 = java.util.Collections.emptySet();
    java.util.TreeSet var91 = new java.util.TreeSet((java.util.Collection)var90);
    java.util.Enumeration var92 = java.util.Collections.enumeration((java.util.Collection)var91);
    boolean var93 = var79.removeAll((java.util.Collection)var91);
    boolean var94 = var79.isEmpty();
    java.util.Comparator var95 = var79.comparator();
    java.util.Set var96 = java.util.Collections.synchronizedSet((java.util.Set)var79);
    boolean var97 = java.util.Collections.replaceAll(var64, (java.lang.Object)var75, (java.lang.Object)var96);
    java.util.NavigableSet var98 = var38.headSet(var61, var97);
    java.util.SortedSet var99 = var14.tailSet((java.lang.Object)var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 0+ "'", var32.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + 0+ "'", var57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + 0+ "'", var61.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "[1]"+ "'", var76.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + (byte)1+ "'", var81.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var98 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var99 == null);

  }

  public void test27() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)var3);
    java.lang.Object var6 = var3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test28() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    int var7 = var2.size();
    java.lang.Object var8 = var2.clone();
    java.lang.Object[] var9 = var2.toArray();
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var2);
    java.util.NavigableSet var11 = var2.descendingSet();
    java.util.List var13 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.lang.Object[] var15 = var14.toArray();
    java.util.NavigableSet var18 = var14.headSet((java.lang.Object)10L, true);
    var14.clear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var20 = var2.lower((java.lang.Object)var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);

  }

  public void test29() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.SortedSet)var9);
    java.util.SortedSet var11 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var10);
    java.lang.Object var12 = var10.clone();
    java.util.Iterator var13 = var10.descendingIterator();
    java.lang.Object var14 = java.util.Collections.max((java.util.Collection)var10);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var10);
    java.util.List var16 = java.util.Collections.nCopies(var6, (java.lang.Object)var10);
    var10.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + (byte)1+ "'", var14.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);

  }

  public void test30() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.lang.Object var7 = java.util.Collections.max((java.util.Collection)var2);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.lang.Object var11 = var10.clone();
    java.util.Iterator var12 = var10.iterator();
    java.util.Collection var13 = java.util.Collections.unmodifiableCollection((java.util.Collection)var10);
    java.lang.Object var14 = var10.pollLast();
    boolean var15 = var2.removeAll((java.util.Collection)var10);
    java.util.Iterator var16 = var10.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + (byte)1+ "'", var14.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);

  }

  public void test31() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object var11 = var3.lower((java.lang.Object)'#');
    java.util.List var12 = java.util.Collections.emptyList();
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.NavigableSet var15 = var14.descendingSet();
    int var16 = java.util.Collections.binarySearch(var12, (java.lang.Object)var14);
    java.util.List var18 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var18);
    boolean var20 = java.util.Collections.disjoint((java.util.Collection)var12, (java.util.Collection)var18);
    java.lang.Object var21 = var3.higher((java.lang.Object)var20);
    java.lang.Object var22 = var3.pollFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);

  }

  public void test32() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.String var5 = var2.toString();
    java.util.List var6 = java.util.Collections.emptyList();
    java.util.Set var7 = java.util.Collections.emptySet();
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.util.NavigableSet var9 = var8.descendingSet();
    int var10 = java.util.Collections.binarySearch(var6, (java.lang.Object)var8);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 100);
    java.util.Collections.rotate(var6, 100);
    boolean var17 = var2.addAll((java.util.Collection)var6);
    java.util.List var20 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.lang.Object[] var22 = var21.toArray();
    java.util.NavigableSet var25 = var21.headSet((java.lang.Object)10L, true);
    var21.clear();
    java.util.Map var27 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var21);
    java.util.Map var28 = java.util.Collections.synchronizedMap(var27);
    java.util.Map var29 = java.util.Collections.synchronizedMap(var27);
    java.util.Map var30 = java.util.Collections.unmodifiableMap(var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var31 = var2.floor((java.lang.Object)var29);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[1]"+ "'", var5.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);

  }

  public void test33() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    boolean var8 = java.util.Collections.disjoint((java.util.Collection)var0, (java.util.Collection)var6);
    java.util.Set var9 = java.util.Collections.singleton((java.lang.Object)var0);
    java.util.Collections.reverse(var0);
    java.util.List var11 = java.util.Collections.emptyList();
    java.util.Set var12 = java.util.Collections.emptySet();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.NavigableSet var14 = var13.descendingSet();
    int var15 = java.util.Collections.binarySearch(var11, (java.lang.Object)var13);
    java.util.List var17 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    boolean var19 = java.util.Collections.disjoint((java.util.Collection)var11, (java.util.Collection)var17);
    java.util.Set var20 = java.util.Collections.singleton((java.lang.Object)var11);
    java.util.Collections.reverse(var11);
    int var22 = java.util.Collections.indexOfSubList(var0, var11);
    java.util.Enumeration var23 = java.util.Collections.enumeration((java.util.Collection)var11);
    java.util.ArrayList var24 = java.util.Collections.list(var23);
    java.util.Collections.<java.lang.Comparable>sort((java.util.List)var24);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var32 = java.util.Collections.lastIndexOfSubList(var28, var31);
    java.util.List var35 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var36 = java.util.Collections.indexOfSubList(var28, var35);
    java.util.Collection var37 = java.util.Collections.synchronizedCollection((java.util.Collection)var28);
    java.util.Set var38 = java.util.Collections.emptySet();
    java.util.TreeSet var39 = new java.util.TreeSet((java.util.Collection)var38);
    var39.clear();
    java.util.Comparator var41 = java.util.Collections.reverseOrder();
    java.util.TreeSet var42 = new java.util.TreeSet(var41);
    java.util.List var45 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var48 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var49 = java.util.Collections.lastIndexOfSubList(var45, var48);
    java.util.Comparator var50 = java.util.Collections.reverseOrder();
    java.util.Comparator var51 = java.util.Collections.reverseOrder(var50);
    java.lang.Object var52 = java.util.Collections.min((java.util.Collection)var45, var50);
    int var53 = java.util.Collections.frequency((java.util.Collection)var42, (java.lang.Object)var50);
    java.util.Map var54 = java.util.Collections.singletonMap((java.lang.Object)var39, (java.lang.Object)var42);
    java.util.Set var55 = java.util.Collections.emptySet();
    java.util.TreeSet var56 = new java.util.TreeSet((java.util.Collection)var55);
    java.util.Enumeration var57 = java.util.Collections.enumeration((java.util.Collection)var56);
    java.util.Comparator var58 = var56.comparator();
    java.lang.String var59 = var56.toString();
    boolean var60 = var39.removeAll((java.util.Collection)var56);
    java.util.TreeSet var61 = new java.util.TreeSet((java.util.SortedSet)var56);
    java.lang.Object var62 = var56.pollFirst();
    boolean var63 = java.util.Collections.replaceAll((java.util.List)var24, (java.lang.Object)var37, (java.lang.Object)var56);
    java.util.List var65 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var66 = new java.util.TreeSet((java.util.Collection)var65);
    java.util.TreeSet var67 = new java.util.TreeSet((java.util.SortedSet)var66);
    java.util.SortedSet var68 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var67);
    java.lang.Object var69 = var67.clone();
    java.util.Iterator var70 = var67.descendingIterator();
    java.lang.Object var71 = java.util.Collections.max((java.util.Collection)var67);
    java.util.List var73 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var74 = new java.util.TreeSet((java.util.Collection)var73);
    java.util.TreeSet var75 = new java.util.TreeSet((java.util.SortedSet)var74);
    java.util.SortedSet var76 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var75);
    java.util.Comparator var77 = java.util.Collections.reverseOrder();
    java.util.Comparator var78 = java.util.Collections.reverseOrder(var77);
    java.util.Comparator var79 = java.util.Collections.reverseOrder(var78);
    java.lang.Object var80 = java.util.Collections.min((java.util.Collection)var76, var79);
    boolean var81 = var67.add(var80);
    java.util.Iterator var82 = var67.iterator();
    java.util.List var84 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var85 = new java.util.TreeSet((java.util.Collection)var84);
    java.util.TreeSet var86 = new java.util.TreeSet((java.util.SortedSet)var85);
    java.util.SortedSet var87 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var86);
    java.lang.Object var88 = var86.clone();
    java.util.Iterator var89 = var86.descendingIterator();
    boolean var90 = var67.removeAll((java.util.Collection)var86);
    java.lang.Object[] var91 = new java.lang.Object[] { var86};
    boolean var92 = java.util.Collections.addAll((java.util.Collection)var56, var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + 0+ "'", var52.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + (byte)1+ "'", var71.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + (byte)1+ "'", var80.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);

  }

  public void test34() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var10 = java.util.Collections.indexOfSubList(var2, var9);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 0);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var20, 0);
    java.util.Collections.rotate(var13, 0);
    java.util.Enumeration var26 = java.util.Collections.enumeration((java.util.Collection)var13);
    java.util.Collection var27 = java.util.Collections.synchronizedCollection((java.util.Collection)var13);
    int var28 = java.util.Collections.indexOfSubList(var2, var13);
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.lang.Object[] var32 = var31.toArray();
    java.util.NavigableSet var35 = var31.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var36 = var31.descendingSet();
    java.util.Collection var37 = java.util.Collections.synchronizedCollection((java.util.Collection)var31);
    boolean var39 = var31.add((java.lang.Object)(byte)100);
    java.util.List var41 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var42 = new java.util.TreeSet((java.util.Collection)var41);
    java.lang.Object[] var43 = var42.toArray();
    java.util.NavigableSet var44 = var42.descendingSet();
    java.lang.Object[] var45 = var42.toArray();
    boolean var46 = var31.equals((java.lang.Object)var42);
    java.util.List var48 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var49 = new java.util.TreeSet((java.util.Collection)var48);
    java.util.TreeSet var50 = new java.util.TreeSet((java.util.SortedSet)var49);
    java.lang.Object var51 = var49.pollLast();
    java.util.List var54 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var57 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var58 = java.util.Collections.lastIndexOfSubList(var54, var57);
    boolean var59 = var49.removeAll((java.util.Collection)var54);
    java.util.Set var60 = java.util.Collections.emptySet();
    java.util.TreeSet var61 = new java.util.TreeSet((java.util.Collection)var60);
    java.util.Enumeration var62 = java.util.Collections.enumeration((java.util.Collection)var61);
    java.lang.Object var64 = var61.lower((java.lang.Object)(short)(-1));
    java.lang.Object var65 = var49.floor((java.lang.Object)var61);
    boolean var66 = java.util.Collections.replaceAll(var13, (java.lang.Object)var46, (java.lang.Object)var61);
    java.util.TreeSet var67 = new java.util.TreeSet((java.util.SortedSet)var61);
    java.util.Set var68 = java.util.Collections.emptySet();
    java.util.TreeSet var69 = new java.util.TreeSet((java.util.Collection)var68);
    java.util.Enumeration var70 = java.util.Collections.enumeration((java.util.Collection)var69);
    boolean var71 = java.util.Collections.disjoint((java.util.Collection)var67, (java.util.Collection)var69);
    java.util.Iterator var72 = var69.descendingIterator();
    java.util.List var75 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var78 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var79 = java.util.Collections.lastIndexOfSubList(var75, var78);
    java.util.Enumeration var80 = java.util.Collections.enumeration((java.util.Collection)var78);
    java.util.ArrayList var81 = java.util.Collections.list(var80);
    java.util.Comparator var82 = java.util.Collections.reverseOrder();
    java.util.TreeSet var83 = new java.util.TreeSet(var82);
    java.util.Comparator var84 = java.util.Collections.reverseOrder(var82);
    java.lang.Object var85 = java.util.Collections.max((java.util.Collection)var81, var84);
    java.util.Comparator var86 = java.util.Collections.reverseOrder(var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var87 = java.util.Collections.max((java.util.Collection)var69, var84);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + (byte)1+ "'", var51.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + 0+ "'", var85.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);

  }

  public void test35() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.Iterator var3 = var2.iterator();
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.lang.Object[] var11 = new java.lang.Object[] { var6};
    java.lang.Object[] var12 = var2.toArray(var11);
    java.util.Comparator var14 = java.util.Collections.reverseOrder();
    java.util.TreeSet var15 = new java.util.TreeSet(var14);
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var22 = java.util.Collections.lastIndexOfSubList(var18, var21);
    boolean var23 = var15.removeAll((java.util.Collection)var18);
    java.util.NavigableSet var24 = var2.tailSet((java.lang.Object)10.0d, var23);
    java.lang.Object var25 = var2.pollFirst();
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + (byte)1+ "'", var25.equals((byte)1));

  }

  public void test36() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    int var7 = var2.size();
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.lang.Object[] var11 = var10.toArray();
    java.util.NavigableSet var14 = var10.headSet((java.lang.Object)10L, true);
    int var15 = var10.size();
    java.util.List var16 = java.util.Collections.nCopies(var7, (java.lang.Object)var15);
    java.util.Collection var17 = java.util.Collections.synchronizedCollection((java.util.Collection)var16);
    java.util.Collections.reverse(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);

  }

  public void test37() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    int var7 = var2.size();
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.lang.Object[] var11 = var10.toArray();
    java.util.NavigableSet var14 = var10.headSet((java.lang.Object)10L, true);
    int var15 = var10.size();
    java.util.List var16 = java.util.Collections.nCopies(var7, (java.lang.Object)var15);
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.lang.Object[] var21 = var20.toArray();
    java.util.NavigableSet var24 = var20.headSet((java.lang.Object)10L, true);
    var20.clear();
    java.util.Map var26 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var20);
    java.util.Map var27 = java.util.Collections.unmodifiableMap(var26);
    java.util.Map var28 = java.util.Collections.synchronizedMap(var27);
    java.util.Map var29 = java.util.Collections.synchronizedMap(var28);
    java.util.List var30 = java.util.Collections.nCopies(var7, (java.lang.Object)var29);
    java.util.List var32 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var33 = new java.util.TreeSet((java.util.Collection)var32);
    java.util.TreeSet var34 = new java.util.TreeSet((java.util.SortedSet)var33);
    java.lang.Object var35 = var33.pollLast();
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var42 = java.util.Collections.lastIndexOfSubList(var38, var41);
    boolean var43 = var33.removeAll((java.util.Collection)var38);
    java.util.Set var44 = java.util.Collections.emptySet();
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.util.Enumeration var46 = java.util.Collections.enumeration((java.util.Collection)var45);
    boolean var47 = var33.removeAll((java.util.Collection)var45);
    java.lang.Object var49 = var33.ceiling((java.lang.Object)0);
    java.util.List var51 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var52 = new java.util.TreeSet((java.util.Collection)var51);
    java.lang.Object[] var53 = var52.toArray();
    java.util.NavigableSet var56 = var52.headSet((java.lang.Object)10L, true);
    int var57 = var52.size();
    java.util.List var59 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var60 = new java.util.TreeSet((java.util.Collection)var59);
    java.lang.Object[] var61 = var60.toArray();
    java.util.NavigableSet var64 = var60.headSet((java.lang.Object)10L, true);
    int var65 = var60.size();
    java.util.List var66 = java.util.Collections.nCopies(var57, (java.lang.Object)var65);
    java.util.Collection var67 = java.util.Collections.synchronizedCollection((java.util.Collection)var66);
    java.util.TreeSet var68 = new java.util.TreeSet();
    java.lang.Object var69 = var68.clone();
    java.lang.Object var70 = var68.pollFirst();
    java.util.Map var71 = java.util.Collections.singletonMap((java.lang.Object)var67, (java.lang.Object)var68);
    boolean var72 = var33.containsAll(var67);
    int var73 = var33.size();
    java.util.Map var74 = java.util.Collections.singletonMap((java.lang.Object)var30, (java.lang.Object)var33);
    java.util.Comparator var75 = java.util.Collections.reverseOrder();
    java.util.TreeSet var76 = new java.util.TreeSet(var75);
    java.util.List var79 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var82 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var83 = java.util.Collections.lastIndexOfSubList(var79, var82);
    boolean var84 = var76.removeAll((java.util.Collection)var79);
    java.util.List var86 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var87 = new java.util.TreeSet((java.util.Collection)var86);
    java.lang.Object var88 = var87.clone();
    java.util.Iterator var89 = var87.iterator();
    java.util.Map var90 = java.util.Collections.singletonMap((java.lang.Object)var79, (java.lang.Object)var87);
    java.util.Map var91 = java.util.Collections.unmodifiableMap(var90);
    java.util.Map var92 = java.util.Collections.unmodifiableMap(var91);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.fill(var30, (java.lang.Object)var91);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + (byte)1+ "'", var35.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);

  }

  public void test38() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java.util.NavigableSet var17 = var13.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var18 = var13.descendingSet();
    boolean var19 = var3.add((java.lang.Object)var18);
    java.util.SortedSet var21 = var3.tailSet((java.lang.Object)"");
    java.util.List var23 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var24 = new java.util.TreeSet((java.util.Collection)var23);
    java.lang.Object[] var25 = var24.toArray();
    java.util.NavigableSet var28 = var24.headSet((java.lang.Object)10L, true);
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.util.NavigableSet var32 = var31.descendingSet();
    boolean var33 = var24.retainAll((java.util.Collection)var32);
    java.util.Comparator var34 = java.util.Collections.reverseOrder();
    java.util.TreeSet var35 = new java.util.TreeSet(var34);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var42 = java.util.Collections.lastIndexOfSubList(var38, var41);
    boolean var43 = var35.removeAll((java.util.Collection)var38);
    java.util.Iterator var44 = var35.iterator();
    boolean var45 = var24.removeAll((java.util.Collection)var35);
    java.util.Comparator var46 = java.util.Collections.reverseOrder();
    java.util.TreeSet var47 = new java.util.TreeSet(var46);
    java.util.List var50 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var53 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var54 = java.util.Collections.lastIndexOfSubList(var50, var53);
    java.util.Comparator var55 = java.util.Collections.reverseOrder();
    java.util.Comparator var56 = java.util.Collections.reverseOrder(var55);
    java.lang.Object var57 = java.util.Collections.min((java.util.Collection)var50, var55);
    int var58 = java.util.Collections.frequency((java.util.Collection)var47, (java.lang.Object)var55);
    java.util.List var60 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var61 = new java.util.TreeSet((java.util.Collection)var60);
    java.util.TreeSet var62 = new java.util.TreeSet((java.util.SortedSet)var61);
    java.util.SortedSet var63 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var62);
    java.lang.Object var64 = var62.clone();
    java.util.Iterator var65 = var62.descendingIterator();
    java.lang.Object var66 = java.util.Collections.max((java.util.Collection)var62);
    java.lang.Object var67 = var47.lower(var66);
    boolean var68 = var35.equals((java.lang.Object)var47);
    boolean var69 = var3.retainAll((java.util.Collection)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + 0+ "'", var57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + (byte)1+ "'", var66.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);

  }

  public void test39() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)var3);
    java.util.Collections.reverse(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test40() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.SortedSet var7 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var2);
    java.util.Collection var8 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.util.Set var9 = java.util.Collections.unmodifiableSet((java.util.Set)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);

  }

  public void test41() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var7 = var2.descendingSet();
    java.util.Collection var8 = java.util.Collections.synchronizedCollection((java.util.Collection)var2);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.lang.Object[] var13 = var12.toArray();
    java.util.NavigableSet var16 = var12.headSet((java.lang.Object)10L, true);
    var12.clear();
    java.util.Map var18 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var12);
    java.lang.Object[] var19 = var12.toArray();
    java.util.List var22 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.Collection)var22);
    java.lang.Object[] var24 = var23.toArray();
    java.util.NavigableSet var27 = var23.headSet((java.lang.Object)10L, true);
    var23.clear();
    java.util.Map var29 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var23);
    java.util.Comparator var30 = java.util.Collections.reverseOrder();
    java.util.TreeSet var31 = new java.util.TreeSet(var30);
    java.util.List var34 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var37 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var38 = java.util.Collections.lastIndexOfSubList(var34, var37);
    java.util.Comparator var39 = java.util.Collections.reverseOrder();
    java.util.Comparator var40 = java.util.Collections.reverseOrder(var39);
    java.lang.Object var41 = java.util.Collections.min((java.util.Collection)var34, var39);
    int var42 = java.util.Collections.frequency((java.util.Collection)var31, (java.lang.Object)var39);
    boolean var43 = var23.equals((java.lang.Object)var42);
    java.lang.Object var44 = var12.higher((java.lang.Object)var23);
    java.util.List var47 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var48 = java.util.Collections.singletonList((java.lang.Object)10);
    boolean var49 = var12.addAll((java.util.Collection)var48);
    java.util.List var50 = java.util.Collections.emptyList();
    java.util.Set var51 = java.util.Collections.emptySet();
    java.util.TreeSet var52 = new java.util.TreeSet((java.util.Collection)var51);
    java.util.NavigableSet var53 = var52.descendingSet();
    int var54 = java.util.Collections.binarySearch(var50, (java.lang.Object)var52);
    java.util.List var56 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var57 = new java.util.TreeSet((java.util.Collection)var56);
    boolean var58 = java.util.Collections.disjoint((java.util.Collection)var50, (java.util.Collection)var56);
    java.util.Set var59 = java.util.Collections.singleton((java.lang.Object)var50);
    java.util.Collections.copy(var48, var50);
    java.util.List var62 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var63 = new java.util.TreeSet((java.util.Collection)var62);
    java.lang.Object[] var64 = var63.toArray();
    java.util.NavigableSet var67 = var63.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var68 = var63.descendingSet();
    java.util.List var71 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var72 = java.util.Collections.max((java.util.Collection)var71);
    java.util.List var74 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var75 = new java.util.TreeSet((java.util.Collection)var74);
    java.lang.Object[] var76 = var75.toArray();
    java.util.NavigableSet var79 = var75.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var80 = var63.tailSet(var72, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.NavigableSet var81 = var2.tailSet((java.lang.Object)var48, true);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 0+ "'", var41.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + 0+ "'", var72.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);

  }

  public void test42() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java.util.NavigableSet var17 = var13.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var18 = var13.descendingSet();
    boolean var19 = var3.add((java.lang.Object)var18);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.SortedSet)var18);
    java.util.List var22 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.Collection)var22);
    java.lang.Object var24 = var23.clone();
    java.lang.Object var25 = var23.pollFirst();
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var28);
    java.lang.Object[] var30 = var29.toArray();
    java.util.NavigableSet var33 = var29.headSet((java.lang.Object)10L, true);
    var29.clear();
    java.util.Map var35 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var29);
    java.util.Map var36 = java.util.Collections.synchronizedMap(var35);
    java.util.Map var37 = java.util.Collections.synchronizedMap(var35);
    java.util.Map var38 = java.util.Collections.synchronizedMap(var35);
    java.lang.Object var39 = var23.lower((java.lang.Object)var35);
    java.util.Map var40 = java.util.Collections.unmodifiableMap(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var41 = var20.remove((java.lang.Object)var40);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + (byte)1+ "'", var25.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);

  }

  public void test43() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var7, 100);
    java.util.Collections.rotate(var0, 100);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var17 = java.util.Collections.lastIndexOfSubList(var13, var16);
    java.util.List var20 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var21 = java.util.Collections.indexOfSubList(var13, var20);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var27 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var28 = java.util.Collections.lastIndexOfSubList(var24, var27);
    int var29 = java.util.Collections.indexOfSubList(var13, var27);
    java.util.List var32 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var33 = new java.util.TreeSet((java.util.Collection)var32);
    java.lang.Object[] var34 = var33.toArray();
    java.util.NavigableSet var37 = var33.headSet((java.lang.Object)10L, true);
    var33.clear();
    java.util.Map var39 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var33);
    java.util.List var40 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.Collections.shuffle(var40);
    int var42 = java.util.Collections.indexOfSubList(var13, var40);
    java.util.List var45 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var48 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var45, 0);
    int var50 = java.util.Collections.indexOfSubList(var13, var45);
    java.util.Collection var51 = java.util.Collections.synchronizedCollection((java.util.Collection)var13);
    int var52 = java.util.Collections.indexOfSubList(var0, var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));

  }

  public void test44() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.String var5 = var2.toString();
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.lang.Object var9 = var8.clone();
    java.util.Iterator var10 = var8.iterator();
    java.util.Collection var11 = java.util.Collections.unmodifiableCollection((java.util.Collection)var8);
    java.lang.Object var12 = var8.pollLast();
    boolean var13 = var2.containsAll((java.util.Collection)var8);
    java.util.Enumeration var14 = java.util.Collections.enumeration((java.util.Collection)var8);
    java.lang.Object var15 = var8.pollFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[1]"+ "'", var5.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + (byte)1+ "'", var12.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);

  }

  public void test45() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var14);
    java.lang.Object var17 = var14.lower((java.lang.Object)(short)(-1));
    java.lang.Object var18 = var2.floor((java.lang.Object)var14);
    boolean var19 = var2.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test46() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.lang.Object var4 = var2.pollFirst();
    java.lang.Object var5 = var2.pollLast();
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.lang.Object[] var9 = var8.toArray();
    java.util.NavigableSet var12 = var8.headSet((java.lang.Object)10L, true);
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.util.NavigableSet var16 = var15.descendingSet();
    boolean var17 = var8.retainAll((java.util.Collection)var16);
    java.util.List var18 = java.util.Collections.singletonList((java.lang.Object)var8);
    java.util.Comparator var19 = java.util.Collections.reverseOrder();
    java.util.TreeSet var20 = new java.util.TreeSet(var19);
    java.util.Comparator var21 = java.util.Collections.reverseOrder(var19);
    java.util.TreeSet var22 = new java.util.TreeSet(var19);
    java.util.Comparator var23 = java.util.Collections.reverseOrder(var19);
    java.lang.Object var24 = java.util.Collections.min((java.util.Collection)var18, var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var25 = java.util.Collections.max((java.util.Collection)var2, var23);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);

  }

  public void test47() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.String var5 = var2.toString();
    java.util.List var6 = java.util.Collections.emptyList();
    java.util.Set var7 = java.util.Collections.emptySet();
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.util.NavigableSet var9 = var8.descendingSet();
    int var10 = java.util.Collections.binarySearch(var6, (java.lang.Object)var8);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 100);
    java.util.Collections.rotate(var6, 100);
    boolean var17 = var2.addAll((java.util.Collection)var6);
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.lang.Object[] var21 = var20.toArray();
    java.util.NavigableSet var24 = var20.headSet((java.lang.Object)10L, true);
    int var25 = var20.size();
    java.util.List var27 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.Collection)var27);
    java.lang.Object[] var29 = var28.toArray();
    java.util.NavigableSet var32 = var28.headSet((java.lang.Object)10L, true);
    int var33 = var28.size();
    java.util.List var34 = java.util.Collections.nCopies(var25, (java.lang.Object)var33);
    java.util.Collection var35 = java.util.Collections.synchronizedCollection((java.util.Collection)var34);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var38, 100);
    int var41 = java.util.Collections.lastIndexOfSubList(var34, var38);
    int var42 = java.util.Collections.lastIndexOfSubList(var6, var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[1]"+ "'", var5.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));

  }

  public void test48() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    java.util.List var3 = java.util.Collections.unmodifiableList(var2);
    java.util.Collection var4 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    java.lang.Object[] var8 = var7.toArray();
    java.util.NavigableSet var11 = var7.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var12 = var7.descendingSet();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.SortedSet)var7);
    java.lang.String var14 = var13.toString();
    java.util.List var16 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var17 = new java.util.TreeSet((java.util.Collection)var16);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.SortedSet)var17);
    java.lang.Object var19 = var17.pollLast();
    java.util.List var22 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var26 = java.util.Collections.lastIndexOfSubList(var22, var25);
    boolean var27 = var17.removeAll((java.util.Collection)var22);
    java.util.Set var28 = java.util.Collections.emptySet();
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var28);
    java.util.Enumeration var30 = java.util.Collections.enumeration((java.util.Collection)var29);
    boolean var31 = var17.removeAll((java.util.Collection)var29);
    boolean var32 = var17.isEmpty();
    java.util.Comparator var33 = var17.comparator();
    java.util.Set var34 = java.util.Collections.synchronizedSet((java.util.Set)var17);
    boolean var35 = java.util.Collections.replaceAll(var2, (java.lang.Object)var13, (java.lang.Object)var34);
    java.util.List var36 = java.util.Collections.singletonList((java.lang.Object)var34);
    java.util.List var39 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var40 = new java.util.TreeSet((java.util.Collection)var39);
    java.util.List var43 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var46 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var47 = java.util.Collections.lastIndexOfSubList(var43, var46);
    java.util.Comparator var48 = java.util.Collections.reverseOrder();
    java.util.Comparator var49 = java.util.Collections.reverseOrder(var48);
    java.lang.Object var50 = java.util.Collections.min((java.util.Collection)var43, var48);
    java.lang.Object var51 = java.util.Collections.max((java.util.Collection)var40, var48);
    java.util.List var52 = java.util.Collections.nCopies(100, (java.lang.Object)var40);
    java.util.List var54 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var55 = new java.util.TreeSet((java.util.Collection)var54);
    java.lang.Object[] var56 = var55.toArray();
    java.util.NavigableSet var59 = var55.headSet((java.lang.Object)10L, true);
    int var60 = var55.size();
    java.util.List var62 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var63 = new java.util.TreeSet((java.util.Collection)var62);
    java.lang.Object[] var64 = var63.toArray();
    java.util.NavigableSet var67 = var63.headSet((java.lang.Object)10L, true);
    int var68 = var63.size();
    java.util.List var69 = java.util.Collections.nCopies(var60, (java.lang.Object)var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.swap(var36, 100, var68);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[1]"+ "'", var14.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + (byte)1+ "'", var19.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + 0+ "'", var50.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + (byte)1+ "'", var51.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);

  }

  public void test49() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder();
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.TreeSet var10 = new java.util.TreeSet(var7);
    java.lang.String var11 = var10.toString();
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.lang.Object[] var16 = var15.toArray();
    java.util.NavigableSet var19 = var15.headSet((java.lang.Object)10L, true);
    var15.clear();
    java.util.Map var21 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var15);
    java.lang.Object var23 = var15.lower((java.lang.Object)'#');
    boolean var24 = var10.equals((java.lang.Object)var15);
    java.lang.Object[] var25 = var15.toArray();
    java.util.Set var26 = java.util.Collections.emptySet();
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.SortedSet var28 = var15.headSet((java.lang.Object)var26);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);

  }

  public void test50() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.lang.Object var4 = var2.pollFirst();
    java.util.SortedSet var5 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var2);
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.lang.Object[] var10 = var9.toArray();
    java.util.NavigableSet var13 = var9.headSet((java.lang.Object)10L, true);
    var9.clear();
    java.util.Map var15 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var9);
    java.util.NavigableSet var16 = var9.descendingSet();
    java.lang.Object var17 = var9.pollFirst();
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.SortedSet)var20);
    java.util.SortedSet var22 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var21);
    java.lang.Object var23 = var9.higher((java.lang.Object)var21);
    java.util.Set var24 = java.util.Collections.emptySet();
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.util.Enumeration var26 = java.util.Collections.enumeration((java.util.Collection)var25);
    java.lang.Object var28 = var25.lower((java.lang.Object)(short)(-1));
    java.util.SortedSet var30 = var25.headSet((java.lang.Object)'#');
    boolean var31 = var21.addAll((java.util.Collection)var30);
    boolean var32 = var2.containsAll((java.util.Collection)var30);
    java.util.TreeSet var33 = new java.util.TreeSet((java.util.SortedSet)var2);
    int var34 = var33.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);

  }

  public void test51() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.lang.Object[] var7 = var2.toArray();
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var14 = java.util.Collections.lastIndexOfSubList(var10, var13);
    java.lang.Object var15 = java.util.Collections.min((java.util.Collection)var10);
    boolean var16 = var2.removeAll((java.util.Collection)var10);
    java.lang.Object[] var17 = var2.toArray();
    java.util.Iterator var18 = var2.iterator();
    boolean var19 = var2.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 0+ "'", var15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test52() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object var11 = var3.lower((java.lang.Object)'#');
    java.util.Iterator var12 = var3.descendingIterator();
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    var14.clear();
    java.util.Comparator var16 = java.util.Collections.reverseOrder();
    java.util.TreeSet var17 = new java.util.TreeSet(var16);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var24 = java.util.Collections.lastIndexOfSubList(var20, var23);
    java.util.Comparator var25 = java.util.Collections.reverseOrder();
    java.util.Comparator var26 = java.util.Collections.reverseOrder(var25);
    java.lang.Object var27 = java.util.Collections.min((java.util.Collection)var20, var25);
    int var28 = java.util.Collections.frequency((java.util.Collection)var17, (java.lang.Object)var25);
    java.util.Map var29 = java.util.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var17);
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var32, 0);
    java.util.List var39 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var42 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var39, 0);
    java.util.List var46 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var49 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var46, 0);
    java.util.Collections.rotate(var39, 0);
    java.util.Collections.rotate(var32, 0);
    java.util.SortedSet var53 = var14.headSet((java.lang.Object)0);
    boolean var54 = var3.addAll((java.util.Collection)var14);
    java.util.SortedSet var55 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.NavigableSet var56 = var3.descendingSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 0+ "'", var27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);

  }

  public void test53() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder();
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.TreeSet var10 = new java.util.TreeSet(var7);
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.SortedSet)var13);
    java.lang.Object var15 = var13.pollLast();
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var22 = java.util.Collections.lastIndexOfSubList(var18, var21);
    boolean var23 = var13.removeAll((java.util.Collection)var18);
    java.util.Set var24 = java.util.Collections.emptySet();
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.util.Enumeration var26 = java.util.Collections.enumeration((java.util.Collection)var25);
    boolean var27 = var13.removeAll((java.util.Collection)var25);
    boolean var28 = var13.isEmpty();
    java.util.Comparator var29 = var13.comparator();
    boolean var30 = var13.isEmpty();
    java.lang.Object var31 = var10.higher((java.lang.Object)var30);
    java.util.SortedSet var32 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var10);
    java.util.Collection var33 = java.util.Collections.synchronizedCollection((java.util.Collection)var10);
    java.util.List var35 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var36 = new java.util.TreeSet((java.util.Collection)var35);
    java.util.Iterator var37 = var36.iterator();
    java.util.Collection var38 = java.util.Collections.unmodifiableCollection((java.util.Collection)var36);
    java.lang.Object var39 = java.util.Collections.min(var38);
    boolean var40 = var10.retainAll(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + (byte)1+ "'", var15.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + (byte)1+ "'", var39.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test54() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java.util.Iterator var6 = var3.descendingIterator();
    java.lang.Object var7 = java.util.Collections.max((java.util.Collection)var3);
    java.lang.Object var8 = var3.pollLast();
    java.util.NavigableSet var9 = var3.descendingSet();
    java.util.Comparator var10 = java.util.Collections.reverseOrder();
    java.util.TreeSet var11 = new java.util.TreeSet(var10);
    java.util.List var14 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var17 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var18 = java.util.Collections.lastIndexOfSubList(var14, var17);
    java.util.Comparator var19 = java.util.Collections.reverseOrder();
    java.util.Comparator var20 = java.util.Collections.reverseOrder(var19);
    java.lang.Object var21 = java.util.Collections.min((java.util.Collection)var14, var19);
    int var22 = java.util.Collections.frequency((java.util.Collection)var11, (java.lang.Object)var19);
    java.util.List var24 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.SortedSet)var25);
    java.util.SortedSet var27 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var26);
    java.lang.Object var28 = var26.clone();
    java.util.Iterator var29 = var26.descendingIterator();
    java.lang.Object var30 = java.util.Collections.max((java.util.Collection)var26);
    java.lang.Object var31 = var11.lower(var30);
    java.util.Enumeration var32 = java.util.Collections.enumeration((java.util.Collection)var11);
    java.util.ArrayList var33 = java.util.Collections.list(var32);
    java.util.ArrayList var34 = java.util.Collections.list(var32);
    java.util.ArrayList var35 = java.util.Collections.list(var32);
    java.lang.Object var36 = var3.lower((java.lang.Object)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + (byte)1+ "'", var8.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + 0+ "'", var21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + (byte)1+ "'", var30.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);

  }

  public void test55() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    var1.clear();
    java.util.Comparator var3 = java.util.Collections.reverseOrder();
    java.util.TreeSet var4 = new java.util.TreeSet(var3);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Comparator var12 = java.util.Collections.reverseOrder();
    java.util.Comparator var13 = java.util.Collections.reverseOrder(var12);
    java.lang.Object var14 = java.util.Collections.min((java.util.Collection)var7, var12);
    int var15 = java.util.Collections.frequency((java.util.Collection)var4, (java.lang.Object)var12);
    java.util.Map var16 = java.util.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)var4);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var22 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var19, 0);
    java.util.List var26 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var29 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var26, 0);
    java.util.List var33 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var33, 0);
    java.util.Collections.rotate(var26, 0);
    java.util.Collections.rotate(var19, 0);
    java.util.SortedSet var40 = var1.headSet((java.lang.Object)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var41 = java.util.Collections.min((java.util.Collection)var1);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 0+ "'", var14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);

  }

  public void test56() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var7 = var2.descendingSet();
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var11 = java.util.Collections.max((java.util.Collection)var10);
    java.util.List var13 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.lang.Object[] var15 = var14.toArray();
    java.util.NavigableSet var18 = var14.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var19 = var2.tailSet(var11, true);
    java.util.SortedSet var20 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var2);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var27 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var28 = java.util.Collections.lastIndexOfSubList(var24, var27);
    java.util.Enumeration var29 = java.util.Collections.enumeration((java.util.Collection)var27);
    java.util.ArrayList var30 = java.util.Collections.list(var29);
    java.util.Comparator var31 = java.util.Collections.reverseOrder();
    java.util.TreeSet var32 = new java.util.TreeSet(var31);
    java.util.Comparator var33 = java.util.Collections.reverseOrder(var31);
    java.lang.Object var34 = java.util.Collections.max((java.util.Collection)var30, var33);
    java.util.List var36 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var37 = new java.util.TreeSet((java.util.Collection)var36);
    java.lang.Object[] var38 = var37.toArray();
    java.util.NavigableSet var41 = var37.headSet((java.lang.Object)10L, true);
    int var42 = var37.size();
    java.util.List var45 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var48 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var49 = java.util.Collections.lastIndexOfSubList(var45, var48);
    java.util.Collections.swap((java.util.List)var30, var42, var49);
    java.util.List var53 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var56 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var57 = java.util.Collections.lastIndexOfSubList(var53, var56);
    java.util.Comparator var58 = java.util.Collections.reverseOrder();
    java.util.Comparator var59 = java.util.Collections.reverseOrder(var58);
    java.lang.Object var60 = java.util.Collections.min((java.util.Collection)var53, var58);
    java.util.TreeSet var61 = new java.util.TreeSet(var58);
    java.lang.String var62 = var61.toString();
    java.util.Comparator var63 = var61.comparator();
    java.util.Collections.sort((java.util.List)var30, var63);
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.Object[] var66 = var2.toArray(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 0+ "'", var11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + 0+ "'", var34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + 0+ "'", var60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "[]"+ "'", var62.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);

  }

  public void test57() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.Collections.rotate(var2, 0);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.ArrayList var16 = java.util.Collections.list(var15);
    java.util.Collections.swap((java.util.List)var16, 1, 0);
    java.util.Collections.shuffle((java.util.List)var16);
    java.util.List var23 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var24 = new java.util.TreeSet((java.util.Collection)var23);
    java.lang.Object[] var25 = var24.toArray();
    java.util.NavigableSet var28 = var24.headSet((java.lang.Object)10L, true);
    var24.clear();
    java.util.Map var30 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var24);
    java.lang.Object[] var31 = var24.toArray();
    java.util.List var33 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var34 = new java.util.TreeSet((java.util.Collection)var33);
    java.lang.Object[] var35 = var34.toArray();
    java.util.NavigableSet var38 = var34.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var39 = var34.descendingSet();
    boolean var40 = var24.add((java.lang.Object)var39);
    boolean var41 = var16.containsAll((java.util.Collection)var39);
    java.util.Collection var42 = java.util.Collections.unmodifiableCollection((java.util.Collection)var16);
    java.util.List var45 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var48 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var49 = java.util.Collections.lastIndexOfSubList(var45, var48);
    java.util.Comparator var50 = java.util.Collections.reverseOrder();
    java.util.Comparator var51 = java.util.Collections.reverseOrder(var50);
    java.lang.Object var52 = java.util.Collections.min((java.util.Collection)var45, var50);
    java.util.TreeSet var53 = new java.util.TreeSet(var50);
    java.lang.String var54 = var53.toString();
    java.util.Comparator var55 = var53.comparator();
    java.util.TreeSet var56 = new java.util.TreeSet((java.util.SortedSet)var53);
    java.util.List var57 = java.util.Collections.singletonList((java.lang.Object)var53);
    int var58 = java.util.Collections.indexOfSubList((java.util.List)var16, var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + 0+ "'", var52.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[]"+ "'", var54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));

  }

  public void test58() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    java.util.Comparator var9 = java.util.Collections.reverseOrder();
    java.util.Comparator var10 = java.util.Collections.reverseOrder(var9);
    java.lang.Object var11 = java.util.Collections.min((java.util.Collection)var4, var9);
    int var12 = java.util.Collections.frequency((java.util.Collection)var1, (java.lang.Object)var9);
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.lang.Object[] var16 = var15.toArray();
    java.util.NavigableSet var19 = var15.headSet((java.lang.Object)10L, true);
    int var20 = var15.size();
    java.lang.Object var21 = var15.clone();
    java.lang.Object[] var22 = var15.toArray();
    java.lang.Object var23 = var1.ceiling((java.lang.Object)var15);
    java.lang.Object[] var24 = var15.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 0+ "'", var11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);

  }

  public void test59() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.SortedSet)var13);
    java.util.SortedSet var15 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var14);
    java.lang.Object var16 = var14.clone();
    java.util.Iterator var17 = var14.descendingIterator();
    java.lang.Object var18 = java.util.Collections.max((java.util.Collection)var14);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var14);
    java.util.List var20 = java.util.Collections.nCopies(var10, (java.lang.Object)var14);
    boolean var21 = var2.containsAll((java.util.Collection)var14);
    java.util.Collection var22 = java.util.Collections.synchronizedCollection((java.util.Collection)var2);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + (byte)1+ "'", var18.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);

  }

  public void test60() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    java.util.Enumeration var2 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.util.List var4 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var5 = new java.util.TreeSet((java.util.Collection)var4);
    java.util.Iterator var6 = var5.iterator();
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var13 = java.util.Collections.lastIndexOfSubList(var9, var12);
    java.lang.Object[] var14 = new java.lang.Object[] { var9};
    java.lang.Object[] var15 = var5.toArray(var14);
    java.util.Comparator var17 = java.util.Collections.reverseOrder();
    java.util.TreeSet var18 = new java.util.TreeSet(var17);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var25 = java.util.Collections.lastIndexOfSubList(var21, var24);
    boolean var26 = var18.removeAll((java.util.Collection)var21);
    java.util.NavigableSet var27 = var5.tailSet((java.lang.Object)10.0d, var26);
    java.util.List var29 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.Collection)var29);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.SortedSet)var30);
    java.lang.Object var32 = var30.pollLast();
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var39 = java.util.Collections.lastIndexOfSubList(var35, var38);
    boolean var40 = var30.removeAll((java.util.Collection)var35);
    java.util.List var43 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var44 = new java.util.TreeSet((java.util.Collection)var43);
    java.lang.Object[] var45 = var44.toArray();
    java.util.NavigableSet var48 = var44.headSet((java.lang.Object)10L, true);
    var44.clear();
    java.util.Map var50 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var44);
    java.lang.Object[] var51 = var44.toArray();
    java.util.List var53 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var54 = new java.util.TreeSet((java.util.Collection)var53);
    java.lang.Object[] var55 = var54.toArray();
    java.util.NavigableSet var58 = var54.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var59 = var54.descendingSet();
    boolean var60 = var44.add((java.lang.Object)var59);
    java.util.SortedSet var62 = var44.tailSet((java.lang.Object)"");
    java.util.SortedSet var63 = var30.headSet((java.lang.Object)"");
    java.util.TreeSet var64 = new java.util.TreeSet(var63);
    boolean var65 = var5.removeAll((java.util.Collection)var63);
    java.lang.Object var66 = var5.first();
    java.lang.Object var67 = var1.higher((java.lang.Object)var5);
    java.lang.String var68 = var1.toString();
    java.util.SortedSet var69 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + (byte)1+ "'", var32.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + (byte)1+ "'", var66.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[]"+ "'", var68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);

  }

  public void test61() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.SortedSet)var7);
    java.lang.Object var9 = var7.pollLast();
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var15 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var16 = java.util.Collections.lastIndexOfSubList(var12, var15);
    boolean var17 = var7.removeAll((java.util.Collection)var12);
    java.util.List var20 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.lang.Object[] var22 = var21.toArray();
    java.util.NavigableSet var25 = var21.headSet((java.lang.Object)10L, true);
    var21.clear();
    java.util.Map var27 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var21);
    java.lang.Object[] var28 = var21.toArray();
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.lang.Object[] var32 = var31.toArray();
    java.util.NavigableSet var35 = var31.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var36 = var31.descendingSet();
    boolean var37 = var21.add((java.lang.Object)var36);
    java.util.SortedSet var39 = var21.tailSet((java.lang.Object)"");
    java.util.SortedSet var40 = var7.headSet((java.lang.Object)"");
    java.util.SortedSet var41 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var7);
    boolean var42 = var2.addAll((java.util.Collection)var41);
    java.lang.Object[] var43 = var2.toArray();
    java.util.Set var44 = java.util.Collections.emptySet();
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.util.Enumeration var46 = java.util.Collections.enumeration((java.util.Collection)var45);
    java.lang.Object var47 = var45.pollLast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var48 = var2.remove((java.lang.Object)var45);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (byte)1+ "'", var9.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);

  }

  public void test62() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.lang.Object var7 = java.util.Collections.min((java.util.Collection)var2);
    java.util.Comparator var8 = java.util.Collections.reverseOrder();
    java.util.TreeSet var9 = new java.util.TreeSet(var8);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var15 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var16 = java.util.Collections.lastIndexOfSubList(var12, var15);
    java.util.Comparator var17 = java.util.Collections.reverseOrder();
    java.util.Comparator var18 = java.util.Collections.reverseOrder(var17);
    java.lang.Object var19 = java.util.Collections.min((java.util.Collection)var12, var17);
    int var20 = java.util.Collections.frequency((java.util.Collection)var9, (java.lang.Object)var17);
    java.util.List var22 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.Collection)var22);
    java.lang.Object[] var24 = var23.toArray();
    java.util.NavigableSet var27 = var23.headSet((java.lang.Object)10L, true);
    int var28 = var23.size();
    java.lang.Object var29 = var23.clone();
    java.lang.Object[] var30 = var23.toArray();
    java.lang.Object var31 = var9.ceiling((java.lang.Object)var23);
    boolean var32 = java.util.Collections.disjoint((java.util.Collection)var2, (java.util.Collection)var23);
    java.util.TreeSet var33 = new java.util.TreeSet((java.util.Collection)var2);
    java.util.List var35 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var36 = new java.util.TreeSet((java.util.Collection)var35);
    java.util.TreeSet var37 = new java.util.TreeSet((java.util.SortedSet)var36);
    java.util.SortedSet var38 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var37);
    java.lang.Object var39 = var37.pollLast();
    java.util.List var41 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var42 = new java.util.TreeSet((java.util.Collection)var41);
    java.lang.Object var43 = var42.clone();
    java.util.Iterator var44 = var42.iterator();
    java.util.Collection var45 = java.util.Collections.unmodifiableCollection((java.util.Collection)var42);
    java.lang.Object var46 = var42.pollLast();
    java.util.Set var47 = java.util.Collections.emptySet();
    java.util.TreeSet var48 = new java.util.TreeSet((java.util.Collection)var47);
    var48.clear();
    boolean var50 = var42.retainAll((java.util.Collection)var48);
    java.util.List var53 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var53, 100);
    java.util.Set var56 = java.util.Collections.emptySet();
    java.util.TreeSet var57 = new java.util.TreeSet((java.util.Collection)var56);
    java.util.Enumeration var58 = java.util.Collections.enumeration((java.util.Collection)var57);
    java.util.List var59 = java.util.Collections.nCopies(100, (java.lang.Object)var58);
    boolean var60 = var48.add((java.lang.Object)var59);
    boolean var61 = var37.addAll((java.util.Collection)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var62 = var33.contains((java.lang.Object)var37);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 0+ "'", var7.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + 0+ "'", var19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + (byte)1+ "'", var39.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + (byte)1+ "'", var46.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test63() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.Iterator var3 = var2.iterator();
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.lang.Object[] var11 = new java.lang.Object[] { var6};
    java.lang.Object[] var12 = var2.toArray(var11);
    java.util.Enumeration var13 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.List var15 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.Collection)var15);
    java.util.TreeSet var17 = new java.util.TreeSet((java.util.SortedSet)var16);
    java.lang.Object var18 = var16.pollLast();
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var25 = java.util.Collections.lastIndexOfSubList(var21, var24);
    boolean var26 = var16.removeAll((java.util.Collection)var21);
    java.util.List var29 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.Collection)var29);
    java.lang.Object[] var31 = var30.toArray();
    java.util.NavigableSet var34 = var30.headSet((java.lang.Object)10L, true);
    var30.clear();
    java.util.Map var36 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var30);
    java.lang.Object[] var37 = var30.toArray();
    java.util.List var39 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var40 = new java.util.TreeSet((java.util.Collection)var39);
    java.lang.Object[] var41 = var40.toArray();
    java.util.NavigableSet var44 = var40.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var45 = var40.descendingSet();
    boolean var46 = var30.add((java.lang.Object)var45);
    java.util.SortedSet var48 = var30.tailSet((java.lang.Object)"");
    java.util.SortedSet var49 = var16.headSet((java.lang.Object)"");
    java.util.Collection var50 = java.util.Collections.synchronizedCollection((java.util.Collection)var16);
    java.lang.Object[] var51 = var16.toArray();
    boolean var52 = java.util.Collections.disjoint((java.util.Collection)var2, (java.util.Collection)var16);
    java.util.Iterator var53 = var16.descendingIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + (byte)1+ "'", var18.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);

  }

  public void test64() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.String var5 = var2.toString();
    java.util.List var6 = java.util.Collections.emptyList();
    java.util.Set var7 = java.util.Collections.emptySet();
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.util.NavigableSet var9 = var8.descendingSet();
    int var10 = java.util.Collections.binarySearch(var6, (java.lang.Object)var8);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 100);
    java.util.Collections.rotate(var6, 100);
    boolean var17 = var2.addAll((java.util.Collection)var6);
    java.util.List var20 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.lang.Object[] var22 = var21.toArray();
    java.util.NavigableSet var25 = var21.headSet((java.lang.Object)10L, true);
    var21.clear();
    java.util.Map var27 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var21);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    int var29 = java.util.Collections.binarySearch(var6, (java.lang.Object)10.0d);
    java.util.List var31 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var32 = new java.util.TreeSet((java.util.Collection)var31);
    java.lang.Object[] var33 = var32.toArray();
    java.util.NavigableSet var36 = var32.headSet((java.lang.Object)10L, true);
    java.lang.Object[] var37 = var32.toArray();
    java.util.List var40 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var43 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var44 = java.util.Collections.lastIndexOfSubList(var40, var43);
    java.lang.Object var45 = java.util.Collections.min((java.util.Collection)var40);
    boolean var46 = var32.removeAll((java.util.Collection)var40);
    java.util.Map var47 = java.util.Collections.singletonMap((java.lang.Object)var6, (java.lang.Object)var32);
    java.util.List var49 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var50 = new java.util.TreeSet((java.util.Collection)var49);
    java.lang.Object var51 = var50.clone();
    java.lang.Object var52 = var50.pollFirst();
    java.util.Set var53 = java.util.Collections.synchronizedSet((java.util.Set)var50);
    java.util.List var55 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var56 = new java.util.TreeSet((java.util.Collection)var55);
    java.util.List var59 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var62 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var63 = java.util.Collections.lastIndexOfSubList(var59, var62);
    java.util.Comparator var64 = java.util.Collections.reverseOrder();
    java.util.Comparator var65 = java.util.Collections.reverseOrder(var64);
    java.lang.Object var66 = java.util.Collections.min((java.util.Collection)var59, var64);
    java.lang.Object var67 = java.util.Collections.max((java.util.Collection)var56, var64);
    boolean var68 = var56.isEmpty();
    boolean var69 = var50.addAll((java.util.Collection)var56);
    java.util.List var72 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var75 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var72, 0);
    java.util.List var79 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var82 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var79, 0);
    java.util.Collections.rotate(var72, 0);
    java.util.Enumeration var85 = java.util.Collections.enumeration((java.util.Collection)var72);
    java.util.ArrayList var86 = java.util.Collections.list(var85);
    java.util.ArrayList var87 = java.util.Collections.list(var85);
    boolean var88 = var56.containsAll((java.util.Collection)var87);
    java.util.SortedSet var89 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var90 = var32.contains((java.lang.Object)var56);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[1]"+ "'", var5.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + 0+ "'", var45.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + (byte)1+ "'", var52.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + 0+ "'", var66.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + (byte)1+ "'", var67.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);

  }

  public void test65() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    boolean var8 = java.util.Collections.disjoint((java.util.Collection)var0, (java.util.Collection)var6);
    java.util.Set var9 = java.util.Collections.singleton((java.lang.Object)var0);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.lang.Object[] var13 = var12.toArray();
    java.util.NavigableSet var16 = var12.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var17 = var12.descendingSet();
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.SortedSet)var12);
    int var19 = java.util.Collections.frequency((java.util.Collection)var0, (java.lang.Object)var18);
    java.util.List var22 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var22, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var25 = java.util.Collections.disjoint((java.util.Collection)var18, (java.util.Collection)var22);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);

  }

  public void test66() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.Iterator var3 = var2.iterator();
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.lang.Object[] var11 = new java.lang.Object[] { var6};
    java.lang.Object[] var12 = var2.toArray(var11);
    java.util.Comparator var14 = java.util.Collections.reverseOrder();
    java.util.TreeSet var15 = new java.util.TreeSet(var14);
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var22 = java.util.Collections.lastIndexOfSubList(var18, var21);
    boolean var23 = var15.removeAll((java.util.Collection)var18);
    java.util.NavigableSet var24 = var2.tailSet((java.lang.Object)10.0d, var23);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.SortedSet)var27);
    java.lang.Object var29 = var27.pollLast();
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var36 = java.util.Collections.lastIndexOfSubList(var32, var35);
    boolean var37 = var27.removeAll((java.util.Collection)var32);
    java.util.List var40 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var41 = new java.util.TreeSet((java.util.Collection)var40);
    java.lang.Object[] var42 = var41.toArray();
    java.util.NavigableSet var45 = var41.headSet((java.lang.Object)10L, true);
    var41.clear();
    java.util.Map var47 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var41);
    java.lang.Object[] var48 = var41.toArray();
    java.util.List var50 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var51 = new java.util.TreeSet((java.util.Collection)var50);
    java.lang.Object[] var52 = var51.toArray();
    java.util.NavigableSet var55 = var51.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var56 = var51.descendingSet();
    boolean var57 = var41.add((java.lang.Object)var56);
    java.util.SortedSet var59 = var41.tailSet((java.lang.Object)"");
    java.util.SortedSet var60 = var27.headSet((java.lang.Object)"");
    java.util.TreeSet var61 = new java.util.TreeSet(var60);
    boolean var62 = var2.removeAll((java.util.Collection)var60);
    java.lang.Object var63 = var2.first();
    java.util.List var65 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var66 = new java.util.TreeSet((java.util.Collection)var65);
    java.util.TreeSet var67 = new java.util.TreeSet((java.util.SortedSet)var66);
    java.util.SortedSet var68 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var67);
    java.util.Set var69 = java.util.Collections.synchronizedSet((java.util.Set)var67);
    boolean var70 = var2.removeAll((java.util.Collection)var67);
    java.util.TreeSet var71 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var72 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + (byte)1+ "'", var29.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + (byte)1+ "'", var63.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);

  }

  public void test67() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    java.util.Comparator var9 = java.util.Collections.reverseOrder();
    java.util.Comparator var10 = java.util.Collections.reverseOrder(var9);
    java.lang.Object var11 = java.util.Collections.min((java.util.Collection)var4, var9);
    int var12 = java.util.Collections.frequency((java.util.Collection)var1, (java.lang.Object)var9);
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.SortedSet)var15);
    java.util.SortedSet var17 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var16);
    java.lang.Object var18 = var16.clone();
    java.util.Iterator var19 = var16.descendingIterator();
    java.lang.Object var20 = java.util.Collections.max((java.util.Collection)var16);
    java.lang.Object var21 = var1.lower(var20);
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.util.Set var23 = java.util.Collections.singleton((java.lang.Object)var1);
    java.util.Set var24 = java.util.Collections.emptySet();
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.util.Enumeration var26 = java.util.Collections.enumeration((java.util.Collection)var25);
    java.util.Comparator var27 = var25.comparator();
    java.util.List var29 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.Collection)var29);
    java.lang.Object[] var31 = var30.toArray();
    java.util.NavigableSet var34 = var30.headSet((java.lang.Object)10L, true);
    int var35 = var30.size();
    java.util.List var37 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var38 = new java.util.TreeSet((java.util.Collection)var37);
    java.lang.Object[] var39 = var38.toArray();
    java.util.NavigableSet var42 = var38.headSet((java.lang.Object)10L, true);
    int var43 = var38.size();
    java.util.List var44 = java.util.Collections.nCopies(var35, (java.lang.Object)var43);
    java.util.List var47 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var48 = new java.util.TreeSet((java.util.Collection)var47);
    java.lang.Object[] var49 = var48.toArray();
    java.util.NavigableSet var52 = var48.headSet((java.lang.Object)10L, true);
    var48.clear();
    java.util.Map var54 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var48);
    java.util.Map var55 = java.util.Collections.unmodifiableMap(var54);
    java.util.Map var56 = java.util.Collections.synchronizedMap(var55);
    java.util.Map var57 = java.util.Collections.synchronizedMap(var56);
    java.util.List var58 = java.util.Collections.nCopies(var35, (java.lang.Object)var57);
    java.util.List var59 = java.util.Collections.emptyList();
    java.util.Set var60 = java.util.Collections.emptySet();
    java.util.TreeSet var61 = new java.util.TreeSet((java.util.Collection)var60);
    java.util.NavigableSet var62 = var61.descendingSet();
    int var63 = java.util.Collections.binarySearch(var59, (java.lang.Object)var61);
    int var64 = java.util.Collections.indexOfSubList(var58, var59);
    java.lang.Object var65 = var25.higher((java.lang.Object)var64);
    boolean var66 = var1.remove((java.lang.Object)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 0+ "'", var11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + (byte)1+ "'", var20.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test68() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object var11 = var3.lower((java.lang.Object)'#');
    java.util.Iterator var12 = var3.descendingIterator();
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    var14.clear();
    java.util.Comparator var16 = java.util.Collections.reverseOrder();
    java.util.TreeSet var17 = new java.util.TreeSet(var16);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var24 = java.util.Collections.lastIndexOfSubList(var20, var23);
    java.util.Comparator var25 = java.util.Collections.reverseOrder();
    java.util.Comparator var26 = java.util.Collections.reverseOrder(var25);
    java.lang.Object var27 = java.util.Collections.min((java.util.Collection)var20, var25);
    int var28 = java.util.Collections.frequency((java.util.Collection)var17, (java.lang.Object)var25);
    java.util.Map var29 = java.util.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var17);
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var32, 0);
    java.util.List var39 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var42 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var39, 0);
    java.util.List var46 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var49 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var46, 0);
    java.util.Collections.rotate(var39, 0);
    java.util.Collections.rotate(var32, 0);
    java.util.SortedSet var53 = var14.headSet((java.lang.Object)0);
    boolean var54 = var3.addAll((java.util.Collection)var14);
    java.lang.Object var55 = var3.pollFirst();
    int var56 = var3.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 0+ "'", var27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);

  }

  public void test69() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    java.util.Enumeration var2 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.lang.String var3 = var1.toString();
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var6 = new java.util.TreeSet((java.util.Collection)var5);
    java.lang.Object[] var7 = var6.toArray();
    java.util.NavigableSet var10 = var6.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var11 = var6.descendingSet();
    java.lang.String var12 = var6.toString();
    java.lang.Object var13 = var1.lower((java.lang.Object)var6);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.SortedSet)var1);
    java.util.List var17 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var17, 100);
    java.util.Collection var20 = java.util.Collections.synchronizedCollection((java.util.Collection)var17);
    java.util.Enumeration var21 = java.util.Collections.enumeration(var20);
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.lang.Object[] var23 = var1.toArray(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[1]"+ "'", var12.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);

  }

  public void test70() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.Iterator var4 = var2.iterator();
    java.util.Collection var5 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.lang.Object var6 = var2.pollLast();
    java.util.Set var7 = java.util.Collections.emptySet();
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    var8.clear();
    boolean var10 = var2.retainAll((java.util.Collection)var8);
    java.util.Collection var11 = java.util.Collections.unmodifiableCollection((java.util.Collection)var8);
    java.util.Comparator var12 = var8.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + (byte)1+ "'", var6.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test71() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.Collections.rotate(var2, 0);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.ArrayList var16 = java.util.Collections.list(var15);
    java.util.List var18 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var18);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.SortedSet)var19);
    java.util.SortedSet var21 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var20);
    java.util.Comparator var22 = java.util.Collections.reverseOrder();
    java.util.Comparator var23 = java.util.Collections.reverseOrder(var22);
    java.util.Comparator var24 = java.util.Collections.reverseOrder(var23);
    java.lang.Object var25 = java.util.Collections.min((java.util.Collection)var21, var24);
    java.util.Comparator var26 = java.util.Collections.reverseOrder(var24);
    java.util.Collections.sort((java.util.List)var16, var24);
    java.lang.String var28 = var16.toString();
    java.util.Collections.shuffle((java.util.List)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + (byte)1+ "'", var25.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"+ "'", var28.equals("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"));

  }

  public void test72() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    java.util.Enumeration var2 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.util.List var4 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var5 = new java.util.TreeSet((java.util.Collection)var4);
    java.util.Iterator var6 = var5.iterator();
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var13 = java.util.Collections.lastIndexOfSubList(var9, var12);
    java.lang.Object[] var14 = new java.lang.Object[] { var9};
    java.lang.Object[] var15 = var5.toArray(var14);
    java.util.Comparator var17 = java.util.Collections.reverseOrder();
    java.util.TreeSet var18 = new java.util.TreeSet(var17);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var25 = java.util.Collections.lastIndexOfSubList(var21, var24);
    boolean var26 = var18.removeAll((java.util.Collection)var21);
    java.util.NavigableSet var27 = var5.tailSet((java.lang.Object)10.0d, var26);
    java.util.List var29 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.Collection)var29);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.SortedSet)var30);
    java.lang.Object var32 = var30.pollLast();
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var39 = java.util.Collections.lastIndexOfSubList(var35, var38);
    boolean var40 = var30.removeAll((java.util.Collection)var35);
    java.util.List var43 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var44 = new java.util.TreeSet((java.util.Collection)var43);
    java.lang.Object[] var45 = var44.toArray();
    java.util.NavigableSet var48 = var44.headSet((java.lang.Object)10L, true);
    var44.clear();
    java.util.Map var50 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var44);
    java.lang.Object[] var51 = var44.toArray();
    java.util.List var53 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var54 = new java.util.TreeSet((java.util.Collection)var53);
    java.lang.Object[] var55 = var54.toArray();
    java.util.NavigableSet var58 = var54.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var59 = var54.descendingSet();
    boolean var60 = var44.add((java.lang.Object)var59);
    java.util.SortedSet var62 = var44.tailSet((java.lang.Object)"");
    java.util.SortedSet var63 = var30.headSet((java.lang.Object)"");
    java.util.TreeSet var64 = new java.util.TreeSet(var63);
    boolean var65 = var5.removeAll((java.util.Collection)var63);
    java.lang.Object var66 = var5.first();
    java.lang.Object var67 = var1.higher((java.lang.Object)var5);
    java.util.SortedSet var68 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + (byte)1+ "'", var32.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + (byte)1+ "'", var66.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);

  }

  public void test73() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.util.NavigableSet var10 = var3.descendingSet();
    java.lang.Object var11 = var3.pollFirst();
    java.lang.Object[] var12 = var3.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);

  }

  public void test74() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.util.Comparator var10 = java.util.Collections.reverseOrder();
    java.util.TreeSet var11 = new java.util.TreeSet(var10);
    java.util.List var14 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var17 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var18 = java.util.Collections.lastIndexOfSubList(var14, var17);
    java.util.Comparator var19 = java.util.Collections.reverseOrder();
    java.util.Comparator var20 = java.util.Collections.reverseOrder(var19);
    java.lang.Object var21 = java.util.Collections.min((java.util.Collection)var14, var19);
    int var22 = java.util.Collections.frequency((java.util.Collection)var11, (java.lang.Object)var19);
    boolean var23 = var3.equals((java.lang.Object)var22);
    java.util.SortedSet var24 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var3);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    java.lang.Object var28 = var27.clone();
    java.lang.Object var29 = var27.pollFirst();
    java.util.Set var30 = java.util.Collections.synchronizedSet((java.util.Set)var27);
    java.util.List var31 = java.util.Collections.singletonList((java.lang.Object)var27);
    boolean var32 = var3.add((java.lang.Object)var31);
    
    // Checks the contract:  var24.equals(var24)
    assertTrue("Contract failed: var24.equals(var24)", var24.equals(var24));

  }

  public void test75() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    boolean var9 = var1.removeAll((java.util.Collection)var4);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var13 = java.util.Collections.max((java.util.Collection)var12);
    java.util.Collection var14 = java.util.Collections.unmodifiableCollection((java.util.Collection)var12);
    boolean var15 = var1.retainAll(var14);
    java.util.List var17 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    java.lang.Object var19 = var18.clone();
    java.lang.Object var20 = var18.pollFirst();
    java.util.Set var21 = java.util.Collections.synchronizedSet((java.util.Set)var18);
    java.util.List var23 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var24 = new java.util.TreeSet((java.util.Collection)var23);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.SortedSet)var24);
    java.util.SortedSet var26 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var25);
    java.lang.Object var27 = var25.clone();
    java.util.Map var28 = java.util.Collections.singletonMap((java.lang.Object)var18, (java.lang.Object)var25);
    java.util.Set var29 = java.util.Collections.emptySet();
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.Collection)var29);
    java.util.NavigableSet var31 = var30.descendingSet();
    java.util.Iterator var32 = var30.descendingIterator();
    java.util.List var33 = java.util.Collections.singletonList((java.lang.Object)var30);
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.lang.Object[] var35 = var18.toArray(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.SortedSet var36 = var1.tailSet((java.lang.Object)var35);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 0+ "'", var13.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + (byte)1+ "'", var20.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);

  }

  public void test76() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var10 = java.util.Collections.indexOfSubList(var2, var9);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 0);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var20, 0);
    java.util.Collections.rotate(var13, 0);
    java.util.Enumeration var26 = java.util.Collections.enumeration((java.util.Collection)var13);
    java.util.Collection var27 = java.util.Collections.synchronizedCollection((java.util.Collection)var13);
    int var28 = java.util.Collections.indexOfSubList(var2, var13);
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.lang.Object[] var32 = var31.toArray();
    java.util.NavigableSet var35 = var31.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var36 = var31.descendingSet();
    java.util.Collection var37 = java.util.Collections.synchronizedCollection((java.util.Collection)var31);
    boolean var39 = var31.add((java.lang.Object)(byte)100);
    java.util.List var41 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var42 = new java.util.TreeSet((java.util.Collection)var41);
    java.lang.Object[] var43 = var42.toArray();
    java.util.NavigableSet var44 = var42.descendingSet();
    java.lang.Object[] var45 = var42.toArray();
    boolean var46 = var31.equals((java.lang.Object)var42);
    java.util.List var48 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var49 = new java.util.TreeSet((java.util.Collection)var48);
    java.util.TreeSet var50 = new java.util.TreeSet((java.util.SortedSet)var49);
    java.lang.Object var51 = var49.pollLast();
    java.util.List var54 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var57 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var58 = java.util.Collections.lastIndexOfSubList(var54, var57);
    boolean var59 = var49.removeAll((java.util.Collection)var54);
    java.util.Set var60 = java.util.Collections.emptySet();
    java.util.TreeSet var61 = new java.util.TreeSet((java.util.Collection)var60);
    java.util.Enumeration var62 = java.util.Collections.enumeration((java.util.Collection)var61);
    java.lang.Object var64 = var61.lower((java.lang.Object)(short)(-1));
    java.lang.Object var65 = var49.floor((java.lang.Object)var61);
    boolean var66 = java.util.Collections.replaceAll(var13, (java.lang.Object)var46, (java.lang.Object)var61);
    java.util.TreeSet var67 = new java.util.TreeSet((java.util.SortedSet)var61);
    java.util.Set var68 = java.util.Collections.emptySet();
    java.util.TreeSet var69 = new java.util.TreeSet((java.util.Collection)var68);
    java.util.Enumeration var70 = java.util.Collections.enumeration((java.util.Collection)var69);
    boolean var71 = java.util.Collections.disjoint((java.util.Collection)var67, (java.util.Collection)var69);
    java.lang.Object[] var73 = new java.lang.Object[] { (short)1};
    java.lang.Object[] var74 = var69.toArray(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + (byte)1+ "'", var51.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);

  }

  public void test77() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.String var5 = var2.toString();
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.lang.Object var9 = var8.clone();
    java.util.Iterator var10 = var8.iterator();
    java.util.Collection var11 = java.util.Collections.unmodifiableCollection((java.util.Collection)var8);
    java.lang.Object var12 = var8.pollLast();
    boolean var13 = var2.containsAll((java.util.Collection)var8);
    java.util.NavigableSet var14 = var2.descendingSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[1]"+ "'", var5.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + (byte)1+ "'", var12.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);

  }

  public void test78() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.Iterator var4 = var2.iterator();
    java.util.Collection var5 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.lang.Object[] var10 = var9.toArray();
    java.util.NavigableSet var13 = var9.headSet((java.lang.Object)10L, true);
    var9.clear();
    java.util.Map var15 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var9);
    java.util.NavigableSet var16 = var9.descendingSet();
    java.lang.Object var17 = var9.pollFirst();
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.SortedSet)var20);
    java.util.SortedSet var22 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var21);
    java.lang.Object var23 = var9.higher((java.lang.Object)var21);
    boolean var24 = var2.removeAll((java.util.Collection)var21);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    boolean var28 = var21.removeAll((java.util.Collection)var27);
    java.lang.String var29 = var27.toString();
    java.util.List var30 = java.util.Collections.emptyList();
    java.util.Set var31 = java.util.Collections.emptySet();
    java.util.TreeSet var32 = new java.util.TreeSet((java.util.Collection)var31);
    java.util.NavigableSet var33 = var32.descendingSet();
    int var34 = java.util.Collections.binarySearch(var30, (java.lang.Object)var32);
    java.util.List var37 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var37, 100);
    java.util.Collections.rotate(var30, 100);
    java.util.List var43 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var46 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var47 = java.util.Collections.lastIndexOfSubList(var43, var46);
    java.lang.Object var48 = java.util.Collections.min((java.util.Collection)var43);
    java.util.List var51 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var51, 100);
    int var54 = java.util.Collections.indexOfSubList(var43, var51);
    java.util.Collections.rotate(var30, var54);
    java.util.List var58 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var59 = new java.util.TreeSet((java.util.Collection)var58);
    java.lang.Object[] var60 = var59.toArray();
    java.util.NavigableSet var63 = var59.headSet((java.lang.Object)10L, true);
    var59.clear();
    java.util.Map var65 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var59);
    java.lang.Object var67 = var59.lower((java.lang.Object)'#');
    java.util.Iterator var68 = var59.descendingIterator();
    boolean var70 = var59.contains((java.lang.Object)'4');
    boolean var72 = var59.remove((java.lang.Object)1);
    java.util.NavigableSet var73 = var27.headSet((java.lang.Object)var54, var72);
    java.util.Iterator var74 = var27.descendingIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[1]"+ "'", var29.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + 0+ "'", var48.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);

  }

  public void test79() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.util.NavigableSet var10 = var9.descendingSet();
    boolean var11 = var2.retainAll((java.util.Collection)var10);
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)var2);
    java.lang.Object var13 = var2.pollFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + (byte)1+ "'", var13.equals((byte)1));

  }

  public void test80() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    var1.clear();
    java.util.Comparator var3 = java.util.Collections.reverseOrder();
    java.util.TreeSet var4 = new java.util.TreeSet(var3);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Comparator var12 = java.util.Collections.reverseOrder();
    java.util.Comparator var13 = java.util.Collections.reverseOrder(var12);
    java.lang.Object var14 = java.util.Collections.min((java.util.Collection)var7, var12);
    int var15 = java.util.Collections.frequency((java.util.Collection)var4, (java.lang.Object)var12);
    java.util.Map var16 = java.util.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)var4);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var22 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var19, 0);
    java.util.List var26 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var29 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var26, 0);
    java.util.List var33 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var33, 0);
    java.util.Collections.rotate(var26, 0);
    java.util.Collections.rotate(var19, 0);
    java.util.SortedSet var40 = var1.headSet((java.lang.Object)0);
    java.lang.Object[] var41 = var1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 0+ "'", var14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);

  }

  public void test81() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    java.util.Comparator var9 = java.util.Collections.reverseOrder();
    java.util.Comparator var10 = java.util.Collections.reverseOrder(var9);
    java.lang.Object var11 = java.util.Collections.min((java.util.Collection)var4, var9);
    int var12 = java.util.Collections.frequency((java.util.Collection)var1, (java.lang.Object)var9);
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.SortedSet)var15);
    java.util.SortedSet var17 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var16);
    java.lang.Object var18 = var16.clone();
    java.util.Iterator var19 = var16.descendingIterator();
    java.lang.Object var20 = java.util.Collections.max((java.util.Collection)var16);
    java.lang.Object var21 = var1.lower(var20);
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.util.ArrayList var23 = java.util.Collections.list(var22);
    java.util.ArrayList var24 = java.util.Collections.list(var22);
    java.util.ArrayList var25 = java.util.Collections.list(var22);
    java.util.ArrayList var26 = java.util.Collections.list(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 0+ "'", var11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + (byte)1+ "'", var20.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);

  }

  public void test82() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java.util.Iterator var6 = var3.descendingIterator();
    java.lang.Object var7 = java.util.Collections.max((java.util.Collection)var3);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.util.TreeSet var11 = new java.util.TreeSet((java.util.SortedSet)var10);
    java.util.SortedSet var12 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var11);
    java.util.Comparator var13 = java.util.Collections.reverseOrder();
    java.util.Comparator var14 = java.util.Collections.reverseOrder(var13);
    java.util.Comparator var15 = java.util.Collections.reverseOrder(var14);
    java.lang.Object var16 = java.util.Collections.min((java.util.Collection)var12, var15);
    boolean var17 = var3.add(var16);
    java.util.List var20 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.lang.Object[] var22 = var21.toArray();
    java.util.NavigableSet var25 = var21.headSet((java.lang.Object)10L, true);
    var21.clear();
    java.util.Map var27 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var21);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.Comparator var29 = java.util.Collections.reverseOrder();
    java.util.Map var30 = java.util.Collections.singletonMap((java.lang.Object)var28, (java.lang.Object)var29);
    boolean var31 = var3.equals((java.lang.Object)var28);
    java.util.NavigableSet var32 = var3.descendingSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + (byte)1+ "'", var16.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);

  }

  public void test83() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object var11 = var3.lower((java.lang.Object)'#');
    java.util.List var12 = java.util.Collections.emptyList();
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.NavigableSet var15 = var14.descendingSet();
    int var16 = java.util.Collections.binarySearch(var12, (java.lang.Object)var14);
    java.util.List var18 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var18);
    boolean var20 = java.util.Collections.disjoint((java.util.Collection)var12, (java.util.Collection)var18);
    java.lang.Object var21 = var3.higher((java.lang.Object)var20);
    var3.clear();
    java.lang.Object var23 = var3.pollFirst();
    java.lang.Object var24 = var3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);

  }

  public void test84() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var10 = java.util.Collections.indexOfSubList(var2, var9);
    java.util.List var11 = java.util.Collections.emptyList();
    java.util.Set var12 = java.util.Collections.emptySet();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.NavigableSet var14 = var13.descendingSet();
    int var15 = java.util.Collections.binarySearch(var11, (java.lang.Object)var13);
    java.util.List var17 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    boolean var19 = java.util.Collections.disjoint((java.util.Collection)var11, (java.util.Collection)var17);
    java.util.Set var20 = java.util.Collections.singleton((java.lang.Object)var11);
    int var21 = java.util.Collections.indexOfSubList(var2, var11);
    java.util.List var22 = java.util.Collections.emptyList();
    java.util.Set var23 = java.util.Collections.emptySet();
    java.util.TreeSet var24 = new java.util.TreeSet((java.util.Collection)var23);
    java.util.NavigableSet var25 = var24.descendingSet();
    int var26 = java.util.Collections.binarySearch(var22, (java.lang.Object)var24);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var28);
    boolean var30 = java.util.Collections.disjoint((java.util.Collection)var22, (java.util.Collection)var28);
    java.util.Set var31 = java.util.Collections.singleton((java.lang.Object)var22);
    java.util.Collections.reverse(var22);
    java.util.List var33 = java.util.Collections.emptyList();
    java.util.Set var34 = java.util.Collections.emptySet();
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.Collection)var34);
    java.util.NavigableSet var36 = var35.descendingSet();
    int var37 = java.util.Collections.binarySearch(var33, (java.lang.Object)var35);
    java.util.List var39 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var40 = new java.util.TreeSet((java.util.Collection)var39);
    boolean var41 = java.util.Collections.disjoint((java.util.Collection)var33, (java.util.Collection)var39);
    java.util.Set var42 = java.util.Collections.singleton((java.lang.Object)var33);
    java.util.Collections.reverse(var33);
    int var44 = java.util.Collections.indexOfSubList(var22, var33);
    java.util.List var46 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var47 = new java.util.TreeSet((java.util.Collection)var46);
    java.util.TreeSet var48 = new java.util.TreeSet((java.util.SortedSet)var47);
    java.lang.Object[] var49 = var47.toArray();
    int var50 = java.util.Collections.binarySearch(var22, (java.lang.Object)var49);
    java.util.Collections.copy(var2, var22);
    java.util.List var52 = java.util.Collections.synchronizedList(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.shuffle(var52);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);

  }

  public void test85() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.Collections.rotate(var2, 0);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.ArrayList var16 = java.util.Collections.list(var15);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var19, 100);
    java.util.Set var22 = java.util.Collections.emptySet();
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.Collection)var22);
    java.util.Enumeration var24 = java.util.Collections.enumeration((java.util.Collection)var23);
    java.util.List var25 = java.util.Collections.nCopies(100, (java.lang.Object)var24);
    java.util.ArrayList var26 = java.util.Collections.list(var24);
    java.util.ArrayList var27 = java.util.Collections.list(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var28 = java.util.Collections.binarySearch((java.util.List)var16, (java.lang.Object)var24);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);

  }

  public void test86() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.List var15 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.Collection)var15);
    java.lang.Object[] var17 = var16.toArray();
    java.util.NavigableSet var20 = var16.headSet((java.lang.Object)10L, true);
    var16.clear();
    java.util.Map var22 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var16);
    java.lang.Object[] var23 = var16.toArray();
    java.util.List var25 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.Collection)var25);
    java.lang.Object[] var27 = var26.toArray();
    java.util.NavigableSet var30 = var26.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var31 = var26.descendingSet();
    boolean var32 = var16.add((java.lang.Object)var31);
    java.util.SortedSet var34 = var16.tailSet((java.lang.Object)"");
    java.util.SortedSet var35 = var2.headSet((java.lang.Object)"");
    java.util.Collection var36 = java.util.Collections.synchronizedCollection((java.util.Collection)var2);
    java.util.List var39 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var42 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var43 = java.util.Collections.lastIndexOfSubList(var39, var42);
    java.util.List var46 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var49 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var46, 0);
    java.util.List var53 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var56 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var53, 0);
    java.util.Collections.rotate(var46, 0);
    java.util.Enumeration var59 = java.util.Collections.enumeration((java.util.Collection)var46);
    java.util.Collection var60 = java.util.Collections.synchronizedCollection((java.util.Collection)var46);
    int var61 = java.util.Collections.indexOfSubList(var42, var46);
    boolean var62 = var2.containsAll((java.util.Collection)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test87() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object[] var4 = var2.toArray();
    java.util.Set var5 = java.util.Collections.synchronizedSet((java.util.Set)var2);
    java.util.List var8 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var8, 100);
    java.util.Comparator var11 = java.util.Collections.reverseOrder();
    java.util.TreeSet var12 = new java.util.TreeSet(var11);
    java.util.Comparator var13 = java.util.Collections.reverseOrder(var11);
    java.util.Comparator var14 = java.util.Collections.reverseOrder(var13);
    java.lang.Object var15 = java.util.Collections.min((java.util.Collection)var8, var13);
    java.util.TreeSet var16 = new java.util.TreeSet(var13);
    java.lang.Object[] var17 = var16.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var18 = var2.ceiling((java.lang.Object)var17);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 0+ "'", var15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);

  }

  public void test88() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var10 = java.util.Collections.indexOfSubList(var2, var9);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var17 = java.util.Collections.lastIndexOfSubList(var13, var16);
    int var18 = java.util.Collections.indexOfSubList(var2, var16);
    java.util.Map var21 = java.util.Collections.singletonMap((java.lang.Object)(byte)0, (java.lang.Object)'4');
    java.util.Map var22 = java.util.Collections.unmodifiableMap(var21);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var25, 0);
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var32, 0);
    java.util.Collections.rotate(var25, 0);
    java.util.Enumeration var38 = java.util.Collections.enumeration((java.util.Collection)var25);
    java.util.ArrayList var39 = java.util.Collections.list(var38);
    boolean var40 = java.util.Collections.replaceAll(var2, (java.lang.Object)var21, (java.lang.Object)var38);
    java.util.List var42 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var43 = new java.util.TreeSet((java.util.Collection)var42);
    java.lang.Object var44 = var43.clone();
    java.util.Set var45 = java.util.Collections.unmodifiableSet((java.util.Set)var43);
    java.lang.Object var46 = var43.pollLast();
    int var47 = var43.size();
    java.util.Collections.rotate(var2, var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + (byte)1+ "'", var46.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);

  }

  public void test89() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.SortedSet)var9);
    java.util.SortedSet var11 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var10);
    java.lang.Object var12 = var10.clone();
    java.util.Iterator var13 = var10.descendingIterator();
    java.lang.Object var14 = java.util.Collections.max((java.util.Collection)var10);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var10);
    java.util.List var16 = java.util.Collections.nCopies(var6, (java.lang.Object)var10);
    java.util.Iterator var17 = var10.descendingIterator();
    java.lang.Object var18 = var10.pollFirst();
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var10);
    java.util.Iterator var20 = var19.iterator();
    java.util.Set var22 = java.util.Collections.singleton((java.lang.Object)0);
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.lang.Object[] var24 = var19.toArray(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + (byte)1+ "'", var14.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + (byte)1+ "'", var18.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);

  }

  public void test90() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.util.List var10 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.Collection var11 = java.util.Collections.unmodifiableCollection((java.util.Collection)var10);
    java.util.Collection var12 = java.util.Collections.synchronizedCollection((java.util.Collection)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);

  }

  public void test91() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)var2);
    var2.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)(byte)0, (java.lang.Object)'4');
    java.util.List var10 = java.util.Collections.singletonList((java.lang.Object)'4');
    java.util.Set var11 = java.util.Collections.singleton((java.lang.Object)var10);
    boolean var12 = var2.removeAll((java.util.Collection)var10);
    java.util.List var15 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var19 = java.util.Collections.lastIndexOfSubList(var15, var18);
    java.util.Comparator var20 = java.util.Collections.reverseOrder();
    java.util.Comparator var21 = java.util.Collections.reverseOrder(var20);
    java.lang.Object var22 = java.util.Collections.min((java.util.Collection)var15, var20);
    boolean var23 = var2.retainAll((java.util.Collection)var15);
    java.lang.Object var24 = var2.pollFirst();
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + 0+ "'", var22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);

  }

  public void test92() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var16, 0);
    java.util.Collections.rotate(var9, 0);
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var9);
    java.util.Collection var23 = java.util.Collections.synchronizedCollection((java.util.Collection)var9);
    int var24 = java.util.Collections.indexOfSubList(var5, var9);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    int var27 = java.util.Collections.lastIndexOfSubList(var5, var26);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)var5);
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.lang.Object var32 = var31.clone();
    java.util.List var34 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.Collection)var34);
    java.lang.Object[] var36 = var35.toArray();
    java.util.NavigableSet var37 = var35.descendingSet();
    java.util.List var40 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var43 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var44 = java.util.Collections.lastIndexOfSubList(var40, var43);
    java.util.Enumeration var45 = java.util.Collections.enumeration((java.util.Collection)var43);
    java.util.ArrayList var46 = java.util.Collections.list(var45);
    java.util.List var49 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var52 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var53 = java.util.Collections.lastIndexOfSubList(var49, var52);
    java.util.List var56 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var57 = java.util.Collections.indexOfSubList(var49, var56);
    java.util.List var60 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var63 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var60, 0);
    java.util.List var67 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var70 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var67, 0);
    java.util.Collections.rotate(var60, 0);
    java.util.Enumeration var73 = java.util.Collections.enumeration((java.util.Collection)var60);
    java.util.Collection var74 = java.util.Collections.synchronizedCollection((java.util.Collection)var60);
    int var75 = java.util.Collections.indexOfSubList(var49, var60);
    int var76 = java.util.Collections.lastIndexOfSubList((java.util.List)var46, var60);
    boolean var77 = var35.retainAll((java.util.Collection)var60);
    boolean var78 = var31.removeAll((java.util.Collection)var35);
    int var79 = java.util.Collections.frequency((java.util.Collection)var5, (java.lang.Object)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);

  }

  public void test93() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.SortedSet)var13);
    java.util.SortedSet var15 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var14);
    java.lang.Object var16 = var14.clone();
    java.util.Iterator var17 = var14.descendingIterator();
    java.lang.Object var18 = java.util.Collections.max((java.util.Collection)var14);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var14);
    java.util.List var20 = java.util.Collections.nCopies(var10, (java.lang.Object)var14);
    boolean var21 = var2.containsAll((java.util.Collection)var14);
    java.util.Collection var22 = java.util.Collections.synchronizedCollection((java.util.Collection)var2);
    java.util.List var24 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.SortedSet)var25);
    java.util.SortedSet var27 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var26);
    java.lang.Object var28 = var26.clone();
    java.util.Iterator var29 = var26.descendingIterator();
    java.lang.Object var30 = java.util.Collections.max((java.util.Collection)var26);
    java.lang.Object var31 = var26.pollLast();
    java.lang.Object var32 = var2.floor(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + (byte)1+ "'", var18.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + (byte)1+ "'", var30.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + (byte)1+ "'", var31.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + (byte)1+ "'", var32.equals((byte)1));

  }

  public void test94() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var7 = var2.descendingSet();
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var11 = java.util.Collections.max((java.util.Collection)var10);
    java.util.List var13 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.lang.Object[] var15 = var14.toArray();
    java.util.NavigableSet var18 = var14.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var19 = var2.tailSet(var11, true);
    java.util.Set var20 = java.util.Collections.unmodifiableSet((java.util.Set)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 0+ "'", var11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);

  }

  public void test95() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.util.List var10 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 0);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var20, 0);
    java.util.Collections.rotate(var13, 0);
    java.util.Enumeration var26 = java.util.Collections.enumeration((java.util.Collection)var13);
    java.util.ArrayList var27 = java.util.Collections.list(var26);
    java.util.Collections.swap((java.util.List)var27, 1, 0);
    java.util.Collections.shuffle((java.util.List)var27);
    java.util.List var34 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.Collection)var34);
    java.lang.Object[] var36 = var35.toArray();
    java.util.NavigableSet var39 = var35.headSet((java.lang.Object)10L, true);
    var35.clear();
    java.util.Map var41 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var35);
    java.lang.Object[] var42 = var35.toArray();
    java.util.List var44 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.lang.Object[] var46 = var45.toArray();
    java.util.NavigableSet var49 = var45.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var50 = var45.descendingSet();
    boolean var51 = var35.add((java.lang.Object)var50);
    boolean var52 = var27.containsAll((java.util.Collection)var50);
    java.util.Collection var53 = java.util.Collections.unmodifiableCollection((java.util.Collection)var27);
    int var54 = java.util.Collections.lastIndexOfSubList(var10, (java.util.List)var27);
    java.util.List var57 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var60 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var61 = java.util.Collections.lastIndexOfSubList(var57, var60);
    java.util.List var64 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var67 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var64, 0);
    java.util.List var71 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var74 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var71, 0);
    java.util.Collections.rotate(var64, 0);
    java.util.Enumeration var77 = java.util.Collections.enumeration((java.util.Collection)var64);
    java.util.Collection var78 = java.util.Collections.synchronizedCollection((java.util.Collection)var64);
    int var79 = java.util.Collections.indexOfSubList(var60, var64);
    boolean var80 = var27.containsAll((java.util.Collection)var60);
    java.util.List var81 = java.util.Collections.synchronizedList(var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.shuffle(var60);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);

  }

  public void test96() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.Collections.rotate(var2, 0);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.List var16 = java.util.Collections.synchronizedList(var2);
    java.util.List var18 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var18);
    java.lang.Object[] var20 = var19.toArray();
    java.util.NavigableSet var23 = var19.headSet((java.lang.Object)10L, true);
    int var24 = var19.size();
    java.lang.Object var25 = var19.clone();
    java.util.Comparator var26 = var19.comparator();
    java.util.Enumeration var27 = java.util.Collections.enumeration((java.util.Collection)var19);
    java.util.ArrayList var28 = java.util.Collections.list(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.copy(var2, (java.util.List)var28);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);

  }

  public void test97() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.lang.Object var4 = var2.pollFirst();
    java.util.Set var5 = java.util.Collections.synchronizedSet((java.util.Set)var2);
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.util.List var11 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var14 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var15 = java.util.Collections.lastIndexOfSubList(var11, var14);
    java.util.Comparator var16 = java.util.Collections.reverseOrder();
    java.util.Comparator var17 = java.util.Collections.reverseOrder(var16);
    java.lang.Object var18 = java.util.Collections.min((java.util.Collection)var11, var16);
    java.lang.Object var19 = java.util.Collections.max((java.util.Collection)var8, var16);
    boolean var20 = var8.isEmpty();
    boolean var21 = var2.addAll((java.util.Collection)var8);
    java.util.NavigableSet var22 = var8.descendingSet();
    java.util.Set var23 = java.util.Collections.synchronizedSet((java.util.Set)var8);
    java.util.Set var24 = java.util.Collections.emptySet();
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    var25.clear();
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var28);
    java.lang.Object[] var30 = var29.toArray();
    java.util.NavigableSet var33 = var29.headSet((java.lang.Object)10L, true);
    java.lang.Object var34 = var25.lower((java.lang.Object)var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var35 = var8.lower((java.lang.Object)var25);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + 0+ "'", var18.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + (byte)1+ "'", var19.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test98() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)var3);
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.SortedSet)var8);
    java.lang.Object var10 = var8.pollLast();
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)var8);
    int var12 = java.util.Collections.lastIndexOfSubList(var5, var11);
    java.util.List var13 = java.util.Collections.unmodifiableList(var5);
    java.util.List var15 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.Collection)var15);
    java.util.Iterator var17 = var16.iterator();
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var24 = java.util.Collections.lastIndexOfSubList(var20, var23);
    java.lang.Object[] var25 = new java.lang.Object[] { var20};
    java.lang.Object[] var26 = var16.toArray(var25);
    java.lang.Object var27 = var16.pollLast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.fill(var13, (java.lang.Object)var16);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + (byte)1+ "'", var10.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (byte)1+ "'", var27.equals((byte)1));

  }

  public void test99() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.String var5 = var2.toString();
    java.util.List var6 = java.util.Collections.emptyList();
    java.util.Set var7 = java.util.Collections.emptySet();
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.util.NavigableSet var9 = var8.descendingSet();
    int var10 = java.util.Collections.binarySearch(var6, (java.lang.Object)var8);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 100);
    java.util.Collections.rotate(var6, 100);
    boolean var17 = var2.addAll((java.util.Collection)var6);
    java.util.Set var18 = java.util.Collections.emptySet();
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var18);
    java.util.NavigableSet var20 = var19.descendingSet();
    int var21 = var19.size();
    java.util.List var22 = java.util.Collections.emptyList();
    java.util.Set var23 = java.util.Collections.emptySet();
    java.util.TreeSet var24 = new java.util.TreeSet((java.util.Collection)var23);
    java.util.NavigableSet var25 = var24.descendingSet();
    int var26 = java.util.Collections.binarySearch(var22, (java.lang.Object)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.swap(var6, var21, var26);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[1]"+ "'", var5.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));

  }

  public void test100() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var14);
    boolean var16 = var2.removeAll((java.util.Collection)var14);
    boolean var17 = var2.isEmpty();
    java.util.Comparator var18 = var2.comparator();
    java.util.Set var19 = java.util.Collections.synchronizedSet((java.util.Set)var2);
    java.util.Enumeration var20 = java.util.Collections.enumeration((java.util.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);

  }

  public void test101() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.lang.Object[] var7 = var2.toArray();
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var14 = java.util.Collections.lastIndexOfSubList(var10, var13);
    java.lang.Object var15 = java.util.Collections.min((java.util.Collection)var10);
    boolean var16 = var2.removeAll((java.util.Collection)var10);
    java.lang.Object[] var17 = var2.toArray();
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.lang.Object[] var21 = var20.toArray();
    java.util.NavigableSet var24 = var20.headSet((java.lang.Object)10L, true);
    var20.clear();
    java.util.List var28 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    java.util.List var29 = java.util.Collections.unmodifiableList(var28);
    boolean var30 = java.util.Collections.disjoint((java.util.Collection)var20, (java.util.Collection)var29);
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.lang.Object[] var32 = var2.toArray(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 0+ "'", var15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);

  }

  public void test102() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder();
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.TreeSet var10 = new java.util.TreeSet(var7);
    java.lang.String var11 = var10.toString();
    java.util.Comparator var12 = var10.comparator();
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.SortedSet)var15);
    java.lang.Object var17 = var15.pollLast();
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var24 = java.util.Collections.lastIndexOfSubList(var20, var23);
    boolean var25 = var15.removeAll((java.util.Collection)var20);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var28);
    java.lang.Object[] var30 = var29.toArray();
    java.util.NavigableSet var33 = var29.headSet((java.lang.Object)10L, true);
    var29.clear();
    java.util.Map var35 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var29);
    java.lang.Object[] var36 = var29.toArray();
    java.util.List var38 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var39 = new java.util.TreeSet((java.util.Collection)var38);
    java.lang.Object[] var40 = var39.toArray();
    java.util.NavigableSet var43 = var39.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var44 = var39.descendingSet();
    boolean var45 = var29.add((java.lang.Object)var44);
    java.util.SortedSet var47 = var29.tailSet((java.lang.Object)"");
    java.util.SortedSet var48 = var15.headSet((java.lang.Object)"");
    java.util.TreeSet var49 = new java.util.TreeSet(var48);
    java.util.List var51 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var52 = new java.util.TreeSet((java.util.Collection)var51);
    java.lang.Object[] var53 = var52.toArray();
    java.util.NavigableSet var56 = var52.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var57 = var52.descendingSet();
    java.util.List var60 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var61 = java.util.Collections.max((java.util.Collection)var60);
    java.util.List var63 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var64 = new java.util.TreeSet((java.util.Collection)var63);
    java.lang.Object[] var65 = var64.toArray();
    java.util.NavigableSet var68 = var64.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var69 = var52.tailSet(var61, true);
    java.lang.Object var70 = var49.lower(var61);
    java.lang.Object var71 = var10.floor((java.lang.Object)var49);
    java.util.TreeSet var72 = new java.util.TreeSet((java.util.Collection)var49);
    java.lang.String var73 = var72.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var74 = var72.last();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + (byte)1+ "'", var17.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + 0+ "'", var61.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "[]"+ "'", var73.equals("[]"));

  }

  public void test103() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var3 = java.util.Collections.singletonList((java.lang.Object)10);
    java.util.Collections.reverse(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test104() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var7 = var2.descendingSet();
    java.util.Collection var8 = java.util.Collections.synchronizedCollection((java.util.Collection)var2);
    java.util.SortedSet var9 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var2);
    java.util.SortedSet var10 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);

  }

  public void test105() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var7 = var2.descendingSet();
    java.lang.String var8 = var2.toString();
    java.lang.Object var9 = var2.pollLast();
    java.util.Set var10 = java.util.Collections.synchronizedSet((java.util.Set)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[1]"+ "'", var8.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (byte)1+ "'", var9.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);

  }

  public void test106() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    java.lang.Object[] var8 = var7.toArray();
    java.util.NavigableSet var11 = var7.headSet((java.lang.Object)10L, true);
    var7.clear();
    java.util.Map var13 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var7);
    java.util.Map var14 = java.util.Collections.synchronizedMap(var13);
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.lang.Object[] var16 = var2.toArray(var15);
    java.util.List var18 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var18);
    java.lang.Object[] var20 = var19.toArray();
    java.util.NavigableSet var23 = var19.headSet((java.lang.Object)10L, true);
    java.util.List var25 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.Collection)var25);
    java.util.NavigableSet var27 = var26.descendingSet();
    boolean var28 = var19.retainAll((java.util.Collection)var27);
    java.util.Comparator var29 = java.util.Collections.reverseOrder();
    java.util.TreeSet var30 = new java.util.TreeSet(var29);
    java.util.List var33 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var37 = java.util.Collections.lastIndexOfSubList(var33, var36);
    boolean var38 = var30.removeAll((java.util.Collection)var33);
    java.util.Iterator var39 = var30.iterator();
    boolean var40 = var19.removeAll((java.util.Collection)var30);
    java.util.Comparator var41 = java.util.Collections.reverseOrder();
    java.util.TreeSet var42 = new java.util.TreeSet(var41);
    java.util.List var45 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var48 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var49 = java.util.Collections.lastIndexOfSubList(var45, var48);
    java.util.Comparator var50 = java.util.Collections.reverseOrder();
    java.util.Comparator var51 = java.util.Collections.reverseOrder(var50);
    java.lang.Object var52 = java.util.Collections.min((java.util.Collection)var45, var50);
    int var53 = java.util.Collections.frequency((java.util.Collection)var42, (java.lang.Object)var50);
    java.util.List var55 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var56 = new java.util.TreeSet((java.util.Collection)var55);
    java.util.TreeSet var57 = new java.util.TreeSet((java.util.SortedSet)var56);
    java.util.SortedSet var58 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var57);
    java.lang.Object var59 = var57.clone();
    java.util.Iterator var60 = var57.descendingIterator();
    java.lang.Object var61 = java.util.Collections.max((java.util.Collection)var57);
    java.lang.Object var62 = var42.lower(var61);
    boolean var63 = var30.equals((java.lang.Object)var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var64 = var2.higher((java.lang.Object)var42);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + 0+ "'", var52.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + (byte)1+ "'", var61.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test107() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var16, 0);
    java.util.Collections.rotate(var9, 0);
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var9);
    java.util.Collection var23 = java.util.Collections.synchronizedCollection((java.util.Collection)var9);
    int var24 = java.util.Collections.indexOfSubList(var5, var9);
    java.util.List var25 = java.util.Collections.emptyList();
    java.util.Set var26 = java.util.Collections.emptySet();
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    java.util.NavigableSet var28 = var27.descendingSet();
    int var29 = java.util.Collections.binarySearch(var25, (java.lang.Object)var27);
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var32, 100);
    java.util.Collections.rotate(var25, 100);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var42 = java.util.Collections.lastIndexOfSubList(var38, var41);
    java.lang.Object var43 = java.util.Collections.min((java.util.Collection)var38);
    java.util.List var46 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var46, 100);
    int var49 = java.util.Collections.indexOfSubList(var38, var46);
    java.util.Collections.rotate(var25, var49);
    java.util.Collections.rotate(var5, var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 0+ "'", var43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);

  }

  public void test108() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    boolean var8 = java.util.Collections.disjoint((java.util.Collection)var0, (java.util.Collection)var6);
    java.util.Set var9 = java.util.Collections.singleton((java.lang.Object)var0);
    java.util.Collections.reverse(var0);
    java.util.List var11 = java.util.Collections.emptyList();
    java.util.Set var12 = java.util.Collections.emptySet();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.NavigableSet var14 = var13.descendingSet();
    int var15 = java.util.Collections.binarySearch(var11, (java.lang.Object)var13);
    java.util.List var17 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    boolean var19 = java.util.Collections.disjoint((java.util.Collection)var11, (java.util.Collection)var17);
    java.util.Set var20 = java.util.Collections.singleton((java.lang.Object)var11);
    java.util.Collections.reverse(var11);
    int var22 = java.util.Collections.indexOfSubList(var0, var11);
    java.util.Enumeration var23 = java.util.Collections.enumeration((java.util.Collection)var11);
    java.util.Collections.<java.lang.Comparable>sort(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);

  }

  public void test109() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    java.util.Enumeration var2 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.util.List var4 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var5 = new java.util.TreeSet((java.util.Collection)var4);
    java.util.Iterator var6 = var5.iterator();
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var13 = java.util.Collections.lastIndexOfSubList(var9, var12);
    java.lang.Object[] var14 = new java.lang.Object[] { var9};
    java.lang.Object[] var15 = var5.toArray(var14);
    java.util.Comparator var17 = java.util.Collections.reverseOrder();
    java.util.TreeSet var18 = new java.util.TreeSet(var17);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var25 = java.util.Collections.lastIndexOfSubList(var21, var24);
    boolean var26 = var18.removeAll((java.util.Collection)var21);
    java.util.NavigableSet var27 = var5.tailSet((java.lang.Object)10.0d, var26);
    java.util.List var29 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.Collection)var29);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.SortedSet)var30);
    java.lang.Object var32 = var30.pollLast();
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var39 = java.util.Collections.lastIndexOfSubList(var35, var38);
    boolean var40 = var30.removeAll((java.util.Collection)var35);
    java.util.List var43 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var44 = new java.util.TreeSet((java.util.Collection)var43);
    java.lang.Object[] var45 = var44.toArray();
    java.util.NavigableSet var48 = var44.headSet((java.lang.Object)10L, true);
    var44.clear();
    java.util.Map var50 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var44);
    java.lang.Object[] var51 = var44.toArray();
    java.util.List var53 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var54 = new java.util.TreeSet((java.util.Collection)var53);
    java.lang.Object[] var55 = var54.toArray();
    java.util.NavigableSet var58 = var54.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var59 = var54.descendingSet();
    boolean var60 = var44.add((java.lang.Object)var59);
    java.util.SortedSet var62 = var44.tailSet((java.lang.Object)"");
    java.util.SortedSet var63 = var30.headSet((java.lang.Object)"");
    java.util.TreeSet var64 = new java.util.TreeSet(var63);
    boolean var65 = var5.removeAll((java.util.Collection)var63);
    java.lang.Object var66 = var5.first();
    java.lang.Object var67 = var1.higher((java.lang.Object)var5);
    java.lang.String var68 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + (byte)1+ "'", var32.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + (byte)1+ "'", var66.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[1]"+ "'", var68.equals("[1]"));

  }

  public void test110() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Enumeration var7 = java.util.Collections.enumeration((java.util.Collection)var5);
    java.util.ArrayList var8 = java.util.Collections.list(var7);
    java.util.List var11 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var14 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var15 = java.util.Collections.lastIndexOfSubList(var11, var14);
    java.util.List var18 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var19 = java.util.Collections.indexOfSubList(var11, var18);
    java.util.List var22 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var22, 0);
    java.util.List var29 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var29, 0);
    java.util.Collections.rotate(var22, 0);
    java.util.Enumeration var35 = java.util.Collections.enumeration((java.util.Collection)var22);
    java.util.Collection var36 = java.util.Collections.synchronizedCollection((java.util.Collection)var22);
    int var37 = java.util.Collections.indexOfSubList(var11, var22);
    int var38 = java.util.Collections.lastIndexOfSubList((java.util.List)var8, var22);
    java.util.List var40 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var41 = new java.util.TreeSet((java.util.Collection)var40);
    java.lang.Object[] var42 = var41.toArray();
    java.util.NavigableSet var45 = var41.headSet((java.lang.Object)10L, true);
    java.util.List var47 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var48 = new java.util.TreeSet((java.util.Collection)var47);
    java.util.NavigableSet var49 = var48.descendingSet();
    boolean var50 = var41.retainAll((java.util.Collection)var49);
    var41.clear();
    java.lang.Object var52 = var41.clone();
    java.util.Map var53 = java.util.Collections.singletonMap((java.lang.Object)var8, var52);
    java.util.Map var54 = java.util.Collections.synchronizedMap(var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var55 = java.util.Collections.newSetFromMap(var54);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);

  }

  public void test111() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    boolean var8 = java.util.Collections.disjoint((java.util.Collection)var0, (java.util.Collection)var6);
    java.util.Set var9 = java.util.Collections.singleton((java.lang.Object)var0);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.lang.Object[] var13 = var12.toArray();
    java.util.NavigableSet var16 = var12.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var17 = var12.descendingSet();
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.SortedSet)var12);
    int var19 = java.util.Collections.frequency((java.util.Collection)var0, (java.lang.Object)var18);
    java.util.Set var21 = java.util.Collections.singleton((java.lang.Object)10L);
    boolean var22 = var18.retainAll((java.util.Collection)var21);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.SortedSet)var18);
    java.util.Iterator var24 = var18.iterator();
    java.lang.Object[] var25 = var18.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);

  }

  public void test112() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.Iterator var4 = var2.iterator();
    java.util.Collection var5 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.lang.Object var6 = var2.pollFirst();
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.lang.Object[] var11 = var10.toArray();
    java.util.NavigableSet var14 = var10.headSet((java.lang.Object)10L, true);
    var10.clear();
    java.util.Map var16 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var10);
    java.util.Comparator var17 = java.util.Collections.reverseOrder();
    java.util.TreeSet var18 = new java.util.TreeSet(var17);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var25 = java.util.Collections.lastIndexOfSubList(var21, var24);
    java.util.Comparator var26 = java.util.Collections.reverseOrder();
    java.util.Comparator var27 = java.util.Collections.reverseOrder(var26);
    java.lang.Object var28 = java.util.Collections.min((java.util.Collection)var21, var26);
    int var29 = java.util.Collections.frequency((java.util.Collection)var18, (java.lang.Object)var26);
    boolean var30 = var10.equals((java.lang.Object)var29);
    boolean var31 = var10.isEmpty();
    java.util.Comparator var32 = java.util.Collections.reverseOrder();
    java.util.TreeSet var33 = new java.util.TreeSet(var32);
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var39 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var40 = java.util.Collections.lastIndexOfSubList(var36, var39);
    java.util.Comparator var41 = java.util.Collections.reverseOrder();
    java.util.Comparator var42 = java.util.Collections.reverseOrder(var41);
    java.lang.Object var43 = java.util.Collections.min((java.util.Collection)var36, var41);
    int var44 = java.util.Collections.frequency((java.util.Collection)var33, (java.lang.Object)var41);
    java.util.List var46 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var47 = new java.util.TreeSet((java.util.Collection)var46);
    java.util.TreeSet var48 = new java.util.TreeSet((java.util.SortedSet)var47);
    java.util.SortedSet var49 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var48);
    java.lang.Object var50 = var48.clone();
    java.util.Iterator var51 = var48.descendingIterator();
    java.lang.Object var52 = java.util.Collections.max((java.util.Collection)var48);
    java.lang.Object var53 = var33.lower(var52);
    java.util.Enumeration var54 = java.util.Collections.enumeration((java.util.Collection)var33);
    java.util.List var57 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var60 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var61 = java.util.Collections.lastIndexOfSubList(var57, var60);
    java.util.Comparator var62 = java.util.Collections.reverseOrder();
    java.util.Comparator var63 = java.util.Collections.reverseOrder(var62);
    java.lang.Object var64 = java.util.Collections.min((java.util.Collection)var57, var62);
    java.util.List var66 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var67 = new java.util.TreeSet((java.util.Collection)var66);
    java.util.TreeSet var68 = new java.util.TreeSet((java.util.SortedSet)var67);
    java.lang.Object var69 = var67.pollLast();
    java.util.List var70 = java.util.Collections.singletonList((java.lang.Object)var67);
    var67.clear();
    int var72 = java.util.Collections.frequency((java.util.Collection)var57, (java.lang.Object)var67);
    java.lang.Object var73 = var67.pollLast();
    java.lang.Object var74 = var67.clone();
    boolean var75 = var33.retainAll((java.util.Collection)var67);
    java.util.NavigableSet var76 = var2.headSet((java.lang.Object)var31, var75);
    java.util.List var78 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var79 = new java.util.TreeSet((java.util.Collection)var78);
    java.lang.Object[] var80 = var79.toArray();
    java.util.NavigableSet var83 = var79.headSet((java.lang.Object)10L, true);
    int var84 = var79.size();
    java.util.List var86 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var87 = new java.util.TreeSet((java.util.Collection)var86);
    java.lang.Object[] var88 = var87.toArray();
    java.util.NavigableSet var91 = var87.headSet((java.lang.Object)10L, true);
    int var92 = var87.size();
    java.util.List var93 = java.util.Collections.nCopies(var84, (java.lang.Object)var92);
    java.util.Collection var94 = java.util.Collections.synchronizedCollection((java.util.Collection)var93);
    java.util.TreeSet var95 = new java.util.TreeSet();
    java.lang.Object var96 = var95.clone();
    java.lang.Object var97 = var95.pollFirst();
    java.util.Map var98 = java.util.Collections.singletonMap((java.lang.Object)var94, (java.lang.Object)var95);
    int var99 = java.util.Collections.frequency((java.util.Collection)var2, (java.lang.Object)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + (byte)1+ "'", var6.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + 0+ "'", var28.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 0+ "'", var43.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + (byte)1+ "'", var52.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + 0+ "'", var64.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + (byte)1+ "'", var69.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var98 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == 0);

  }

  public void test113() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    java.util.List var3 = java.util.Collections.unmodifiableList(var2);
    java.util.Collection var4 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.util.Enumeration var5 = java.util.Collections.enumeration(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test114() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.Iterator var4 = var2.iterator();
    java.util.Collection var5 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.util.List var8 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var11 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var8, 0);
    java.util.List var15 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var15, 0);
    java.util.Collections.rotate(var8, 0);
    java.util.Enumeration var21 = java.util.Collections.enumeration((java.util.Collection)var8);
    java.util.ArrayList var22 = java.util.Collections.list(var21);
    java.lang.Object var23 = java.util.Collections.min((java.util.Collection)var22);
    java.lang.Object[] var24 = new java.lang.Object[] { var22};
    java.lang.Object[] var25 = var2.toArray(var24);
    java.util.List var27 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.Collection)var27);
    java.lang.Object[] var29 = var28.toArray();
    java.util.NavigableSet var32 = var28.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var33 = var28.descendingSet();
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var37 = java.util.Collections.max((java.util.Collection)var36);
    java.util.List var39 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var40 = new java.util.TreeSet((java.util.Collection)var39);
    java.lang.Object[] var41 = var40.toArray();
    java.util.NavigableSet var44 = var40.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var45 = var28.tailSet(var37, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var46 = var2.lower(var37);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + 0+ "'", var23.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 0+ "'", var37.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);

  }

  public void test115() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    java.util.Enumeration var2 = java.util.Collections.enumeration((java.util.Collection)var1);
    boolean var3 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test116() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Enumeration var12 = java.util.Collections.enumeration((java.util.Collection)var10);
    java.util.ArrayList var13 = java.util.Collections.list(var12);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var20 = java.util.Collections.lastIndexOfSubList(var16, var19);
    java.util.List var23 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var24 = java.util.Collections.indexOfSubList(var16, var23);
    java.util.List var27 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var30 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var27, 0);
    java.util.List var34 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var37 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var34, 0);
    java.util.Collections.rotate(var27, 0);
    java.util.Enumeration var40 = java.util.Collections.enumeration((java.util.Collection)var27);
    java.util.Collection var41 = java.util.Collections.synchronizedCollection((java.util.Collection)var27);
    int var42 = java.util.Collections.indexOfSubList(var16, var27);
    int var43 = java.util.Collections.lastIndexOfSubList((java.util.List)var13, var27);
    boolean var44 = var2.retainAll((java.util.Collection)var27);
    java.util.List var47 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var50 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var51 = java.util.Collections.lastIndexOfSubList(var47, var50);
    java.util.List var53 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var54 = new java.util.TreeSet((java.util.Collection)var53);
    java.util.TreeSet var55 = new java.util.TreeSet((java.util.SortedSet)var54);
    java.util.SortedSet var56 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var55);
    java.lang.Object var57 = var55.clone();
    java.util.Iterator var58 = var55.descendingIterator();
    java.lang.Object var59 = java.util.Collections.max((java.util.Collection)var55);
    java.util.TreeSet var60 = new java.util.TreeSet((java.util.Collection)var55);
    java.util.List var61 = java.util.Collections.nCopies(var51, (java.lang.Object)var55);
    java.util.Iterator var62 = var55.descendingIterator();
    java.lang.Object var63 = var55.pollFirst();
    java.util.TreeSet var64 = new java.util.TreeSet((java.util.Collection)var55);
    java.util.Iterator var65 = var64.iterator();
    java.util.List var68 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var71 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var68, 0);
    java.util.List var75 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var78 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var75, 0);
    java.util.Collections.rotate(var68, 0);
    java.util.Enumeration var81 = java.util.Collections.enumeration((java.util.Collection)var68);
    java.util.List var82 = java.util.Collections.synchronizedList(var68);
    java.lang.Object var83 = var64.ceiling((java.lang.Object)var82);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.fill(var27, (java.lang.Object)var64);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + (byte)1+ "'", var59.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + (byte)1+ "'", var63.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);

  }

  public void test117() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.SortedSet var7 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var2);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.util.TreeSet var11 = new java.util.TreeSet((java.util.SortedSet)var10);
    java.lang.Object var12 = var10.pollLast();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var10);
    java.util.NavigableSet var14 = var10.descendingSet();
    boolean var15 = var2.removeAll((java.util.Collection)var14);
    java.util.List var17 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.SortedSet)var18);
    java.lang.Object var20 = var18.pollLast();
    java.util.Set var22 = java.util.Collections.singleton((java.lang.Object)10L);
    boolean var23 = var18.removeAll((java.util.Collection)var22);
    boolean var24 = var2.addAll((java.util.Collection)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + (byte)1+ "'", var12.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + (byte)1+ "'", var20.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test118() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.SortedSet var13 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var2);
    int var14 = var2.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test119() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var6 = new java.util.TreeSet((java.util.Collection)var5);
    java.lang.Object[] var7 = var6.toArray();
    java.util.NavigableSet var8 = var6.descendingSet();
    java.util.List var10 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var11 = new java.util.TreeSet((java.util.Collection)var10);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.SortedSet)var11);
    java.lang.Object var13 = var11.pollLast();
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var20 = java.util.Collections.lastIndexOfSubList(var16, var19);
    boolean var21 = var11.removeAll((java.util.Collection)var16);
    java.util.List var24 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.lang.Object[] var26 = var25.toArray();
    java.util.NavigableSet var29 = var25.headSet((java.lang.Object)10L, true);
    var25.clear();
    java.util.Map var31 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var25);
    java.lang.Object[] var32 = var25.toArray();
    java.util.List var34 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.Collection)var34);
    java.lang.Object[] var36 = var35.toArray();
    java.util.NavigableSet var39 = var35.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var40 = var35.descendingSet();
    boolean var41 = var25.add((java.lang.Object)var40);
    java.util.SortedSet var43 = var25.tailSet((java.lang.Object)"");
    java.util.SortedSet var44 = var11.headSet((java.lang.Object)"");
    java.util.SortedSet var45 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var11);
    boolean var46 = var6.addAll((java.util.Collection)var45);
    boolean var47 = var2.equals((java.lang.Object)var46);
    java.util.Collection var48 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.lang.String var49 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + (byte)1+ "'", var13.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[1]"+ "'", var49.equals("[1]"));

  }

  public void test120() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    java.util.Enumeration var2 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.lang.Object var4 = var1.lower((java.lang.Object)(short)(-1));
    java.util.NavigableSet var5 = var1.descendingSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test121() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder();
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.TreeSet var10 = new java.util.TreeSet(var7);
    java.lang.String var11 = var10.toString();
    java.util.Comparator var12 = var10.comparator();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.SortedSet)var10);
    boolean var14 = var10.isEmpty();
    java.util.List var17 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var21 = java.util.Collections.lastIndexOfSubList(var17, var20);
    java.lang.Object var22 = java.util.Collections.min((java.util.Collection)var17);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var25, 100);
    int var28 = java.util.Collections.indexOfSubList(var17, var25);
    java.util.Set var29 = java.util.Collections.singleton((java.lang.Object)var28);
    java.util.Collection var30 = java.util.Collections.synchronizedCollection((java.util.Collection)var29);
    boolean var31 = var10.contains((java.lang.Object)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + 0+ "'", var22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test122() throws Throwable {

    java.util.Map var0 = java.util.Collections.emptyMap();
    java.util.Map var1 = java.util.Collections.unmodifiableMap(var0);
    java.util.Set var2 = java.util.Collections.newSetFromMap(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test123() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var7 = var2.descendingSet();
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var11 = java.util.Collections.max((java.util.Collection)var10);
    java.util.List var13 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.lang.Object[] var15 = var14.toArray();
    java.util.NavigableSet var18 = var14.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var19 = var2.tailSet(var11, true);
    java.util.SortedSet var20 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var2);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var27 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var28 = java.util.Collections.lastIndexOfSubList(var24, var27);
    java.util.Enumeration var29 = java.util.Collections.enumeration((java.util.Collection)var27);
    java.util.ArrayList var30 = java.util.Collections.list(var29);
    java.util.List var33 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var37 = java.util.Collections.lastIndexOfSubList(var33, var36);
    java.util.List var40 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var41 = java.util.Collections.indexOfSubList(var33, var40);
    java.util.List var44 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var47 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var44, 0);
    java.util.List var51 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var54 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var51, 0);
    java.util.Collections.rotate(var44, 0);
    java.util.Enumeration var57 = java.util.Collections.enumeration((java.util.Collection)var44);
    java.util.Collection var58 = java.util.Collections.synchronizedCollection((java.util.Collection)var44);
    int var59 = java.util.Collections.indexOfSubList(var33, var44);
    int var60 = java.util.Collections.lastIndexOfSubList((java.util.List)var30, var44);
    int var61 = java.util.Collections.frequency((java.util.Collection)var2, (java.lang.Object)var30);
    int var62 = var2.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 0+ "'", var11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);

  }

  public void test124() throws Throwable {

    java.util.TreeSet var0 = new java.util.TreeSet();
    java.lang.Object var2 = var0.floor((java.lang.Object)true);
    var0.clear();
    java.util.Iterator var4 = var0.descendingIterator();
    java.util.Iterator var5 = var0.descendingIterator();
    java.util.Set var6 = java.util.Collections.unmodifiableSet((java.util.Set)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test125() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var16, 0);
    java.util.Collections.rotate(var9, 0);
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var9);
    java.util.Collection var23 = java.util.Collections.synchronizedCollection((java.util.Collection)var9);
    int var24 = java.util.Collections.indexOfSubList(var5, var9);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    int var27 = java.util.Collections.lastIndexOfSubList(var5, var26);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)var5);
    java.util.Collection var29 = java.util.Collections.unmodifiableCollection((java.util.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);

  }

  public void test126() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var16, 0);
    java.util.Collections.rotate(var9, 0);
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var9);
    java.util.ArrayList var23 = java.util.Collections.list(var22);
    java.util.Collections.swap((java.util.List)var23, 1, 0);
    java.util.Collections.reverse((java.util.List)var23);
    int var28 = java.util.Collections.indexOfSubList(var2, (java.util.List)var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.shuffle(var2);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test127() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var3 = java.util.Collections.max((java.util.Collection)var2);
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var7 = java.util.Collections.unmodifiableList(var5);
    java.util.Collection var8 = java.util.Collections.unmodifiableCollection((java.util.Collection)var5);
    java.util.List var11 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var14 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var11, 0);
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var18, 0);
    java.util.Collections.rotate(var11, 0);
    java.util.Enumeration var24 = java.util.Collections.enumeration((java.util.Collection)var11);
    java.util.ArrayList var25 = java.util.Collections.list(var24);
    java.util.Collections.swap((java.util.List)var25, 1, 0);
    java.util.Collections.shuffle((java.util.List)var25);
    java.util.List var32 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var33 = new java.util.TreeSet((java.util.Collection)var32);
    java.lang.Object[] var34 = var33.toArray();
    java.util.NavigableSet var37 = var33.headSet((java.lang.Object)10L, true);
    var33.clear();
    java.util.Map var39 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var33);
    java.lang.Object[] var40 = var33.toArray();
    java.util.List var42 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var43 = new java.util.TreeSet((java.util.Collection)var42);
    java.lang.Object[] var44 = var43.toArray();
    java.util.NavigableSet var47 = var43.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var48 = var43.descendingSet();
    boolean var49 = var33.add((java.lang.Object)var48);
    boolean var50 = var25.containsAll((java.util.Collection)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var51 = java.util.Collections.binarySearch(var5, (java.lang.Object)var25);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 0+ "'", var3.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test128() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    int var7 = var2.size();
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.lang.Object[] var11 = var10.toArray();
    java.util.NavigableSet var14 = var10.headSet((java.lang.Object)10L, true);
    int var15 = var10.size();
    java.util.List var16 = java.util.Collections.nCopies(var7, (java.lang.Object)var15);
    java.util.Collection var17 = java.util.Collections.synchronizedCollection((java.util.Collection)var16);
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.lang.Object[] var21 = var20.toArray();
    java.util.NavigableSet var22 = var20.descendingSet();
    java.lang.String var23 = var20.toString();
    java.util.List var24 = java.util.Collections.emptyList();
    java.util.Set var25 = java.util.Collections.emptySet();
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.Collection)var25);
    java.util.NavigableSet var27 = var26.descendingSet();
    int var28 = java.util.Collections.binarySearch(var24, (java.lang.Object)var26);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var31, 100);
    java.util.Collections.rotate(var24, 100);
    boolean var35 = var20.addAll((java.util.Collection)var24);
    java.util.List var38 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var39 = new java.util.TreeSet((java.util.Collection)var38);
    java.lang.Object[] var40 = var39.toArray();
    java.util.NavigableSet var43 = var39.headSet((java.lang.Object)10L, true);
    var39.clear();
    java.util.Map var45 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var39);
    java.util.List var46 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    int var47 = java.util.Collections.binarySearch(var24, (java.lang.Object)10.0d);
    java.util.Collections.rotate(var16, var47);
    java.util.List var50 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var51 = new java.util.TreeSet((java.util.Collection)var50);
    java.util.Iterator var52 = var51.iterator();
    java.util.Collection var53 = java.util.Collections.unmodifiableCollection((java.util.Collection)var51);
    java.util.SortedSet var54 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var51);
    java.util.List var55 = java.util.Collections.emptyList();
    java.util.Set var56 = java.util.Collections.emptySet();
    java.util.TreeSet var57 = new java.util.TreeSet((java.util.Collection)var56);
    java.util.NavigableSet var58 = var57.descendingSet();
    int var59 = java.util.Collections.binarySearch(var55, (java.lang.Object)var57);
    java.util.List var61 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var62 = new java.util.TreeSet((java.util.Collection)var61);
    boolean var63 = java.util.Collections.disjoint((java.util.Collection)var55, (java.util.Collection)var61);
    java.util.Set var64 = java.util.Collections.singleton((java.lang.Object)var55);
    java.util.Collections.reverse(var55);
    java.util.List var67 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var68 = new java.util.TreeSet((java.util.Collection)var67);
    java.lang.Object var69 = var68.clone();
    java.lang.Object var70 = var68.pollFirst();
    java.util.List var73 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var74 = new java.util.TreeSet((java.util.Collection)var73);
    java.lang.Object[] var75 = var74.toArray();
    java.util.NavigableSet var78 = var74.headSet((java.lang.Object)10L, true);
    var74.clear();
    java.util.Map var80 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var74);
    java.util.Map var81 = java.util.Collections.synchronizedMap(var80);
    java.util.Map var82 = java.util.Collections.synchronizedMap(var80);
    java.util.Map var83 = java.util.Collections.synchronizedMap(var80);
    java.lang.Object var84 = var68.lower((java.lang.Object)var80);
    java.util.List var87 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var90 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var91 = java.util.Collections.lastIndexOfSubList(var87, var90);
    java.util.Comparator var92 = java.util.Collections.reverseOrder();
    java.util.Comparator var93 = java.util.Collections.reverseOrder(var92);
    java.lang.Object var94 = java.util.Collections.min((java.util.Collection)var87, var92);
    java.util.TreeSet var95 = new java.util.TreeSet(var92);
    java.lang.String var96 = var95.toString();
    java.util.Comparator var97 = var95.comparator();
    int var98 = java.util.Collections.binarySearch(var55, (java.lang.Object)var68, var97);
    boolean var99 = java.util.Collections.replaceAll(var16, (java.lang.Object)var51, (java.lang.Object)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[1]"+ "'", var23.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + (byte)1+ "'", var70.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + 0+ "'", var94.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "[]"+ "'", var96.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var97 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test129() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.SortedSet)var7);
    java.lang.Object var9 = var7.pollLast();
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var15 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var16 = java.util.Collections.lastIndexOfSubList(var12, var15);
    boolean var17 = var7.removeAll((java.util.Collection)var12);
    java.util.List var20 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.lang.Object[] var22 = var21.toArray();
    java.util.NavigableSet var25 = var21.headSet((java.lang.Object)10L, true);
    var21.clear();
    java.util.Map var27 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var21);
    java.lang.Object[] var28 = var21.toArray();
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.lang.Object[] var32 = var31.toArray();
    java.util.NavigableSet var35 = var31.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var36 = var31.descendingSet();
    boolean var37 = var21.add((java.lang.Object)var36);
    java.util.SortedSet var39 = var21.tailSet((java.lang.Object)"");
    java.util.SortedSet var40 = var7.headSet((java.lang.Object)"");
    java.util.SortedSet var41 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var7);
    boolean var42 = var2.addAll((java.util.Collection)var41);
    java.lang.Object var43 = var2.pollFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (byte)1+ "'", var9.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + (byte)1+ "'", var43.equals((byte)1));

  }

  public void test130() throws Throwable {

    java.util.TreeSet var0 = new java.util.TreeSet();
    java.lang.Object var2 = var0.floor((java.lang.Object)true);
    var0.clear();
    java.util.TreeSet var4 = new java.util.TreeSet((java.util.Collection)var0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.lang.Object[] var13 = var0.toArray(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);

  }

  public void test131() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.NavigableSet var4 = var3.descendingSet();
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.lang.Object[] var9 = var8.toArray();
    java.util.NavigableSet var12 = var8.headSet((java.lang.Object)10L, true);
    var8.clear();
    java.util.Map var14 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var8);
    java.util.List var15 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var18, 0);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var25, 0);
    java.util.Collections.rotate(var18, 0);
    java.util.Enumeration var31 = java.util.Collections.enumeration((java.util.Collection)var18);
    java.util.ArrayList var32 = java.util.Collections.list(var31);
    java.util.Collections.swap((java.util.List)var32, 1, 0);
    java.util.Collections.shuffle((java.util.List)var32);
    java.util.List var39 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var40 = new java.util.TreeSet((java.util.Collection)var39);
    java.lang.Object[] var41 = var40.toArray();
    java.util.NavigableSet var44 = var40.headSet((java.lang.Object)10L, true);
    var40.clear();
    java.util.Map var46 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var40);
    java.lang.Object[] var47 = var40.toArray();
    java.util.List var49 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var50 = new java.util.TreeSet((java.util.Collection)var49);
    java.lang.Object[] var51 = var50.toArray();
    java.util.NavigableSet var54 = var50.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var55 = var50.descendingSet();
    boolean var56 = var40.add((java.lang.Object)var55);
    boolean var57 = var32.containsAll((java.util.Collection)var55);
    java.util.Collection var58 = java.util.Collections.unmodifiableCollection((java.util.Collection)var32);
    int var59 = java.util.Collections.lastIndexOfSubList(var15, (java.util.List)var32);
    java.util.List var62 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var65 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var66 = java.util.Collections.lastIndexOfSubList(var62, var65);
    java.util.List var69 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var72 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var69, 0);
    java.util.List var76 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var79 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var76, 0);
    java.util.Collections.rotate(var69, 0);
    java.util.Enumeration var82 = java.util.Collections.enumeration((java.util.Collection)var69);
    java.util.Collection var83 = java.util.Collections.synchronizedCollection((java.util.Collection)var69);
    int var84 = java.util.Collections.indexOfSubList(var65, var69);
    boolean var85 = var32.containsAll((java.util.Collection)var65);
    boolean var86 = var3.equals((java.lang.Object)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test132() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var16, 0);
    java.util.Collections.rotate(var9, 0);
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var9);
    java.util.Collection var23 = java.util.Collections.synchronizedCollection((java.util.Collection)var9);
    int var24 = java.util.Collections.indexOfSubList(var5, var9);
    java.util.Collection var25 = java.util.Collections.synchronizedCollection((java.util.Collection)var5);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var32 = java.util.Collections.lastIndexOfSubList(var28, var31);
    java.util.List var34 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.Collection)var34);
    java.util.TreeSet var36 = new java.util.TreeSet((java.util.SortedSet)var35);
    java.util.SortedSet var37 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var36);
    java.lang.Object var38 = var36.clone();
    java.util.Iterator var39 = var36.descendingIterator();
    java.lang.Object var40 = java.util.Collections.max((java.util.Collection)var36);
    java.util.TreeSet var41 = new java.util.TreeSet((java.util.Collection)var36);
    java.util.List var42 = java.util.Collections.nCopies(var32, (java.lang.Object)var36);
    java.util.Collections.shuffle(var42);
    java.util.TreeSet var44 = new java.util.TreeSet();
    java.lang.Object var46 = var44.floor((java.lang.Object)true);
    java.util.List var49 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var52 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var53 = java.util.Collections.lastIndexOfSubList(var49, var52);
    java.util.Enumeration var54 = java.util.Collections.enumeration((java.util.Collection)var52);
    java.util.ArrayList var55 = java.util.Collections.list(var54);
    java.util.Comparator var56 = java.util.Collections.reverseOrder();
    java.util.TreeSet var57 = new java.util.TreeSet(var56);
    java.util.Comparator var58 = java.util.Collections.reverseOrder(var56);
    java.lang.Object var59 = java.util.Collections.max((java.util.Collection)var55, var58);
    java.util.List var61 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var62 = new java.util.TreeSet((java.util.Collection)var61);
    java.lang.Object[] var63 = var62.toArray();
    java.util.NavigableSet var66 = var62.headSet((java.lang.Object)10L, true);
    int var67 = var62.size();
    java.util.List var70 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var73 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var74 = java.util.Collections.lastIndexOfSubList(var70, var73);
    java.util.Collections.swap((java.util.List)var55, var67, var74);
    java.util.List var78 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var81 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var82 = java.util.Collections.lastIndexOfSubList(var78, var81);
    java.util.Comparator var83 = java.util.Collections.reverseOrder();
    java.util.Comparator var84 = java.util.Collections.reverseOrder(var83);
    java.lang.Object var85 = java.util.Collections.min((java.util.Collection)var78, var83);
    java.util.TreeSet var86 = new java.util.TreeSet(var83);
    java.lang.String var87 = var86.toString();
    java.util.Comparator var88 = var86.comparator();
    java.util.Collections.sort((java.util.List)var55, var88);
    int var90 = java.util.Collections.binarySearch(var42, (java.lang.Object)true, var88);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var91 = java.util.Collections.binarySearch(var5, (java.lang.Object)var88);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + (byte)1+ "'", var40.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + 0+ "'", var59.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + 0+ "'", var85.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "[]"+ "'", var87.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == (-1));

  }

  public void test133() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object var11 = var3.lower((java.lang.Object)'#');
    java.util.Iterator var12 = var3.descendingIterator();
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    var14.clear();
    java.util.Comparator var16 = java.util.Collections.reverseOrder();
    java.util.TreeSet var17 = new java.util.TreeSet(var16);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var24 = java.util.Collections.lastIndexOfSubList(var20, var23);
    java.util.Comparator var25 = java.util.Collections.reverseOrder();
    java.util.Comparator var26 = java.util.Collections.reverseOrder(var25);
    java.lang.Object var27 = java.util.Collections.min((java.util.Collection)var20, var25);
    int var28 = java.util.Collections.frequency((java.util.Collection)var17, (java.lang.Object)var25);
    java.util.Map var29 = java.util.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var17);
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var32, 0);
    java.util.List var39 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var42 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var39, 0);
    java.util.List var46 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var49 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var46, 0);
    java.util.Collections.rotate(var39, 0);
    java.util.Collections.rotate(var32, 0);
    java.util.SortedSet var53 = var14.headSet((java.lang.Object)0);
    boolean var54 = var3.addAll((java.util.Collection)var14);
    java.lang.Object var55 = var3.pollFirst();
    java.util.Set var56 = java.util.Collections.emptySet();
    java.util.TreeSet var57 = new java.util.TreeSet((java.util.Collection)var56);
    java.util.NavigableSet var58 = var57.descendingSet();
    java.util.Iterator var59 = var57.descendingIterator();
    java.util.List var60 = java.util.Collections.singletonList((java.lang.Object)var57);
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.lang.Object[] var62 = var3.toArray(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 0+ "'", var27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);

  }

  public void test134() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.pollLast();
    java.util.Comparator var6 = java.util.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var7 = java.util.Collections.min((java.util.Collection)var3, var6);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + (byte)1+ "'", var5.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test135() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.SortedSet var13 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var2);
    java.lang.Object[] var14 = var2.toArray();
    java.util.List var16 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var17 = new java.util.TreeSet((java.util.Collection)var16);
    java.lang.Object[] var18 = var17.toArray();
    java.util.NavigableSet var19 = var17.descendingSet();
    java.lang.String var20 = var17.toString();
    java.util.Set var21 = java.util.Collections.unmodifiableSet((java.util.Set)var17);
    java.util.List var23 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var24 = new java.util.TreeSet((java.util.Collection)var23);
    java.lang.Object[] var25 = var24.toArray();
    java.util.NavigableSet var28 = var24.headSet((java.lang.Object)10L, true);
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.util.NavigableSet var32 = var31.descendingSet();
    boolean var33 = var24.retainAll((java.util.Collection)var32);
    java.util.Comparator var34 = java.util.Collections.reverseOrder();
    java.util.TreeSet var35 = new java.util.TreeSet(var34);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var42 = java.util.Collections.lastIndexOfSubList(var38, var41);
    boolean var43 = var35.removeAll((java.util.Collection)var38);
    java.util.Iterator var44 = var35.iterator();
    boolean var45 = var24.removeAll((java.util.Collection)var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.NavigableSet var46 = var2.headSet((java.lang.Object)var21, var45);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[1]"+ "'", var20.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test136() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java.util.Iterator var6 = var3.descendingIterator();
    java.lang.Object var7 = java.util.Collections.max((java.util.Collection)var3);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.util.TreeSet var11 = new java.util.TreeSet((java.util.SortedSet)var10);
    java.util.SortedSet var12 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var11);
    java.util.Comparator var13 = java.util.Collections.reverseOrder();
    java.util.Comparator var14 = java.util.Collections.reverseOrder(var13);
    java.util.Comparator var15 = java.util.Collections.reverseOrder(var14);
    java.lang.Object var16 = java.util.Collections.min((java.util.Collection)var12, var15);
    boolean var17 = var3.add(var16);
    java.util.List var20 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.lang.Object[] var22 = var21.toArray();
    java.util.NavigableSet var25 = var21.headSet((java.lang.Object)10L, true);
    var21.clear();
    java.util.Map var27 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var21);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.Comparator var29 = java.util.Collections.reverseOrder();
    java.util.Map var30 = java.util.Collections.singletonMap((java.lang.Object)var28, (java.lang.Object)var29);
    boolean var31 = var3.equals((java.lang.Object)var28);
    java.util.TreeSet var32 = new java.util.TreeSet((java.util.Collection)var28);
    java.util.List var34 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.Collection)var34);
    java.lang.Object[] var36 = var35.toArray();
    java.util.NavigableSet var39 = var35.headSet((java.lang.Object)10L, true);
    java.util.SortedSet var40 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var35);
    java.util.List var42 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var43 = new java.util.TreeSet((java.util.Collection)var42);
    java.util.TreeSet var44 = new java.util.TreeSet((java.util.SortedSet)var43);
    java.lang.Object var45 = var43.pollLast();
    java.util.TreeSet var46 = new java.util.TreeSet((java.util.Collection)var43);
    java.util.NavigableSet var47 = var43.descendingSet();
    boolean var48 = var35.removeAll((java.util.Collection)var47);
    java.lang.Object[] var49 = new java.lang.Object[] { var35};
    java.lang.Object[] var50 = var32.toArray(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + (byte)1+ "'", var16.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + (byte)1+ "'", var45.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);

  }

  public void test137() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java.util.Iterator var6 = var3.descendingIterator();
    java.lang.Object var7 = java.util.Collections.max((java.util.Collection)var3);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.util.TreeSet var11 = new java.util.TreeSet((java.util.SortedSet)var10);
    java.util.SortedSet var12 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var11);
    java.util.Comparator var13 = java.util.Collections.reverseOrder();
    java.util.Comparator var14 = java.util.Collections.reverseOrder(var13);
    java.util.Comparator var15 = java.util.Collections.reverseOrder(var14);
    java.lang.Object var16 = java.util.Collections.min((java.util.Collection)var12, var15);
    boolean var17 = var3.add(var16);
    java.util.List var20 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.lang.Object[] var22 = var21.toArray();
    java.util.NavigableSet var25 = var21.headSet((java.lang.Object)10L, true);
    var21.clear();
    java.util.Map var27 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var21);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.Comparator var29 = java.util.Collections.reverseOrder();
    java.util.Map var30 = java.util.Collections.singletonMap((java.lang.Object)var28, (java.lang.Object)var29);
    boolean var31 = var3.equals((java.lang.Object)var28);
    java.util.TreeSet var32 = new java.util.TreeSet((java.util.Collection)var28);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var39 = java.util.Collections.lastIndexOfSubList(var35, var38);
    java.util.Enumeration var40 = java.util.Collections.enumeration((java.util.Collection)var38);
    java.util.List var42 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var43 = new java.util.TreeSet((java.util.Collection)var42);
    java.lang.Object[] var44 = var43.toArray();
    java.util.NavigableSet var45 = var43.descendingSet();
    java.lang.String var46 = var43.toString();
    java.util.List var48 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var49 = new java.util.TreeSet((java.util.Collection)var48);
    java.lang.Object var50 = var49.clone();
    java.util.Iterator var51 = var49.iterator();
    java.util.Collection var52 = java.util.Collections.unmodifiableCollection((java.util.Collection)var49);
    java.lang.Object var53 = var49.pollLast();
    boolean var54 = var43.containsAll((java.util.Collection)var49);
    int var55 = var49.size();
    java.util.Collections.rotate(var38, var55);
    int var57 = java.util.Collections.indexOfSubList(var28, var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + (byte)1+ "'", var16.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[1]"+ "'", var46.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + (byte)1+ "'", var53.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));

  }

  public void test138() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.Collections.rotate(var2, 0);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.ArrayList var16 = java.util.Collections.list(var15);
    java.lang.Object var17 = java.util.Collections.min((java.util.Collection)var16);
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.lang.Object var21 = var20.clone();
    java.lang.Object var22 = var20.pollFirst();
    java.util.SortedSet var23 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var20);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    java.lang.Object[] var28 = var27.toArray();
    java.util.NavigableSet var31 = var27.headSet((java.lang.Object)10L, true);
    var27.clear();
    java.util.Map var33 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var27);
    java.util.NavigableSet var34 = var27.descendingSet();
    java.lang.Object var35 = var27.pollFirst();
    java.util.List var37 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var38 = new java.util.TreeSet((java.util.Collection)var37);
    java.util.TreeSet var39 = new java.util.TreeSet((java.util.SortedSet)var38);
    java.util.SortedSet var40 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var39);
    java.lang.Object var41 = var27.higher((java.lang.Object)var39);
    java.util.Set var42 = java.util.Collections.emptySet();
    java.util.TreeSet var43 = new java.util.TreeSet((java.util.Collection)var42);
    java.util.Enumeration var44 = java.util.Collections.enumeration((java.util.Collection)var43);
    java.lang.Object var46 = var43.lower((java.lang.Object)(short)(-1));
    java.util.SortedSet var48 = var43.headSet((java.lang.Object)'#');
    boolean var49 = var39.addAll((java.util.Collection)var48);
    boolean var50 = var20.containsAll((java.util.Collection)var48);
    java.util.List var53 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var54 = new java.util.TreeSet((java.util.Collection)var53);
    java.lang.Object[] var55 = var54.toArray();
    java.util.NavigableSet var58 = var54.headSet((java.lang.Object)10L, true);
    var54.clear();
    java.util.Map var60 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var54);
    java.lang.Object[] var61 = var54.toArray();
    java.util.List var63 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var64 = new java.util.TreeSet((java.util.Collection)var63);
    java.lang.Object[] var65 = var64.toArray();
    java.util.NavigableSet var68 = var64.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var69 = var64.descendingSet();
    boolean var70 = var54.add((java.lang.Object)var69);
    java.util.Set var71 = java.util.Collections.singleton((java.lang.Object)var54);
    java.util.Iterator var72 = var54.iterator();
    boolean var73 = java.util.Collections.replaceAll((java.util.List)var16, (java.lang.Object)var20, (java.lang.Object)var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + 0+ "'", var17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + (byte)1+ "'", var22.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test139() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var7 = var2.descendingSet();
    java.util.Collection var8 = java.util.Collections.synchronizedCollection((java.util.Collection)var2);
    boolean var10 = var2.add((java.lang.Object)(byte)100);
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java.util.NavigableSet var15 = var13.descendingSet();
    java.lang.Object[] var16 = var13.toArray();
    boolean var17 = var2.equals((java.lang.Object)var13);
    java.util.Enumeration var18 = java.util.Collections.enumeration((java.util.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);

  }

  public void test140() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.lang.Object var4 = var2.pollFirst();
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.lang.Object[] var9 = var8.toArray();
    java.util.NavigableSet var12 = var8.headSet((java.lang.Object)10L, true);
    var8.clear();
    java.util.Map var14 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var8);
    java.util.Map var15 = java.util.Collections.synchronizedMap(var14);
    java.util.Map var16 = java.util.Collections.synchronizedMap(var14);
    java.util.Map var17 = java.util.Collections.synchronizedMap(var14);
    java.lang.Object var18 = var2.lower((java.lang.Object)var14);
    java.util.Map var19 = java.util.Collections.unmodifiableMap(var14);
    java.util.Map var20 = java.util.Collections.synchronizedMap(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);

  }

  public void test141() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    boolean var9 = var1.removeAll((java.util.Collection)var4);
    java.util.List var10 = java.util.Collections.emptyList();
    java.util.Set var11 = java.util.Collections.emptySet();
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.util.NavigableSet var13 = var12.descendingSet();
    int var14 = java.util.Collections.binarySearch(var10, (java.lang.Object)var12);
    java.util.List var16 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var17 = new java.util.TreeSet((java.util.Collection)var16);
    boolean var18 = java.util.Collections.disjoint((java.util.Collection)var10, (java.util.Collection)var16);
    java.util.Set var19 = java.util.Collections.singleton((java.lang.Object)var10);
    java.util.List var21 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.lang.Object[] var23 = var22.toArray();
    java.util.NavigableSet var26 = var22.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var27 = var22.descendingSet();
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.SortedSet)var22);
    int var29 = java.util.Collections.frequency((java.util.Collection)var10, (java.lang.Object)var28);
    java.util.Set var31 = java.util.Collections.singleton((java.lang.Object)10L);
    boolean var32 = var28.retainAll((java.util.Collection)var31);
    java.util.TreeSet var33 = new java.util.TreeSet((java.util.SortedSet)var28);
    boolean var34 = var1.add((java.lang.Object)var28);
    boolean var35 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test142() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    java.util.Enumeration var2 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.util.List var3 = java.util.Collections.emptyList();
    java.util.Set var4 = java.util.Collections.emptySet();
    java.util.TreeSet var5 = new java.util.TreeSet((java.util.Collection)var4);
    java.util.NavigableSet var6 = var5.descendingSet();
    int var7 = java.util.Collections.binarySearch(var3, (java.lang.Object)var5);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    boolean var11 = java.util.Collections.disjoint((java.util.Collection)var3, (java.util.Collection)var9);
    java.util.Set var12 = java.util.Collections.singleton((java.lang.Object)var3);
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.lang.Object[] var16 = var15.toArray();
    java.util.NavigableSet var19 = var15.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var20 = var15.descendingSet();
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.SortedSet)var15);
    int var22 = java.util.Collections.frequency((java.util.Collection)var3, (java.lang.Object)var21);
    java.util.Set var24 = java.util.Collections.singleton((java.lang.Object)10L);
    boolean var25 = var21.retainAll((java.util.Collection)var24);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.SortedSet)var21);
    java.util.Comparator var27 = java.util.Collections.reverseOrder();
    java.util.TreeSet var28 = new java.util.TreeSet(var27);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var34 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var35 = java.util.Collections.lastIndexOfSubList(var31, var34);
    boolean var36 = var28.removeAll((java.util.Collection)var31);
    java.util.List var39 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var40 = java.util.Collections.max((java.util.Collection)var39);
    java.util.Collection var41 = java.util.Collections.unmodifiableCollection((java.util.Collection)var39);
    boolean var42 = var28.retainAll(var41);
    int var43 = var28.size();
    boolean var44 = var26.equals((java.lang.Object)var28);
    int var45 = var26.size();
    java.util.Iterator var46 = var26.descendingIterator();
    java.util.List var48 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var49 = new java.util.TreeSet((java.util.Collection)var48);
    java.lang.Object var50 = var49.clone();
    java.util.Iterator var51 = var49.iterator();
    java.util.Collection var52 = java.util.Collections.unmodifiableCollection((java.util.Collection)var49);
    java.lang.Object var53 = var49.pollLast();
    java.util.Set var54 = java.util.Collections.emptySet();
    java.util.TreeSet var55 = new java.util.TreeSet((java.util.Collection)var54);
    var55.clear();
    boolean var57 = var49.retainAll((java.util.Collection)var55);
    java.util.Collection var58 = java.util.Collections.unmodifiableCollection((java.util.Collection)var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.SortedSet var59 = var1.subSet((java.lang.Object)var46, (java.lang.Object)var58);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 0+ "'", var40.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + (byte)1+ "'", var53.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);

  }

  public void test143() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var14);
    java.lang.Object var17 = var14.lower((java.lang.Object)(short)(-1));
    java.lang.Object var18 = var2.floor((java.lang.Object)var14);
    java.util.NavigableSet var19 = var2.descendingSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var20 = var2.first();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);

  }

  public void test144() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 100);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Enumeration var12 = java.util.Collections.enumeration((java.util.Collection)var10);
    java.util.ArrayList var13 = java.util.Collections.list(var12);
    java.util.Comparator var14 = java.util.Collections.reverseOrder();
    java.util.TreeSet var15 = new java.util.TreeSet(var14);
    java.util.Comparator var16 = java.util.Collections.reverseOrder(var14);
    java.lang.Object var17 = java.util.Collections.max((java.util.Collection)var13, var16);
    java.lang.Object[] var19 = new java.lang.Object[] { (byte)10};
    boolean var20 = java.util.Collections.addAll((java.util.Collection)var13, var19);
    int var21 = java.util.Collections.indexOfSubList(var2, (java.util.List)var13);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var2);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var29 = java.util.Collections.lastIndexOfSubList(var25, var28);
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var32, 0);
    java.util.List var39 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var42 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var39, 0);
    java.util.Collections.rotate(var32, 0);
    java.util.Enumeration var45 = java.util.Collections.enumeration((java.util.Collection)var32);
    java.util.Collection var46 = java.util.Collections.synchronizedCollection((java.util.Collection)var32);
    int var47 = java.util.Collections.indexOfSubList(var28, var32);
    java.util.List var48 = java.util.Collections.synchronizedList(var28);
    int var49 = java.util.Collections.lastIndexOfSubList(var2, var48);
    java.util.List var52 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var55 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var56 = java.util.Collections.lastIndexOfSubList(var52, var55);
    java.lang.Object var57 = java.util.Collections.min((java.util.Collection)var52);
    java.util.List var60 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var60, 100);
    int var63 = java.util.Collections.indexOfSubList(var52, var60);
    java.util.List var64 = java.util.Collections.unmodifiableList(var60);
    boolean var65 = java.util.Collections.disjoint((java.util.Collection)var2, (java.util.Collection)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + 0+ "'", var17.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + 0+ "'", var57.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test145() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.Comparator var5 = java.util.Collections.reverseOrder();
    java.util.Comparator var6 = java.util.Collections.reverseOrder(var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder(var6);
    java.lang.Object var8 = java.util.Collections.min((java.util.Collection)var4, var7);
    java.util.Comparator var9 = java.util.Collections.reverseOrder(var7);
    java.util.Comparator var10 = java.util.Collections.reverseOrder(var7);
    java.util.Comparator var11 = java.util.Collections.reverseOrder(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + (byte)1+ "'", var8.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);

  }

  public void test146() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var7 = var2.descendingSet();
    java.util.Collection var8 = java.util.Collections.synchronizedCollection((java.util.Collection)var2);
    boolean var10 = var2.add((java.lang.Object)(byte)100);
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java.util.NavigableSet var15 = var13.descendingSet();
    java.lang.Object[] var16 = var13.toArray();
    boolean var17 = var2.equals((java.lang.Object)var13);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var24 = java.util.Collections.lastIndexOfSubList(var20, var23);
    java.util.Comparator var25 = java.util.Collections.reverseOrder();
    java.util.Comparator var26 = java.util.Collections.reverseOrder(var25);
    java.lang.Object var27 = java.util.Collections.min((java.util.Collection)var20, var25);
    java.util.TreeSet var28 = new java.util.TreeSet(var25);
    java.lang.String var29 = var28.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.SortedSet var30 = var2.headSet((java.lang.Object)var28);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 0+ "'", var27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));

  }

  public void test147() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object var4 = var3.clone();
    java.lang.Object var5 = var3.pollFirst();
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.lang.Object[] var10 = var9.toArray();
    java.util.NavigableSet var13 = var9.headSet((java.lang.Object)10L, true);
    var9.clear();
    java.util.Map var15 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var9);
    java.util.Map var16 = java.util.Collections.synchronizedMap(var15);
    java.util.Map var17 = java.util.Collections.synchronizedMap(var15);
    java.util.Map var18 = java.util.Collections.synchronizedMap(var15);
    java.lang.Object var19 = var3.lower((java.lang.Object)var15);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var3);
    java.util.List var22 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.Collection)var22);
    java.lang.Object[] var24 = var23.toArray();
    java.util.NavigableSet var25 = var23.descendingSet();
    java.lang.String var26 = var23.toString();
    java.util.List var27 = java.util.Collections.emptyList();
    java.util.Set var28 = java.util.Collections.emptySet();
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var28);
    java.util.NavigableSet var30 = var29.descendingSet();
    int var31 = java.util.Collections.binarySearch(var27, (java.lang.Object)var29);
    java.util.List var34 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var34, 100);
    java.util.Collections.rotate(var27, 100);
    boolean var38 = var23.addAll((java.util.Collection)var27);
    java.util.List var41 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var42 = new java.util.TreeSet((java.util.Collection)var41);
    java.lang.Object[] var43 = var42.toArray();
    java.util.NavigableSet var46 = var42.headSet((java.lang.Object)10L, true);
    var42.clear();
    java.util.Map var48 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var42);
    java.util.List var49 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    int var50 = java.util.Collections.binarySearch(var27, (java.lang.Object)10.0d);
    java.util.List var52 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var53 = new java.util.TreeSet((java.util.Collection)var52);
    java.lang.Object[] var54 = var53.toArray();
    java.util.NavigableSet var57 = var53.headSet((java.lang.Object)10L, true);
    java.lang.Object[] var58 = var53.toArray();
    java.util.List var61 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var64 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var65 = java.util.Collections.lastIndexOfSubList(var61, var64);
    java.lang.Object var66 = java.util.Collections.min((java.util.Collection)var61);
    boolean var67 = var53.removeAll((java.util.Collection)var61);
    java.util.Map var68 = java.util.Collections.singletonMap((java.lang.Object)var27, (java.lang.Object)var53);
    boolean var69 = var3.add((java.lang.Object)var27);
    java.util.TreeSet var70 = new java.util.TreeSet((java.util.SortedSet)var3);
    java.util.List var73 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var76 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var77 = java.util.Collections.lastIndexOfSubList(var73, var76);
    java.util.List var79 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var80 = new java.util.TreeSet((java.util.Collection)var79);
    java.util.TreeSet var81 = new java.util.TreeSet((java.util.SortedSet)var80);
    java.util.SortedSet var82 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var81);
    java.lang.Object var83 = var81.clone();
    java.util.Iterator var84 = var81.descendingIterator();
    java.lang.Object var85 = java.util.Collections.max((java.util.Collection)var81);
    java.util.TreeSet var86 = new java.util.TreeSet((java.util.Collection)var81);
    java.util.List var87 = java.util.Collections.nCopies(var77, (java.lang.Object)var81);
    java.util.Collections.shuffle(var87);
    boolean var89 = java.util.Collections.replaceAll(var0, (java.lang.Object)var70, (java.lang.Object)var87);
    java.util.Map var92 = java.util.Collections.singletonMap((java.lang.Object)(byte)0, (java.lang.Object)'4');
    java.util.Map var93 = java.util.Collections.unmodifiableMap(var92);
    java.util.Collections.fill(var0, (java.lang.Object)var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + (byte)1+ "'", var5.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[1]"+ "'", var26.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + 0+ "'", var66.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + (byte)1+ "'", var85.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);

  }

  public void test148() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.Object[] var5 = var2.toArray();
    boolean var6 = var2.isEmpty();
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.SortedSet)var9);
    java.util.List var13 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.lang.Object[] var15 = var14.toArray();
    java.util.NavigableSet var18 = var14.headSet((java.lang.Object)10L, true);
    var14.clear();
    java.util.Map var20 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var14);
    java.util.Map var21 = java.util.Collections.synchronizedMap(var20);
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.lang.Object[] var23 = var9.toArray(var22);
    java.lang.Object var24 = java.util.Collections.min((java.util.Collection)var9);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    java.lang.Object var28 = var27.clone();
    java.util.Iterator var29 = var27.iterator();
    java.util.Collection var30 = java.util.Collections.unmodifiableCollection((java.util.Collection)var27);
    java.util.List var33 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var33, 0);
    java.util.List var40 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var43 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var40, 0);
    java.util.Collections.rotate(var33, 0);
    java.util.Enumeration var46 = java.util.Collections.enumeration((java.util.Collection)var33);
    java.util.ArrayList var47 = java.util.Collections.list(var46);
    java.lang.Object var48 = java.util.Collections.min((java.util.Collection)var47);
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.Object[] var50 = var27.toArray(var49);
    java.lang.Object[] var51 = new java.lang.Object[] { var50};
    boolean var52 = java.util.Collections.addAll((java.util.Collection)var9, var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var53 = var2.add((java.lang.Object)var50);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + (byte)1+ "'", var24.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + 0+ "'", var48.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test149() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var8 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var9 = java.util.Collections.lastIndexOfSubList(var5, var8);
    java.util.Comparator var10 = java.util.Collections.reverseOrder();
    java.util.Comparator var11 = java.util.Collections.reverseOrder(var10);
    java.lang.Object var12 = java.util.Collections.min((java.util.Collection)var5, var10);
    java.lang.Object var13 = java.util.Collections.max((java.util.Collection)var2, var10);
    boolean var14 = var2.isEmpty();
    java.lang.Object var15 = java.util.Collections.min((java.util.Collection)var2);
    var2.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 0+ "'", var12.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + (byte)1+ "'", var13.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + (byte)1+ "'", var15.equals((byte)1));

  }

  public void test150() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java.util.NavigableSet var17 = var13.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var18 = var13.descendingSet();
    boolean var19 = var3.add((java.lang.Object)var18);
    java.util.SortedSet var21 = var3.tailSet((java.lang.Object)"");
    java.util.Comparator var22 = var3.comparator();
    java.util.List var24 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.lang.Object var26 = var25.clone();
    java.util.List var29 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var33 = java.util.Collections.lastIndexOfSubList(var29, var32);
    java.util.List var35 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var36 = new java.util.TreeSet((java.util.Collection)var35);
    java.util.TreeSet var37 = new java.util.TreeSet((java.util.SortedSet)var36);
    java.util.SortedSet var38 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var37);
    java.lang.Object var39 = var37.clone();
    java.util.Iterator var40 = var37.descendingIterator();
    java.lang.Object var41 = java.util.Collections.max((java.util.Collection)var37);
    java.util.TreeSet var42 = new java.util.TreeSet((java.util.Collection)var37);
    java.util.List var43 = java.util.Collections.nCopies(var33, (java.lang.Object)var37);
    boolean var44 = var25.containsAll((java.util.Collection)var37);
    java.util.List var47 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var50 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var51 = java.util.Collections.lastIndexOfSubList(var47, var50);
    java.util.Comparator var52 = java.util.Collections.reverseOrder();
    java.util.Comparator var53 = java.util.Collections.reverseOrder(var52);
    java.lang.Object var54 = java.util.Collections.min((java.util.Collection)var47, var52);
    java.util.Comparator var55 = java.util.Collections.reverseOrder(var52);
    java.lang.Object var56 = java.util.Collections.min((java.util.Collection)var25, var55);
    java.util.Comparator var57 = java.util.Collections.reverseOrder(var55);
    java.lang.Object var58 = java.util.Collections.max((java.util.Collection)var3, var57);
    java.util.TreeSet var59 = new java.util.TreeSet(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + (byte)1+ "'", var41.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + 0+ "'", var54.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + (byte)1+ "'", var56.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);

  }

  public void test151() throws Throwable {

    java.util.TreeSet var0 = new java.util.TreeSet();
    java.util.Set var1 = java.util.Collections.emptySet();
    boolean var2 = var0.removeAll((java.util.Collection)var1);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var8 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var9 = java.util.Collections.lastIndexOfSubList(var5, var8);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.SortedSet)var12);
    java.util.SortedSet var14 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var13);
    java.lang.Object var15 = var13.clone();
    java.util.Iterator var16 = var13.descendingIterator();
    java.lang.Object var17 = java.util.Collections.max((java.util.Collection)var13);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.List var19 = java.util.Collections.nCopies(var9, (java.lang.Object)var13);
    java.util.Collections.shuffle(var19);
    java.util.TreeSet var21 = new java.util.TreeSet();
    java.lang.Object var23 = var21.floor((java.lang.Object)true);
    java.util.List var26 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var29 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var30 = java.util.Collections.lastIndexOfSubList(var26, var29);
    java.util.Enumeration var31 = java.util.Collections.enumeration((java.util.Collection)var29);
    java.util.ArrayList var32 = java.util.Collections.list(var31);
    java.util.Comparator var33 = java.util.Collections.reverseOrder();
    java.util.TreeSet var34 = new java.util.TreeSet(var33);
    java.util.Comparator var35 = java.util.Collections.reverseOrder(var33);
    java.lang.Object var36 = java.util.Collections.max((java.util.Collection)var32, var35);
    java.util.List var38 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var39 = new java.util.TreeSet((java.util.Collection)var38);
    java.lang.Object[] var40 = var39.toArray();
    java.util.NavigableSet var43 = var39.headSet((java.lang.Object)10L, true);
    int var44 = var39.size();
    java.util.List var47 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var50 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var51 = java.util.Collections.lastIndexOfSubList(var47, var50);
    java.util.Collections.swap((java.util.List)var32, var44, var51);
    java.util.List var55 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var58 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var59 = java.util.Collections.lastIndexOfSubList(var55, var58);
    java.util.Comparator var60 = java.util.Collections.reverseOrder();
    java.util.Comparator var61 = java.util.Collections.reverseOrder(var60);
    java.lang.Object var62 = java.util.Collections.min((java.util.Collection)var55, var60);
    java.util.TreeSet var63 = new java.util.TreeSet(var60);
    java.lang.String var64 = var63.toString();
    java.util.Comparator var65 = var63.comparator();
    java.util.Collections.sort((java.util.List)var32, var65);
    int var67 = java.util.Collections.binarySearch(var19, (java.lang.Object)true, var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var68 = java.util.Collections.max((java.util.Collection)var1, var65);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + (byte)1+ "'", var17.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 0+ "'", var36.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + 0+ "'", var62.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "[]"+ "'", var64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));

  }

  public void test152() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    var1.clear();
    java.util.Comparator var3 = java.util.Collections.reverseOrder();
    java.util.TreeSet var4 = new java.util.TreeSet(var3);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Comparator var12 = java.util.Collections.reverseOrder();
    java.util.Comparator var13 = java.util.Collections.reverseOrder(var12);
    java.lang.Object var14 = java.util.Collections.min((java.util.Collection)var7, var12);
    int var15 = java.util.Collections.frequency((java.util.Collection)var4, (java.lang.Object)var12);
    java.util.Map var16 = java.util.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)var4);
    java.util.Set var17 = java.util.Collections.emptySet();
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    java.util.Enumeration var19 = java.util.Collections.enumeration((java.util.Collection)var18);
    java.util.Comparator var20 = var18.comparator();
    java.lang.String var21 = var18.toString();
    boolean var22 = var1.removeAll((java.util.Collection)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var23 = java.util.Collections.min((java.util.Collection)var18);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 0+ "'", var14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test153() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var16, 0);
    java.util.Collections.rotate(var9, 0);
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var9);
    java.util.Collection var23 = java.util.Collections.synchronizedCollection((java.util.Collection)var9);
    int var24 = java.util.Collections.indexOfSubList(var5, var9);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    int var27 = java.util.Collections.lastIndexOfSubList(var5, var26);
    java.util.Set var28 = java.util.Collections.singleton((java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);

  }

  public void test154() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.String var5 = var2.toString();
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.lang.Object var9 = var8.clone();
    java.util.Iterator var10 = var8.iterator();
    java.util.Collection var11 = java.util.Collections.unmodifiableCollection((java.util.Collection)var8);
    java.lang.Object var12 = var8.pollLast();
    boolean var13 = var2.containsAll((java.util.Collection)var8);
    java.util.Enumeration var14 = java.util.Collections.enumeration((java.util.Collection)var8);
    java.util.List var17 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var21 = java.util.Collections.lastIndexOfSubList(var17, var20);
    java.util.List var24 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var25 = java.util.Collections.indexOfSubList(var17, var24);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var32 = java.util.Collections.lastIndexOfSubList(var28, var31);
    int var33 = java.util.Collections.indexOfSubList(var17, var31);
    boolean var34 = var8.equals((java.lang.Object)var31);
    java.util.Set var35 = java.util.Collections.unmodifiableSet((java.util.Set)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[1]"+ "'", var5.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + (byte)1+ "'", var12.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);

  }

  public void test155() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var14);
    java.lang.Object var17 = var14.lower((java.lang.Object)(short)(-1));
    java.lang.Object var18 = var2.floor((java.lang.Object)var14);
    java.lang.Object var19 = var2.pollLast();
    java.util.List var21 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.lang.Object var23 = var22.clone();
    java.util.Iterator var24 = var22.iterator();
    java.util.Collection var25 = java.util.Collections.unmodifiableCollection((java.util.Collection)var22);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var28);
    java.lang.Object[] var30 = var29.toArray();
    java.util.NavigableSet var33 = var29.headSet((java.lang.Object)10L, true);
    var29.clear();
    java.util.Map var35 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var29);
    java.util.NavigableSet var36 = var29.descendingSet();
    java.lang.Object var37 = var29.pollFirst();
    java.util.List var39 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var40 = new java.util.TreeSet((java.util.Collection)var39);
    java.util.TreeSet var41 = new java.util.TreeSet((java.util.SortedSet)var40);
    java.util.SortedSet var42 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var41);
    java.lang.Object var43 = var29.higher((java.lang.Object)var41);
    boolean var44 = var22.removeAll((java.util.Collection)var41);
    java.util.List var46 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var47 = new java.util.TreeSet((java.util.Collection)var46);
    boolean var48 = var41.removeAll((java.util.Collection)var47);
    java.lang.Object[] var49 = var41.toArray();
    boolean var50 = java.util.Collections.disjoint((java.util.Collection)var2, (java.util.Collection)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);

  }

  public void test156() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    int var7 = var2.size();
    java.lang.Object var8 = var2.clone();
    java.lang.Object[] var9 = var2.toArray();
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object var11 = java.util.Collections.min((java.util.Collection)var2);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + (byte)1+ "'", var11.equals((byte)1));

  }

  public void test157() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var7 = java.util.Collections.emptyList();
    java.util.Set var8 = java.util.Collections.emptySet();
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.util.NavigableSet var10 = var9.descendingSet();
    int var11 = java.util.Collections.binarySearch(var7, (java.lang.Object)var9);
    java.util.List var13 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    boolean var15 = java.util.Collections.disjoint((java.util.Collection)var7, (java.util.Collection)var13);
    java.util.Set var16 = java.util.Collections.singleton((java.lang.Object)var7);
    java.util.List var18 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var18);
    java.lang.Object[] var20 = var19.toArray();
    java.util.NavigableSet var23 = var19.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var24 = var19.descendingSet();
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.SortedSet)var19);
    int var26 = java.util.Collections.frequency((java.util.Collection)var7, (java.lang.Object)var25);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var28);
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.SortedSet)var29);
    java.util.List var33 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var34 = new java.util.TreeSet((java.util.Collection)var33);
    java.lang.Object[] var35 = var34.toArray();
    java.util.NavigableSet var38 = var34.headSet((java.lang.Object)10L, true);
    var34.clear();
    java.util.Map var40 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var34);
    java.util.Map var41 = java.util.Collections.synchronizedMap(var40);
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.lang.Object[] var43 = var29.toArray(var42);
    java.util.List var46 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var49 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var50 = java.util.Collections.lastIndexOfSubList(var46, var49);
    java.util.List var53 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var54 = java.util.Collections.indexOfSubList(var46, var53);
    java.util.Collection var55 = java.util.Collections.synchronizedCollection((java.util.Collection)var46);
    java.util.List var58 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var61 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var62 = java.util.Collections.lastIndexOfSubList(var58, var61);
    java.util.Comparator var63 = java.util.Collections.reverseOrder();
    java.util.Comparator var64 = java.util.Collections.reverseOrder(var63);
    java.lang.Object var65 = java.util.Collections.min((java.util.Collection)var58, var63);
    java.util.TreeSet var66 = new java.util.TreeSet(var63);
    java.lang.Object var67 = java.util.Collections.min(var55, var63);
    boolean var68 = java.util.Collections.replaceAll(var7, (java.lang.Object)var42, (java.lang.Object)var55);
    java.util.Collections.copy(var2, var7);
    java.util.TreeSet var70 = new java.util.TreeSet((java.util.Collection)var2);
    java.util.List var73 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var76 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var77 = java.util.Collections.lastIndexOfSubList(var73, var76);
    java.util.Comparator var78 = java.util.Collections.reverseOrder();
    java.util.Comparator var79 = java.util.Collections.reverseOrder(var78);
    java.lang.Object var80 = java.util.Collections.min((java.util.Collection)var73, var78);
    java.util.TreeSet var81 = new java.util.TreeSet(var78);
    java.lang.String var82 = var81.toString();
    java.util.Comparator var83 = var81.comparator();
    java.lang.Object var84 = java.util.Collections.max((java.util.Collection)var2, var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + 0+ "'", var65.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + 0+ "'", var67.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + 0+ "'", var80.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "[]"+ "'", var82.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + 0+ "'", var84.equals(0));

  }

  public void test158() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.Collections.rotate(var2, 0);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.ArrayList var16 = java.util.Collections.list(var15);
    java.lang.Object var17 = java.util.Collections.min((java.util.Collection)var16);
    java.util.Collections.reverse((java.util.List)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + 0+ "'", var17.equals(0));

  }

  public void test159() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 100);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    java.lang.Object[] var8 = var7.toArray();
    java.util.NavigableSet var9 = var7.descendingSet();
    java.lang.String var10 = var7.toString();
    java.util.List var11 = java.util.Collections.emptyList();
    java.util.Set var12 = java.util.Collections.emptySet();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.NavigableSet var14 = var13.descendingSet();
    int var15 = java.util.Collections.binarySearch(var11, (java.lang.Object)var13);
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var18, 100);
    java.util.Collections.rotate(var11, 100);
    boolean var22 = var7.addAll((java.util.Collection)var11);
    java.util.List var25 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.Collection)var25);
    java.lang.Object[] var27 = var26.toArray();
    java.util.NavigableSet var30 = var26.headSet((java.lang.Object)10L, true);
    var26.clear();
    java.util.Map var32 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var26);
    java.util.List var33 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    int var34 = java.util.Collections.binarySearch(var11, (java.lang.Object)10.0d);
    java.util.Collections.reverse(var11);
    java.util.Collections.copy(var2, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[1]"+ "'", var10.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));

  }

  public void test160() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.lang.Object var4 = var2.pollFirst();
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.lang.Object[] var9 = var8.toArray();
    java.util.NavigableSet var12 = var8.headSet((java.lang.Object)10L, true);
    var8.clear();
    java.util.Map var14 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var8);
    java.util.Map var15 = java.util.Collections.synchronizedMap(var14);
    java.util.Map var16 = java.util.Collections.synchronizedMap(var14);
    java.util.Map var17 = java.util.Collections.synchronizedMap(var14);
    java.lang.Object var18 = var2.lower((java.lang.Object)var14);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var2);
    java.util.Set var20 = java.util.Collections.unmodifiableSet((java.util.Set)var2);
    java.util.Comparator var21 = java.util.Collections.reverseOrder();
    java.util.TreeSet var22 = new java.util.TreeSet(var21);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var29 = java.util.Collections.lastIndexOfSubList(var25, var28);
    boolean var30 = var22.removeAll((java.util.Collection)var25);
    boolean var32 = var22.contains((java.lang.Object)10.0d);
    var22.clear();
    java.util.Comparator var34 = var22.comparator();
    java.lang.Object var35 = var2.ceiling((java.lang.Object)var22);
    java.util.Enumeration var36 = java.util.Collections.enumeration((java.util.Collection)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);

  }

  public void test161() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.lang.Object[] var7 = var2.toArray();
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var14 = java.util.Collections.lastIndexOfSubList(var10, var13);
    java.lang.Object var15 = java.util.Collections.min((java.util.Collection)var10);
    boolean var16 = var2.removeAll((java.util.Collection)var10);
    java.lang.Object var17 = var2.pollLast();
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.SortedSet)var2);
    boolean var19 = var18.isEmpty();
    java.util.SortedSet var20 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var18);
    java.util.NavigableSet var21 = var18.descendingSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 0+ "'", var15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + (byte)1+ "'", var17.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);

  }

  public void test162() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.Object[] var5 = var2.toArray();
    boolean var6 = var2.isEmpty();
    java.util.Enumeration var7 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.ArrayList var8 = java.util.Collections.list(var7);
    java.util.List var9 = java.util.Collections.unmodifiableList((java.util.List)var8);
    java.lang.Object var10 = java.util.Collections.min((java.util.Collection)var8);
    java.util.Collections.<java.lang.Comparable>sort((java.util.List)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + (byte)1+ "'", var10.equals((byte)1));

  }

  public void test163() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.lang.Object var4 = var2.pollFirst();
    java.util.Set var5 = java.util.Collections.synchronizedSet((java.util.Set)var2);
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.util.List var11 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var14 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var15 = java.util.Collections.lastIndexOfSubList(var11, var14);
    java.util.Comparator var16 = java.util.Collections.reverseOrder();
    java.util.Comparator var17 = java.util.Collections.reverseOrder(var16);
    java.lang.Object var18 = java.util.Collections.min((java.util.Collection)var11, var16);
    java.lang.Object var19 = java.util.Collections.max((java.util.Collection)var8, var16);
    boolean var20 = var8.isEmpty();
    boolean var21 = var2.addAll((java.util.Collection)var8);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var27 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var28 = java.util.Collections.lastIndexOfSubList(var24, var27);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var34 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var31, 0);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var38, 0);
    java.util.Collections.rotate(var31, 0);
    java.util.Enumeration var44 = java.util.Collections.enumeration((java.util.Collection)var31);
    java.util.Collection var45 = java.util.Collections.synchronizedCollection((java.util.Collection)var31);
    int var46 = java.util.Collections.indexOfSubList(var27, var31);
    java.util.List var48 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    int var49 = java.util.Collections.lastIndexOfSubList(var27, var48);
    java.util.List var52 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var55 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var56 = java.util.Collections.lastIndexOfSubList(var52, var55);
    int var57 = java.util.Collections.indexOfSubList(var48, var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var58 = var2.addAll((java.util.Collection)var55);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + 0+ "'", var18.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + (byte)1+ "'", var19.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));

  }

  public void test164() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.lang.Object var7 = java.util.Collections.min((java.util.Collection)var2);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var10, 100);
    int var13 = java.util.Collections.indexOfSubList(var2, var10);
    java.util.List var14 = java.util.Collections.synchronizedList(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 0+ "'", var7.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);

  }

  public void test165() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.String var5 = var2.toString();
    java.util.List var6 = java.util.Collections.emptyList();
    java.util.Set var7 = java.util.Collections.emptySet();
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.util.NavigableSet var9 = var8.descendingSet();
    int var10 = java.util.Collections.binarySearch(var6, (java.lang.Object)var8);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 100);
    java.util.Collections.rotate(var6, 100);
    boolean var17 = var2.addAll((java.util.Collection)var6);
    java.util.List var18 = java.util.Collections.unmodifiableList(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[1]"+ "'", var5.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);

  }

  public void test166() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.util.List var10 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 0);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var20, 0);
    java.util.Collections.rotate(var13, 0);
    java.util.Enumeration var26 = java.util.Collections.enumeration((java.util.Collection)var13);
    java.util.ArrayList var27 = java.util.Collections.list(var26);
    java.util.Collections.swap((java.util.List)var27, 1, 0);
    java.util.Collections.shuffle((java.util.List)var27);
    java.util.List var34 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.Collection)var34);
    java.lang.Object[] var36 = var35.toArray();
    java.util.NavigableSet var39 = var35.headSet((java.lang.Object)10L, true);
    var35.clear();
    java.util.Map var41 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var35);
    java.lang.Object[] var42 = var35.toArray();
    java.util.List var44 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.lang.Object[] var46 = var45.toArray();
    java.util.NavigableSet var49 = var45.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var50 = var45.descendingSet();
    boolean var51 = var35.add((java.lang.Object)var50);
    boolean var52 = var27.containsAll((java.util.Collection)var50);
    java.util.Collection var53 = java.util.Collections.unmodifiableCollection((java.util.Collection)var27);
    int var54 = java.util.Collections.lastIndexOfSubList(var10, (java.util.List)var27);
    java.util.Collections.reverse(var10);
    java.util.List var56 = java.util.Collections.unmodifiableList(var10);
    java.util.List var57 = java.util.Collections.synchronizedList(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);

  }

  public void test167() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    java.util.Comparator var9 = java.util.Collections.reverseOrder();
    java.util.Comparator var10 = java.util.Collections.reverseOrder(var9);
    java.lang.Object var11 = java.util.Collections.min((java.util.Collection)var4, var9);
    int var12 = java.util.Collections.frequency((java.util.Collection)var1, (java.lang.Object)var9);
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.SortedSet)var15);
    java.util.SortedSet var17 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var16);
    java.lang.Object var18 = var16.clone();
    java.util.Iterator var19 = var16.descendingIterator();
    java.lang.Object var20 = java.util.Collections.max((java.util.Collection)var16);
    java.lang.Object var21 = var1.lower(var20);
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.util.ArrayList var23 = java.util.Collections.list(var22);
    java.util.ArrayList var24 = java.util.Collections.list(var22);
    java.util.List var27 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var30 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var31 = java.util.Collections.lastIndexOfSubList(var27, var30);
    java.util.List var34 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var35 = java.util.Collections.indexOfSubList(var27, var34);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var38, 0);
    java.util.List var45 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var48 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var45, 0);
    java.util.Collections.rotate(var38, 0);
    java.util.Enumeration var51 = java.util.Collections.enumeration((java.util.Collection)var38);
    java.util.Collection var52 = java.util.Collections.synchronizedCollection((java.util.Collection)var38);
    int var53 = java.util.Collections.indexOfSubList(var27, var38);
    java.util.Collections.rotate((java.util.List)var24, var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 0+ "'", var11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + (byte)1+ "'", var20.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);

  }

  public void test168() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java.util.NavigableSet var17 = var13.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var18 = var13.descendingSet();
    boolean var19 = var3.add((java.lang.Object)var18);
    java.util.Set var20 = java.util.Collections.singleton((java.lang.Object)var3);
    java.util.List var22 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.Collection)var22);
    java.lang.Object[] var24 = var23.toArray();
    java.util.NavigableSet var27 = var23.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var28 = var23.descendingSet();
    java.util.Collection var29 = java.util.Collections.synchronizedCollection((java.util.Collection)var23);
    boolean var31 = var23.add((java.lang.Object)(byte)100);
    java.util.List var33 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var34 = new java.util.TreeSet((java.util.Collection)var33);
    java.lang.Object[] var35 = var34.toArray();
    java.util.NavigableSet var36 = var34.descendingSet();
    java.lang.Object[] var37 = var34.toArray();
    boolean var38 = var23.equals((java.lang.Object)var34);
    java.util.Set var39 = java.util.Collections.synchronizedSet((java.util.Set)var23);
    java.util.List var40 = java.util.Collections.singletonList((java.lang.Object)var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var41 = var3.floor((java.lang.Object)var40);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);

  }

  public void test169() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.Set var4 = java.util.Collections.unmodifiableSet((java.util.Set)var2);
    java.util.TreeSet var5 = new java.util.TreeSet((java.util.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test170() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)var2);
    java.util.Comparator var6 = var2.comparator();
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.lang.Object var10 = var9.clone();
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var17 = java.util.Collections.lastIndexOfSubList(var13, var16);
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.SortedSet)var20);
    java.util.SortedSet var22 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var21);
    java.lang.Object var23 = var21.clone();
    java.util.Iterator var24 = var21.descendingIterator();
    java.lang.Object var25 = java.util.Collections.max((java.util.Collection)var21);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.Collection)var21);
    java.util.List var27 = java.util.Collections.nCopies(var17, (java.lang.Object)var21);
    boolean var28 = var9.containsAll((java.util.Collection)var21);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var34 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var35 = java.util.Collections.lastIndexOfSubList(var31, var34);
    java.util.Comparator var36 = java.util.Collections.reverseOrder();
    java.util.Comparator var37 = java.util.Collections.reverseOrder(var36);
    java.lang.Object var38 = java.util.Collections.min((java.util.Collection)var31, var36);
    java.util.Comparator var39 = java.util.Collections.reverseOrder(var36);
    java.lang.Object var40 = java.util.Collections.min((java.util.Collection)var9, var39);
    java.lang.Object var41 = var2.floor(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + (byte)1+ "'", var25.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + 0+ "'", var38.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + (byte)1+ "'", var40.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);

  }

  public void test171() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.List var15 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.Collection)var15);
    java.lang.Object[] var17 = var16.toArray();
    java.util.NavigableSet var20 = var16.headSet((java.lang.Object)10L, true);
    var16.clear();
    java.util.Map var22 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var16);
    java.lang.Object[] var23 = var16.toArray();
    java.util.List var25 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.Collection)var25);
    java.lang.Object[] var27 = var26.toArray();
    java.util.NavigableSet var30 = var26.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var31 = var26.descendingSet();
    boolean var32 = var16.add((java.lang.Object)var31);
    java.util.SortedSet var34 = var16.tailSet((java.lang.Object)"");
    java.util.SortedSet var35 = var2.headSet((java.lang.Object)"");
    java.util.TreeSet var36 = new java.util.TreeSet(var35);
    java.util.List var38 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var39 = new java.util.TreeSet((java.util.Collection)var38);
    java.lang.Object[] var40 = var39.toArray();
    java.util.NavigableSet var43 = var39.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var44 = var39.descendingSet();
    java.util.List var47 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var48 = java.util.Collections.max((java.util.Collection)var47);
    java.util.List var50 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var51 = new java.util.TreeSet((java.util.Collection)var50);
    java.lang.Object[] var52 = var51.toArray();
    java.util.NavigableSet var55 = var51.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var56 = var39.tailSet(var48, true);
    java.lang.Object var57 = var36.lower(var48);
    java.util.Enumeration var58 = java.util.Collections.enumeration((java.util.Collection)var36);
    java.lang.Object var59 = var36.pollLast();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + 0+ "'", var48.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);

  }

  public void test172() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    java.util.Enumeration var2 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.lang.String var3 = var1.toString();
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var6 = new java.util.TreeSet((java.util.Collection)var5);
    java.lang.Object[] var7 = var6.toArray();
    java.util.NavigableSet var10 = var6.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var11 = var6.descendingSet();
    java.lang.String var12 = var6.toString();
    java.lang.Object var13 = var1.lower((java.lang.Object)var6);
    java.util.List var15 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.Collection)var15);
    java.lang.Object[] var17 = var16.toArray();
    java.util.NavigableSet var20 = var16.headSet((java.lang.Object)10L, true);
    java.util.SortedSet var21 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var16);
    java.util.List var23 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var24 = new java.util.TreeSet((java.util.Collection)var23);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.SortedSet)var24);
    java.lang.Object var26 = var24.pollLast();
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var24);
    java.util.NavigableSet var28 = var24.descendingSet();
    boolean var29 = var16.removeAll((java.util.Collection)var28);
    boolean var30 = var6.addAll((java.util.Collection)var28);
    java.util.Comparator var31 = var6.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[1]"+ "'", var12.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (byte)1+ "'", var26.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);

  }

  public void test173() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var10 = java.util.Collections.indexOfSubList(var2, var9);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 0);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var20, 0);
    java.util.Collections.rotate(var13, 0);
    java.util.Enumeration var26 = java.util.Collections.enumeration((java.util.Collection)var13);
    java.util.Collection var27 = java.util.Collections.synchronizedCollection((java.util.Collection)var13);
    int var28 = java.util.Collections.indexOfSubList(var2, var13);
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.lang.Object[] var32 = var31.toArray();
    java.util.NavigableSet var35 = var31.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var36 = var31.descendingSet();
    java.util.Collection var37 = java.util.Collections.synchronizedCollection((java.util.Collection)var31);
    boolean var39 = var31.add((java.lang.Object)(byte)100);
    java.util.List var41 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var42 = new java.util.TreeSet((java.util.Collection)var41);
    java.lang.Object[] var43 = var42.toArray();
    java.util.NavigableSet var44 = var42.descendingSet();
    java.lang.Object[] var45 = var42.toArray();
    boolean var46 = var31.equals((java.lang.Object)var42);
    java.util.List var48 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var49 = new java.util.TreeSet((java.util.Collection)var48);
    java.util.TreeSet var50 = new java.util.TreeSet((java.util.SortedSet)var49);
    java.lang.Object var51 = var49.pollLast();
    java.util.List var54 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var57 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var58 = java.util.Collections.lastIndexOfSubList(var54, var57);
    boolean var59 = var49.removeAll((java.util.Collection)var54);
    java.util.Set var60 = java.util.Collections.emptySet();
    java.util.TreeSet var61 = new java.util.TreeSet((java.util.Collection)var60);
    java.util.Enumeration var62 = java.util.Collections.enumeration((java.util.Collection)var61);
    java.lang.Object var64 = var61.lower((java.lang.Object)(short)(-1));
    java.lang.Object var65 = var49.floor((java.lang.Object)var61);
    boolean var66 = java.util.Collections.replaceAll(var13, (java.lang.Object)var46, (java.lang.Object)var61);
    java.util.TreeSet var67 = new java.util.TreeSet((java.util.SortedSet)var61);
    java.util.List var69 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var70 = new java.util.TreeSet((java.util.Collection)var69);
    java.util.TreeSet var71 = new java.util.TreeSet((java.util.SortedSet)var70);
    java.util.SortedSet var72 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var71);
    java.lang.Object var73 = var71.clone();
    java.util.Iterator var74 = var71.descendingIterator();
    java.lang.Object var75 = java.util.Collections.max((java.util.Collection)var71);
    java.lang.Object var76 = var71.pollLast();
    java.util.NavigableSet var77 = var71.descendingSet();
    boolean var78 = var67.removeAll((java.util.Collection)var71);
    java.util.TreeSet var79 = new java.util.TreeSet((java.util.SortedSet)var71);
    java.util.List var80 = java.util.Collections.singletonList((java.lang.Object)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + (byte)1+ "'", var51.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + (byte)1+ "'", var75.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + (byte)1+ "'", var76.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);

  }

  public void test174() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    boolean var8 = java.util.Collections.disjoint((java.util.Collection)var0, (java.util.Collection)var6);
    java.util.Set var9 = java.util.Collections.singleton((java.lang.Object)var0);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.lang.Object[] var13 = var12.toArray();
    java.util.NavigableSet var16 = var12.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var17 = var12.descendingSet();
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.SortedSet)var12);
    int var19 = java.util.Collections.frequency((java.util.Collection)var0, (java.lang.Object)var18);
    java.util.List var21 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.lang.Object[] var23 = var22.toArray();
    java.util.NavigableSet var26 = var22.headSet((java.lang.Object)10L, true);
    java.util.SortedSet var27 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var22);
    java.util.Collection var28 = java.util.Collections.unmodifiableCollection((java.util.Collection)var22);
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.lang.Object[] var32 = var31.toArray();
    java.util.NavigableSet var33 = var31.descendingSet();
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var39 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var40 = java.util.Collections.lastIndexOfSubList(var36, var39);
    java.util.Enumeration var41 = java.util.Collections.enumeration((java.util.Collection)var39);
    java.util.ArrayList var42 = java.util.Collections.list(var41);
    java.util.List var45 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var48 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var49 = java.util.Collections.lastIndexOfSubList(var45, var48);
    java.util.List var52 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var53 = java.util.Collections.indexOfSubList(var45, var52);
    java.util.List var56 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var59 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var56, 0);
    java.util.List var63 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var66 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var63, 0);
    java.util.Collections.rotate(var56, 0);
    java.util.Enumeration var69 = java.util.Collections.enumeration((java.util.Collection)var56);
    java.util.Collection var70 = java.util.Collections.synchronizedCollection((java.util.Collection)var56);
    int var71 = java.util.Collections.indexOfSubList(var45, var56);
    int var72 = java.util.Collections.lastIndexOfSubList((java.util.List)var42, var56);
    boolean var73 = var31.retainAll((java.util.Collection)var56);
    java.util.List var75 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var76 = new java.util.TreeSet((java.util.Collection)var75);
    java.lang.Object[] var77 = var76.toArray();
    java.util.NavigableSet var80 = var76.headSet((java.lang.Object)10L, true);
    int var81 = var76.size();
    java.util.List var83 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var84 = new java.util.TreeSet((java.util.Collection)var83);
    java.lang.Object[] var85 = var84.toArray();
    java.util.NavigableSet var88 = var84.headSet((java.lang.Object)10L, true);
    int var89 = var84.size();
    java.util.List var90 = java.util.Collections.nCopies(var81, (java.lang.Object)var89);
    int var91 = java.util.Collections.lastIndexOfSubList(var56, var90);
    boolean var92 = java.util.Collections.replaceAll(var0, (java.lang.Object)var22, (java.lang.Object)var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test175() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java.util.Iterator var6 = var3.descendingIterator();
    java.lang.Object var7 = java.util.Collections.max((java.util.Collection)var3);
    java.lang.Object var8 = var3.pollLast();
    java.util.NavigableSet var9 = var3.descendingSet();
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(-1.0f));
    java.util.List var13 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.lang.Object var15 = var14.clone();
    java.lang.Object var16 = var14.pollFirst();
    java.util.Set var17 = java.util.Collections.synchronizedSet((java.util.Set)var14);
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var26 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var27 = java.util.Collections.lastIndexOfSubList(var23, var26);
    java.util.Comparator var28 = java.util.Collections.reverseOrder();
    java.util.Comparator var29 = java.util.Collections.reverseOrder(var28);
    java.lang.Object var30 = java.util.Collections.min((java.util.Collection)var23, var28);
    java.lang.Object var31 = java.util.Collections.max((java.util.Collection)var20, var28);
    boolean var32 = var20.isEmpty();
    boolean var33 = var14.addAll((java.util.Collection)var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.NavigableSet var34 = var3.headSet((java.lang.Object)var11, var33);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + (byte)1+ "'", var8.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + (byte)1+ "'", var16.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + 0+ "'", var30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + (byte)1+ "'", var31.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test176() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var16, 0);
    java.util.Collections.rotate(var9, 0);
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var9);
    java.util.Collection var23 = java.util.Collections.synchronizedCollection((java.util.Collection)var9);
    int var24 = java.util.Collections.indexOfSubList(var5, var9);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    int var27 = java.util.Collections.lastIndexOfSubList(var5, var26);
    java.util.List var30 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var33 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var34 = java.util.Collections.lastIndexOfSubList(var30, var33);
    int var35 = java.util.Collections.indexOfSubList(var26, var33);
    java.util.TreeSet var36 = new java.util.TreeSet((java.util.Collection)var26);
    java.util.Collection var37 = java.util.Collections.synchronizedCollection((java.util.Collection)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);

  }

  public void test177() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.lang.Object[] var7 = var2.toArray();
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var14 = java.util.Collections.lastIndexOfSubList(var10, var13);
    java.lang.Object var15 = java.util.Collections.min((java.util.Collection)var10);
    boolean var16 = var2.removeAll((java.util.Collection)var10);
    java.util.Collection var17 = java.util.Collections.synchronizedCollection((java.util.Collection)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 0+ "'", var15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);

  }

  public void test178() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.Iterator var3 = var2.iterator();
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.lang.Object[] var11 = new java.lang.Object[] { var6};
    java.lang.Object[] var12 = var2.toArray(var11);
    java.util.Comparator var14 = java.util.Collections.reverseOrder();
    java.util.TreeSet var15 = new java.util.TreeSet(var14);
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var22 = java.util.Collections.lastIndexOfSubList(var18, var21);
    boolean var23 = var15.removeAll((java.util.Collection)var18);
    java.util.NavigableSet var24 = var2.tailSet((java.lang.Object)10.0d, var23);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.SortedSet)var27);
    java.lang.Object var29 = var27.pollLast();
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var36 = java.util.Collections.lastIndexOfSubList(var32, var35);
    boolean var37 = var27.removeAll((java.util.Collection)var32);
    java.util.List var40 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var41 = new java.util.TreeSet((java.util.Collection)var40);
    java.lang.Object[] var42 = var41.toArray();
    java.util.NavigableSet var45 = var41.headSet((java.lang.Object)10L, true);
    var41.clear();
    java.util.Map var47 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var41);
    java.lang.Object[] var48 = var41.toArray();
    java.util.List var50 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var51 = new java.util.TreeSet((java.util.Collection)var50);
    java.lang.Object[] var52 = var51.toArray();
    java.util.NavigableSet var55 = var51.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var56 = var51.descendingSet();
    boolean var57 = var41.add((java.lang.Object)var56);
    java.util.SortedSet var59 = var41.tailSet((java.lang.Object)"");
    java.util.SortedSet var60 = var27.headSet((java.lang.Object)"");
    java.util.TreeSet var61 = new java.util.TreeSet(var60);
    boolean var62 = var2.removeAll((java.util.Collection)var60);
    java.lang.Object var63 = var2.first();
    java.util.List var65 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var66 = new java.util.TreeSet((java.util.Collection)var65);
    java.util.TreeSet var67 = new java.util.TreeSet((java.util.SortedSet)var66);
    java.util.SortedSet var68 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var67);
    java.util.Set var69 = java.util.Collections.synchronizedSet((java.util.Set)var67);
    boolean var70 = var2.removeAll((java.util.Collection)var67);
    int var71 = var2.size();
    java.util.Set var72 = java.util.Collections.emptySet();
    java.util.TreeSet var73 = new java.util.TreeSet((java.util.Collection)var72);
    java.util.List var76 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var77 = new java.util.TreeSet((java.util.Collection)var76);
    java.lang.Object[] var78 = var77.toArray();
    java.util.NavigableSet var81 = var77.headSet((java.lang.Object)10L, true);
    var77.clear();
    java.util.Map var83 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var77);
    java.lang.Object[] var84 = var77.toArray();
    boolean var85 = var73.removeAll((java.util.Collection)var77);
    java.util.List var86 = java.util.Collections.nCopies(var71, (java.lang.Object)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + (byte)1+ "'", var29.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + (byte)1+ "'", var63.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);

  }

  public void test179() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var10 = java.util.Collections.indexOfSubList(var2, var9);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 0);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var20, 0);
    java.util.Collections.rotate(var13, 0);
    java.util.Enumeration var26 = java.util.Collections.enumeration((java.util.Collection)var13);
    java.util.Collection var27 = java.util.Collections.synchronizedCollection((java.util.Collection)var13);
    int var28 = java.util.Collections.indexOfSubList(var2, var13);
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.lang.Object[] var32 = var31.toArray();
    java.util.NavigableSet var35 = var31.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var36 = var31.descendingSet();
    java.util.Collection var37 = java.util.Collections.synchronizedCollection((java.util.Collection)var31);
    boolean var39 = var31.add((java.lang.Object)(byte)100);
    java.util.List var41 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var42 = new java.util.TreeSet((java.util.Collection)var41);
    java.lang.Object[] var43 = var42.toArray();
    java.util.NavigableSet var44 = var42.descendingSet();
    java.lang.Object[] var45 = var42.toArray();
    boolean var46 = var31.equals((java.lang.Object)var42);
    java.util.List var48 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var49 = new java.util.TreeSet((java.util.Collection)var48);
    java.util.TreeSet var50 = new java.util.TreeSet((java.util.SortedSet)var49);
    java.lang.Object var51 = var49.pollLast();
    java.util.List var54 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var57 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var58 = java.util.Collections.lastIndexOfSubList(var54, var57);
    boolean var59 = var49.removeAll((java.util.Collection)var54);
    java.util.Set var60 = java.util.Collections.emptySet();
    java.util.TreeSet var61 = new java.util.TreeSet((java.util.Collection)var60);
    java.util.Enumeration var62 = java.util.Collections.enumeration((java.util.Collection)var61);
    java.lang.Object var64 = var61.lower((java.lang.Object)(short)(-1));
    java.lang.Object var65 = var49.floor((java.lang.Object)var61);
    boolean var66 = java.util.Collections.replaceAll(var13, (java.lang.Object)var46, (java.lang.Object)var61);
    java.util.TreeSet var67 = new java.util.TreeSet((java.util.SortedSet)var61);
    java.util.List var69 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var70 = new java.util.TreeSet((java.util.Collection)var69);
    java.util.TreeSet var71 = new java.util.TreeSet((java.util.SortedSet)var70);
    java.util.SortedSet var72 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var71);
    java.lang.Object var73 = var71.clone();
    java.util.Iterator var74 = var71.descendingIterator();
    java.lang.Object var75 = java.util.Collections.max((java.util.Collection)var71);
    java.lang.Object var76 = var71.pollLast();
    java.util.NavigableSet var77 = var71.descendingSet();
    boolean var78 = var67.removeAll((java.util.Collection)var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var79 = java.util.Collections.max((java.util.Collection)var71);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + (byte)1+ "'", var51.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + (byte)1+ "'", var75.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + (byte)1+ "'", var76.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test180() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.util.Comparator var10 = java.util.Collections.reverseOrder();
    java.util.TreeSet var11 = new java.util.TreeSet(var10);
    java.util.List var14 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var17 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var18 = java.util.Collections.lastIndexOfSubList(var14, var17);
    java.util.Comparator var19 = java.util.Collections.reverseOrder();
    java.util.Comparator var20 = java.util.Collections.reverseOrder(var19);
    java.lang.Object var21 = java.util.Collections.min((java.util.Collection)var14, var19);
    int var22 = java.util.Collections.frequency((java.util.Collection)var11, (java.lang.Object)var19);
    boolean var23 = var3.equals((java.lang.Object)var22);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    java.lang.Object[] var28 = var27.toArray();
    java.util.NavigableSet var31 = var27.headSet((java.lang.Object)10L, true);
    var27.clear();
    java.util.Map var33 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var27);
    java.util.Comparator var34 = java.util.Collections.reverseOrder();
    java.util.TreeSet var35 = new java.util.TreeSet(var34);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var42 = java.util.Collections.lastIndexOfSubList(var38, var41);
    java.util.Comparator var43 = java.util.Collections.reverseOrder();
    java.util.Comparator var44 = java.util.Collections.reverseOrder(var43);
    java.lang.Object var45 = java.util.Collections.min((java.util.Collection)var38, var43);
    int var46 = java.util.Collections.frequency((java.util.Collection)var35, (java.lang.Object)var43);
    boolean var47 = var27.equals((java.lang.Object)var46);
    boolean var48 = var27.isEmpty();
    java.lang.Object var49 = var3.floor((java.lang.Object)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + 0+ "'", var21.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + 0+ "'", var45.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test181() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var10 = java.util.Collections.indexOfSubList(var2, var9);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var17 = java.util.Collections.lastIndexOfSubList(var13, var16);
    int var18 = java.util.Collections.indexOfSubList(var2, var16);
    java.util.Map var21 = java.util.Collections.singletonMap((java.lang.Object)(byte)0, (java.lang.Object)'4');
    java.util.Map var22 = java.util.Collections.unmodifiableMap(var21);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var25, 0);
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var32, 0);
    java.util.Collections.rotate(var25, 0);
    java.util.Enumeration var38 = java.util.Collections.enumeration((java.util.Collection)var25);
    java.util.ArrayList var39 = java.util.Collections.list(var38);
    boolean var40 = java.util.Collections.replaceAll(var2, (java.lang.Object)var21, (java.lang.Object)var38);
    java.util.ArrayList var41 = java.util.Collections.list(var38);
    java.util.List var44 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var47 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var48 = java.util.Collections.lastIndexOfSubList(var44, var47);
    java.util.List var51 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var52 = java.util.Collections.indexOfSubList(var44, var51);
    java.util.Collection var53 = java.util.Collections.synchronizedCollection((java.util.Collection)var44);
    java.util.List var56 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var59 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var60 = java.util.Collections.lastIndexOfSubList(var56, var59);
    java.util.Comparator var61 = java.util.Collections.reverseOrder();
    java.util.Comparator var62 = java.util.Collections.reverseOrder(var61);
    java.lang.Object var63 = java.util.Collections.min((java.util.Collection)var56, var61);
    java.util.TreeSet var64 = new java.util.TreeSet(var61);
    java.lang.Object var65 = java.util.Collections.min(var53, var61);
    java.util.Collections.sort((java.util.List)var41, var61);
    java.util.TreeSet var67 = new java.util.TreeSet(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + 0+ "'", var63.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + 0+ "'", var65.equals(0));

  }

  public void test182() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    boolean var8 = java.util.Collections.disjoint((java.util.Collection)var0, (java.util.Collection)var6);
    java.util.Set var9 = java.util.Collections.singleton((java.lang.Object)var0);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.lang.Object[] var13 = var12.toArray();
    java.util.NavigableSet var16 = var12.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var17 = var12.descendingSet();
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.SortedSet)var12);
    int var19 = java.util.Collections.frequency((java.util.Collection)var0, (java.lang.Object)var18);
    java.util.Set var21 = java.util.Collections.singleton((java.lang.Object)10L);
    boolean var22 = var18.retainAll((java.util.Collection)var21);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.SortedSet)var18);
    java.util.Comparator var24 = java.util.Collections.reverseOrder();
    java.util.TreeSet var25 = new java.util.TreeSet(var24);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var32 = java.util.Collections.lastIndexOfSubList(var28, var31);
    boolean var33 = var25.removeAll((java.util.Collection)var28);
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var37 = java.util.Collections.max((java.util.Collection)var36);
    java.util.Collection var38 = java.util.Collections.unmodifiableCollection((java.util.Collection)var36);
    boolean var39 = var25.retainAll(var38);
    int var40 = var25.size();
    boolean var41 = var23.equals((java.lang.Object)var25);
    java.util.Iterator var42 = var25.descendingIterator();
    java.util.Iterator var43 = var25.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 0+ "'", var37.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);

  }

  public void test183() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder();
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.SortedSet)var12);
    java.lang.Object var14 = var12.pollLast();
    java.util.List var15 = java.util.Collections.singletonList((java.lang.Object)var12);
    var12.clear();
    int var17 = java.util.Collections.frequency((java.util.Collection)var2, (java.lang.Object)var12);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var24 = java.util.Collections.lastIndexOfSubList(var20, var23);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.SortedSet)var27);
    java.util.SortedSet var29 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var28);
    java.lang.Object var30 = var28.clone();
    java.util.Iterator var31 = var28.descendingIterator();
    java.lang.Object var32 = java.util.Collections.max((java.util.Collection)var28);
    java.util.TreeSet var33 = new java.util.TreeSet((java.util.Collection)var28);
    java.util.List var34 = java.util.Collections.nCopies(var24, (java.lang.Object)var28);
    java.util.Collections.shuffle(var34);
    java.util.TreeSet var36 = new java.util.TreeSet();
    java.lang.Object var38 = var36.floor((java.lang.Object)true);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var44 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var45 = java.util.Collections.lastIndexOfSubList(var41, var44);
    java.util.Enumeration var46 = java.util.Collections.enumeration((java.util.Collection)var44);
    java.util.ArrayList var47 = java.util.Collections.list(var46);
    java.util.Comparator var48 = java.util.Collections.reverseOrder();
    java.util.TreeSet var49 = new java.util.TreeSet(var48);
    java.util.Comparator var50 = java.util.Collections.reverseOrder(var48);
    java.lang.Object var51 = java.util.Collections.max((java.util.Collection)var47, var50);
    java.util.List var53 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var54 = new java.util.TreeSet((java.util.Collection)var53);
    java.lang.Object[] var55 = var54.toArray();
    java.util.NavigableSet var58 = var54.headSet((java.lang.Object)10L, true);
    int var59 = var54.size();
    java.util.List var62 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var65 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var66 = java.util.Collections.lastIndexOfSubList(var62, var65);
    java.util.Collections.swap((java.util.List)var47, var59, var66);
    java.util.List var70 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var73 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var74 = java.util.Collections.lastIndexOfSubList(var70, var73);
    java.util.Comparator var75 = java.util.Collections.reverseOrder();
    java.util.Comparator var76 = java.util.Collections.reverseOrder(var75);
    java.lang.Object var77 = java.util.Collections.min((java.util.Collection)var70, var75);
    java.util.TreeSet var78 = new java.util.TreeSet(var75);
    java.lang.String var79 = var78.toString();
    java.util.Comparator var80 = var78.comparator();
    java.util.Collections.sort((java.util.List)var47, var80);
    int var82 = java.util.Collections.binarySearch(var34, (java.lang.Object)true, var80);
    boolean var83 = var12.equals((java.lang.Object)var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + (byte)1+ "'", var14.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + (byte)1+ "'", var32.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + 0+ "'", var51.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + 0+ "'", var77.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "[]"+ "'", var79.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test184() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var10 = java.util.Collections.indexOfSubList(var2, var9);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var17 = java.util.Collections.lastIndexOfSubList(var13, var16);
    int var18 = java.util.Collections.indexOfSubList(var2, var16);
    java.util.List var21 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.lang.Object[] var23 = var22.toArray();
    java.util.NavigableSet var26 = var22.headSet((java.lang.Object)10L, true);
    var22.clear();
    java.util.Map var28 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var22);
    java.util.List var29 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.Collections.shuffle(var29);
    int var31 = java.util.Collections.indexOfSubList(var2, var29);
    java.util.List var34 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var37 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var34, 0);
    int var39 = java.util.Collections.indexOfSubList(var2, var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.shuffle(var2);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);

  }

  public void test185() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.Comparator var5 = java.util.Collections.reverseOrder();
    java.util.Comparator var6 = java.util.Collections.reverseOrder(var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder(var6);
    java.lang.Object var8 = java.util.Collections.min((java.util.Collection)var4, var7);
    java.util.Comparator var9 = java.util.Collections.reverseOrder(var7);
    java.util.TreeSet var10 = new java.util.TreeSet(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + (byte)1+ "'", var8.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);

  }

  public void test186() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder();
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.TreeSet var10 = new java.util.TreeSet(var7);
    java.lang.String var11 = var10.toString();
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.lang.Object[] var16 = var15.toArray();
    java.util.NavigableSet var19 = var15.headSet((java.lang.Object)10L, true);
    var15.clear();
    java.util.Map var21 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var15);
    java.lang.Object var23 = var15.lower((java.lang.Object)'#');
    boolean var24 = var10.equals((java.lang.Object)var15);
    java.lang.Object[] var25 = var15.toArray();
    java.lang.Object[] var26 = var15.toArray();
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var28);
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.SortedSet)var29);
    java.util.SortedSet var31 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var30);
    java.util.List var33 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var34 = new java.util.TreeSet((java.util.Collection)var33);
    java.lang.Object var35 = var34.clone();
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var42 = java.util.Collections.lastIndexOfSubList(var38, var41);
    java.util.List var44 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.util.TreeSet var46 = new java.util.TreeSet((java.util.SortedSet)var45);
    java.util.SortedSet var47 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var46);
    java.lang.Object var48 = var46.clone();
    java.util.Iterator var49 = var46.descendingIterator();
    java.lang.Object var50 = java.util.Collections.max((java.util.Collection)var46);
    java.util.TreeSet var51 = new java.util.TreeSet((java.util.Collection)var46);
    java.util.List var52 = java.util.Collections.nCopies(var42, (java.lang.Object)var46);
    boolean var53 = var34.containsAll((java.util.Collection)var46);
    java.util.List var56 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var59 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var60 = java.util.Collections.lastIndexOfSubList(var56, var59);
    java.util.Comparator var61 = java.util.Collections.reverseOrder();
    java.util.Comparator var62 = java.util.Collections.reverseOrder(var61);
    java.lang.Object var63 = java.util.Collections.min((java.util.Collection)var56, var61);
    java.util.Comparator var64 = java.util.Collections.reverseOrder(var61);
    java.lang.Object var65 = java.util.Collections.min((java.util.Collection)var34, var64);
    boolean var66 = var30.addAll((java.util.Collection)var34);
    java.util.TreeSet var67 = new java.util.TreeSet((java.util.SortedSet)var30);
    java.util.List var70 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var71 = new java.util.TreeSet((java.util.Collection)var70);
    java.lang.Object[] var72 = var71.toArray();
    java.util.NavigableSet var75 = var71.headSet((java.lang.Object)10L, true);
    var71.clear();
    java.util.Map var77 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var71);
    java.util.Map var78 = java.util.Collections.synchronizedMap(var77);
    java.util.Map var79 = java.util.Collections.synchronizedMap(var77);
    java.util.Map var80 = java.util.Collections.unmodifiableMap(var79);
    int var81 = java.util.Collections.frequency((java.util.Collection)var67, (java.lang.Object)var79);
    boolean var82 = java.util.Collections.disjoint((java.util.Collection)var15, (java.util.Collection)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + (byte)1+ "'", var50.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + 0+ "'", var63.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + (byte)1+ "'", var65.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);

  }

  public void test187() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    var1.clear();
    java.util.Comparator var3 = java.util.Collections.reverseOrder();
    java.util.TreeSet var4 = new java.util.TreeSet(var3);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Comparator var12 = java.util.Collections.reverseOrder();
    java.util.Comparator var13 = java.util.Collections.reverseOrder(var12);
    java.lang.Object var14 = java.util.Collections.min((java.util.Collection)var7, var12);
    int var15 = java.util.Collections.frequency((java.util.Collection)var4, (java.lang.Object)var12);
    java.util.Map var16 = java.util.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)var4);
    java.util.List var18 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var18);
    java.lang.Object[] var20 = var19.toArray();
    java.util.Set var21 = java.util.Collections.emptySet();
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.util.Enumeration var23 = java.util.Collections.enumeration((java.util.Collection)var22);
    java.lang.Object var25 = var22.lower((java.lang.Object)(short)(-1));
    boolean var26 = var19.removeAll((java.util.Collection)var22);
    boolean var27 = var4.retainAll((java.util.Collection)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 0+ "'", var14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test188() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.Set var4 = java.util.Collections.unmodifiableSet((java.util.Set)var2);
    java.lang.Object var5 = var2.pollLast();
    java.lang.Object var6 = var2.pollLast();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + (byte)1+ "'", var5.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);

  }

  public void test189() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 100);
    java.util.Comparator var5 = java.util.Collections.reverseOrder();
    java.util.TreeSet var6 = new java.util.TreeSet(var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder(var5);
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var15 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var16 = java.util.Collections.lastIndexOfSubList(var12, var15);
    java.util.List var19 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var20 = java.util.Collections.indexOfSubList(var12, var19);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var26 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var23, 0);
    java.util.List var30 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var33 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var30, 0);
    java.util.Collections.rotate(var23, 0);
    java.util.Enumeration var36 = java.util.Collections.enumeration((java.util.Collection)var23);
    java.util.Collection var37 = java.util.Collections.synchronizedCollection((java.util.Collection)var23);
    int var38 = java.util.Collections.indexOfSubList(var12, var23);
    java.util.Collections.rotate(var12, 0);
    boolean var41 = java.util.Collections.disjoint((java.util.Collection)var2, (java.util.Collection)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test190() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.String var5 = var2.toString();
    java.util.Comparator var6 = var2.comparator();
    java.util.Set var7 = java.util.Collections.synchronizedSet((java.util.Set)var2);
    java.lang.Object var8 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[1]"+ "'", var5.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test191() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)var3);
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.lang.Object[] var10 = var9.toArray();
    java.util.NavigableSet var13 = var9.headSet((java.lang.Object)10L, true);
    var9.clear();
    java.util.Map var15 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var9);
    java.lang.Object var17 = var9.lower((java.lang.Object)'#');
    java.util.List var18 = java.util.Collections.emptyList();
    java.util.Set var19 = java.util.Collections.emptySet();
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.util.NavigableSet var21 = var20.descendingSet();
    int var22 = java.util.Collections.binarySearch(var18, (java.lang.Object)var20);
    java.util.List var24 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    boolean var26 = java.util.Collections.disjoint((java.util.Collection)var18, (java.util.Collection)var24);
    java.lang.Object var27 = var9.higher((java.lang.Object)var26);
    java.util.SortedSet var28 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var29 = var3.ceiling((java.lang.Object)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);

  }

  public void test192() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)var2);
    var2.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)(byte)0, (java.lang.Object)'4');
    java.util.List var10 = java.util.Collections.singletonList((java.lang.Object)'4');
    java.util.Set var11 = java.util.Collections.singleton((java.lang.Object)var10);
    boolean var12 = var2.removeAll((java.util.Collection)var10);
    java.util.List var15 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var15, 100);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var24 = java.util.Collections.lastIndexOfSubList(var20, var23);
    java.util.Enumeration var25 = java.util.Collections.enumeration((java.util.Collection)var23);
    java.util.ArrayList var26 = java.util.Collections.list(var25);
    java.util.Comparator var27 = java.util.Collections.reverseOrder();
    java.util.TreeSet var28 = new java.util.TreeSet(var27);
    java.util.Comparator var29 = java.util.Collections.reverseOrder(var27);
    java.lang.Object var30 = java.util.Collections.max((java.util.Collection)var26, var29);
    java.lang.Object[] var32 = new java.lang.Object[] { (byte)10};
    boolean var33 = java.util.Collections.addAll((java.util.Collection)var26, var32);
    int var34 = java.util.Collections.indexOfSubList(var15, (java.util.List)var26);
    int var35 = java.util.Collections.lastIndexOfSubList(var10, var15);
    java.lang.Object var36 = java.util.Collections.max((java.util.Collection)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + 0+ "'", var30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + '4'+ "'", var36.equals('4'));

  }

  public void test193() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var2);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.lang.Object[] var11 = var10.toArray();
    java.util.NavigableSet var14 = var10.headSet((java.lang.Object)10L, true);
    java.util.List var16 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var17 = new java.util.TreeSet((java.util.Collection)var16);
    java.util.NavigableSet var18 = var17.descendingSet();
    boolean var19 = var10.retainAll((java.util.Collection)var18);
    var10.clear();
    java.lang.Object var21 = var10.clone();
    java.util.Collection var22 = java.util.Collections.synchronizedCollection((java.util.Collection)var10);
    java.util.Comparator var23 = var10.comparator();
    boolean var24 = var7.addAll((java.util.Collection)var10);
    java.util.Collection var25 = java.util.Collections.synchronizedCollection((java.util.Collection)var10);
    java.util.List var27 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.Collection)var27);
    java.lang.Object[] var29 = var28.toArray();
    java.util.NavigableSet var32 = var28.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var33 = var28.descendingSet();
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var37 = java.util.Collections.max((java.util.Collection)var36);
    java.util.List var39 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var40 = new java.util.TreeSet((java.util.Collection)var39);
    java.lang.Object[] var41 = var40.toArray();
    java.util.NavigableSet var44 = var40.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var45 = var28.tailSet(var37, true);
    java.lang.Object var46 = var28.clone();
    boolean var47 = var10.removeAll((java.util.Collection)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 0+ "'", var37.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test194() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var10 = java.util.Collections.indexOfSubList(var2, var9);
    java.util.List var11 = java.util.Collections.emptyList();
    java.util.Set var12 = java.util.Collections.emptySet();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.NavigableSet var14 = var13.descendingSet();
    int var15 = java.util.Collections.binarySearch(var11, (java.lang.Object)var13);
    java.util.List var17 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    boolean var19 = java.util.Collections.disjoint((java.util.Collection)var11, (java.util.Collection)var17);
    java.util.Set var20 = java.util.Collections.singleton((java.lang.Object)var11);
    int var21 = java.util.Collections.indexOfSubList(var2, var11);
    java.util.Collection var22 = java.util.Collections.unmodifiableCollection((java.util.Collection)var11);
    java.util.Collections.shuffle(var11);
    java.util.Collections.reverse(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);

  }

  public void test195() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder();
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.TreeSet var10 = new java.util.TreeSet(var7);
    java.lang.String var11 = var10.toString();
    java.util.Comparator var12 = var10.comparator();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.SortedSet)var10);
    java.lang.Object var14 = var10.pollLast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var15 = var10.first();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);

  }

  public void test196() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder();
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.SortedSet)var12);
    java.lang.Object var14 = var12.pollLast();
    java.util.List var15 = java.util.Collections.singletonList((java.lang.Object)var12);
    var12.clear();
    int var17 = java.util.Collections.frequency((java.util.Collection)var2, (java.lang.Object)var12);
    java.lang.Object var18 = var12.pollLast();
    java.lang.Object var19 = var12.clone();
    java.lang.Object var20 = var12.pollFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + (byte)1+ "'", var14.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);

  }

  public void test197() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    var1.clear();
    java.util.Comparator var3 = java.util.Collections.reverseOrder();
    java.util.TreeSet var4 = new java.util.TreeSet(var3);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Comparator var12 = java.util.Collections.reverseOrder();
    java.util.Comparator var13 = java.util.Collections.reverseOrder(var12);
    java.lang.Object var14 = java.util.Collections.min((java.util.Collection)var7, var12);
    int var15 = java.util.Collections.frequency((java.util.Collection)var4, (java.lang.Object)var12);
    java.util.Map var16 = java.util.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)var4);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var22 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var19, 0);
    java.util.List var26 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var29 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var26, 0);
    java.util.List var33 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var33, 0);
    java.util.Collections.rotate(var26, 0);
    java.util.Collections.rotate(var19, 0);
    java.util.SortedSet var40 = var1.headSet((java.lang.Object)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var41 = java.util.Collections.max((java.util.Collection)var1);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 0+ "'", var14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);

  }

  public void test198() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.util.NavigableSet var10 = var9.descendingSet();
    boolean var11 = var2.retainAll((java.util.Collection)var10);
    var2.clear();
    java.lang.Object var13 = var2.clone();
    java.util.Collection var14 = java.util.Collections.synchronizedCollection((java.util.Collection)var2);
    java.util.List var17 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var17, 0);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var27 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var24, 0);
    java.util.Collections.rotate(var17, 0);
    java.util.Enumeration var30 = java.util.Collections.enumeration((java.util.Collection)var17);
    java.util.Set var31 = java.util.Collections.singleton((java.lang.Object)var30);
    int var32 = java.util.Collections.frequency((java.util.Collection)var2, (java.lang.Object)var30);
    java.util.ArrayList var33 = java.util.Collections.list(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);

  }

  public void test199() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var14);
    java.lang.Object var17 = var14.lower((java.lang.Object)(short)(-1));
    java.lang.Object var18 = var2.floor((java.lang.Object)var14);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var21, 0);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var28, 0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var35, 0);
    java.util.Collections.rotate(var28, 0);
    java.util.Collections.rotate(var21, 0);
    int var42 = java.util.Collections.frequency((java.util.Collection)var14, (java.lang.Object)0);
    java.util.List var44 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.util.Iterator var46 = var45.iterator();
    java.util.List var49 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var52 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var53 = java.util.Collections.lastIndexOfSubList(var49, var52);
    java.lang.Object[] var54 = new java.lang.Object[] { var49};
    java.lang.Object[] var55 = var45.toArray(var54);
    java.util.Comparator var57 = java.util.Collections.reverseOrder();
    java.util.TreeSet var58 = new java.util.TreeSet(var57);
    java.util.List var61 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var64 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var65 = java.util.Collections.lastIndexOfSubList(var61, var64);
    boolean var66 = var58.removeAll((java.util.Collection)var61);
    java.util.NavigableSet var67 = var45.tailSet((java.lang.Object)10.0d, var66);
    java.lang.Object var68 = var45.pollFirst();
    boolean var69 = var14.addAll((java.util.Collection)var45);
    java.util.Iterator var70 = var45.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + (byte)1+ "'", var68.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);

  }

  public void test200() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.util.List var13 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.lang.Object[] var15 = var14.toArray();
    java.util.NavigableSet var18 = var14.headSet((java.lang.Object)10L, true);
    var14.clear();
    java.util.Map var20 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var14);
    java.util.Comparator var21 = java.util.Collections.reverseOrder();
    java.util.TreeSet var22 = new java.util.TreeSet(var21);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var29 = java.util.Collections.lastIndexOfSubList(var25, var28);
    java.util.Comparator var30 = java.util.Collections.reverseOrder();
    java.util.Comparator var31 = java.util.Collections.reverseOrder(var30);
    java.lang.Object var32 = java.util.Collections.min((java.util.Collection)var25, var30);
    int var33 = java.util.Collections.frequency((java.util.Collection)var22, (java.lang.Object)var30);
    boolean var34 = var14.equals((java.lang.Object)var33);
    java.lang.Object var35 = var3.higher((java.lang.Object)var14);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var39 = java.util.Collections.singletonList((java.lang.Object)10);
    boolean var40 = var3.addAll((java.util.Collection)var39);
    java.util.Set var41 = java.util.Collections.emptySet();
    java.util.TreeSet var42 = new java.util.TreeSet((java.util.Collection)var41);
    var42.clear();
    java.util.Comparator var44 = java.util.Collections.reverseOrder();
    java.util.TreeSet var45 = new java.util.TreeSet(var44);
    java.util.List var48 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var51 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var52 = java.util.Collections.lastIndexOfSubList(var48, var51);
    java.util.Comparator var53 = java.util.Collections.reverseOrder();
    java.util.Comparator var54 = java.util.Collections.reverseOrder(var53);
    java.lang.Object var55 = java.util.Collections.min((java.util.Collection)var48, var53);
    int var56 = java.util.Collections.frequency((java.util.Collection)var45, (java.lang.Object)var53);
    java.util.Map var57 = java.util.Collections.singletonMap((java.lang.Object)var42, (java.lang.Object)var45);
    java.util.Set var58 = java.util.Collections.emptySet();
    java.util.TreeSet var59 = new java.util.TreeSet((java.util.Collection)var58);
    java.util.Enumeration var60 = java.util.Collections.enumeration((java.util.Collection)var59);
    java.util.Comparator var61 = var59.comparator();
    java.lang.String var62 = var59.toString();
    boolean var63 = var42.removeAll((java.util.Collection)var59);
    java.util.TreeSet var64 = new java.util.TreeSet((java.util.SortedSet)var59);
    java.lang.Object var65 = var59.pollFirst();
    java.util.Comparator var66 = var59.comparator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var67 = java.util.Collections.binarySearch(var39, (java.lang.Object)var59);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 0+ "'", var32.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + 0+ "'", var55.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "[]"+ "'", var62.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);

  }

  public void test201() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.Set var1 = java.util.Collections.unmodifiableSet(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);

  }

  public void test202() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.lang.Object var4 = var2.pollFirst();
    java.util.SortedSet var5 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var2);
    java.util.TreeSet var6 = new java.util.TreeSet();
    java.lang.Object var8 = var6.floor((java.lang.Object)true);
    var6.clear();
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var6);
    java.util.NavigableSet var11 = var10.descendingSet();
    boolean var12 = var10.isEmpty();
    java.lang.Object var13 = var10.pollLast();
    boolean var14 = var2.containsAll((java.util.Collection)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test203() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    boolean var8 = java.util.Collections.disjoint((java.util.Collection)var0, (java.util.Collection)var6);
    java.util.Set var9 = java.util.Collections.singleton((java.lang.Object)var0);
    java.util.Collections.reverse(var0);
    java.util.List var11 = java.util.Collections.emptyList();
    java.util.Set var12 = java.util.Collections.emptySet();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.NavigableSet var14 = var13.descendingSet();
    int var15 = java.util.Collections.binarySearch(var11, (java.lang.Object)var13);
    java.util.List var17 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    boolean var19 = java.util.Collections.disjoint((java.util.Collection)var11, (java.util.Collection)var17);
    java.util.Set var20 = java.util.Collections.singleton((java.lang.Object)var11);
    java.util.Collections.reverse(var11);
    int var22 = java.util.Collections.indexOfSubList(var0, var11);
    java.util.List var24 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.SortedSet)var25);
    java.lang.Object[] var27 = var25.toArray();
    int var28 = java.util.Collections.binarySearch(var0, (java.lang.Object)var27);
    java.util.Enumeration var29 = java.util.Collections.enumeration((java.util.Collection)var0);
    java.util.ArrayList var30 = java.util.Collections.list(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);

  }

  public void test204() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    int var7 = var2.size();
    java.lang.Object var8 = var2.clone();
    java.lang.Object[] var9 = var2.toArray();
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var2);
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java.util.NavigableSet var17 = var13.headSet((java.lang.Object)10L, true);
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.util.NavigableSet var21 = var20.descendingSet();
    boolean var22 = var13.retainAll((java.util.Collection)var21);
    var13.clear();
    java.lang.Object var24 = var13.clone();
    java.util.Collection var25 = java.util.Collections.synchronizedCollection((java.util.Collection)var13);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var28, 0);
    java.util.List var35 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var35, 0);
    java.util.Collections.rotate(var28, 0);
    java.util.Enumeration var41 = java.util.Collections.enumeration((java.util.Collection)var28);
    java.util.Set var42 = java.util.Collections.singleton((java.lang.Object)var41);
    int var43 = java.util.Collections.frequency((java.util.Collection)var13, (java.lang.Object)var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var44 = var2.contains((java.lang.Object)var41);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);

  }

  public void test205() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    boolean var9 = var1.removeAll((java.util.Collection)var4);
    java.util.List var10 = java.util.Collections.emptyList();
    java.util.Set var11 = java.util.Collections.emptySet();
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.util.NavigableSet var13 = var12.descendingSet();
    int var14 = java.util.Collections.binarySearch(var10, (java.lang.Object)var12);
    java.util.List var16 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var17 = new java.util.TreeSet((java.util.Collection)var16);
    boolean var18 = java.util.Collections.disjoint((java.util.Collection)var10, (java.util.Collection)var16);
    java.util.Set var19 = java.util.Collections.singleton((java.lang.Object)var10);
    java.util.List var21 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.lang.Object[] var23 = var22.toArray();
    java.util.NavigableSet var26 = var22.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var27 = var22.descendingSet();
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.SortedSet)var22);
    int var29 = java.util.Collections.frequency((java.util.Collection)var10, (java.lang.Object)var28);
    java.util.Set var31 = java.util.Collections.singleton((java.lang.Object)10L);
    boolean var32 = var28.retainAll((java.util.Collection)var31);
    java.util.TreeSet var33 = new java.util.TreeSet((java.util.SortedSet)var28);
    boolean var34 = var1.add((java.lang.Object)var28);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.SortedSet)var28);
    java.util.List var37 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var38 = new java.util.TreeSet((java.util.Collection)var37);
    java.lang.Object var39 = var38.clone();
    java.util.Iterator var40 = var38.iterator();
    java.util.Collection var41 = java.util.Collections.unmodifiableCollection((java.util.Collection)var38);
    java.lang.Object var42 = var38.pollLast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.SortedSet var43 = var35.headSet((java.lang.Object)var38);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + (byte)1+ "'", var42.equals((byte)1));

  }

  public void test206() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    java.util.List var3 = java.util.Collections.unmodifiableList(var2);
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var6 = new java.util.TreeSet((java.util.Collection)var5);
    java.lang.Object[] var7 = var6.toArray();
    java.util.NavigableSet var8 = var6.descendingSet();
    java.util.List var11 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var14 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var15 = java.util.Collections.lastIndexOfSubList(var11, var14);
    java.util.Enumeration var16 = java.util.Collections.enumeration((java.util.Collection)var14);
    java.util.ArrayList var17 = java.util.Collections.list(var16);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var24 = java.util.Collections.lastIndexOfSubList(var20, var23);
    java.util.List var27 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var28 = java.util.Collections.indexOfSubList(var20, var27);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var34 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var31, 0);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var38, 0);
    java.util.Collections.rotate(var31, 0);
    java.util.Enumeration var44 = java.util.Collections.enumeration((java.util.Collection)var31);
    java.util.Collection var45 = java.util.Collections.synchronizedCollection((java.util.Collection)var31);
    int var46 = java.util.Collections.indexOfSubList(var20, var31);
    int var47 = java.util.Collections.lastIndexOfSubList((java.util.List)var17, var31);
    boolean var48 = var6.retainAll((java.util.Collection)var31);
    int var49 = java.util.Collections.lastIndexOfSubList(var3, var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));

  }

  public void test207() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.util.Map var10 = java.util.Collections.unmodifiableMap(var9);
    java.util.Map var11 = java.util.Collections.synchronizedMap(var10);
    java.util.Map var12 = java.util.Collections.synchronizedMap(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var13 = java.util.Collections.newSetFromMap(var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);

  }

  public void test208() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    int var7 = var2.size();
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.lang.Object[] var11 = var10.toArray();
    java.util.NavigableSet var14 = var10.headSet((java.lang.Object)10L, true);
    int var15 = var10.size();
    java.util.List var16 = java.util.Collections.nCopies(var7, (java.lang.Object)var15);
    java.util.List var19 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.Collection)var19);
    java.lang.Object[] var21 = var20.toArray();
    java.util.NavigableSet var24 = var20.headSet((java.lang.Object)10L, true);
    var20.clear();
    java.util.Map var26 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var20);
    java.util.Map var27 = java.util.Collections.unmodifiableMap(var26);
    java.util.Map var28 = java.util.Collections.synchronizedMap(var27);
    java.util.Map var29 = java.util.Collections.synchronizedMap(var28);
    java.util.List var30 = java.util.Collections.nCopies(var7, (java.lang.Object)var29);
    java.util.List var32 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var33 = new java.util.TreeSet((java.util.Collection)var32);
    java.util.TreeSet var34 = new java.util.TreeSet((java.util.SortedSet)var33);
    java.lang.Object var35 = var33.pollLast();
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var41 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var42 = java.util.Collections.lastIndexOfSubList(var38, var41);
    boolean var43 = var33.removeAll((java.util.Collection)var38);
    java.util.Set var44 = java.util.Collections.emptySet();
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.util.Enumeration var46 = java.util.Collections.enumeration((java.util.Collection)var45);
    boolean var47 = var33.removeAll((java.util.Collection)var45);
    java.lang.Object var49 = var33.ceiling((java.lang.Object)0);
    java.util.List var51 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var52 = new java.util.TreeSet((java.util.Collection)var51);
    java.lang.Object[] var53 = var52.toArray();
    java.util.NavigableSet var56 = var52.headSet((java.lang.Object)10L, true);
    int var57 = var52.size();
    java.util.List var59 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var60 = new java.util.TreeSet((java.util.Collection)var59);
    java.lang.Object[] var61 = var60.toArray();
    java.util.NavigableSet var64 = var60.headSet((java.lang.Object)10L, true);
    int var65 = var60.size();
    java.util.List var66 = java.util.Collections.nCopies(var57, (java.lang.Object)var65);
    java.util.Collection var67 = java.util.Collections.synchronizedCollection((java.util.Collection)var66);
    java.util.TreeSet var68 = new java.util.TreeSet();
    java.lang.Object var69 = var68.clone();
    java.lang.Object var70 = var68.pollFirst();
    java.util.Map var71 = java.util.Collections.singletonMap((java.lang.Object)var67, (java.lang.Object)var68);
    boolean var72 = var33.containsAll(var67);
    int var73 = var33.size();
    java.util.Map var74 = java.util.Collections.singletonMap((java.lang.Object)var30, (java.lang.Object)var33);
    java.util.Comparator var75 = var33.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + (byte)1+ "'", var35.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);

  }

  public void test209() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var14);
    boolean var16 = var2.removeAll((java.util.Collection)var14);
    boolean var17 = var2.isEmpty();
    java.util.Comparator var18 = var2.comparator();
    java.util.Set var19 = java.util.Collections.unmodifiableSet((java.util.Set)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);

  }

  public void test210() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.Object[] var5 = var2.toArray();
    boolean var6 = var2.isEmpty();
    java.util.Enumeration var7 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.ArrayList var8 = java.util.Collections.list(var7);
    java.util.ArrayList var9 = java.util.Collections.list(var7);
    java.util.ArrayList var10 = java.util.Collections.list(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);

  }

  public void test211() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 100);
    java.util.Comparator var5 = java.util.Collections.reverseOrder();
    java.util.TreeSet var6 = new java.util.TreeSet(var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder(var5);
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.TreeSet var10 = new java.util.TreeSet(var7);
    java.util.Comparator var11 = java.util.Collections.reverseOrder(var7);
    java.util.Comparator var12 = java.util.Collections.reverseOrder(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);

  }

  public void test212() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.Iterator var3 = var2.iterator();
    java.util.Collection var4 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.lang.Object var5 = var2.pollLast();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + (byte)1+ "'", var5.equals((byte)1));

  }

  public void test213() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.lang.Object var7 = java.util.Collections.min((java.util.Collection)var2);
    java.util.List var8 = java.util.Collections.emptyList();
    int var9 = java.util.Collections.lastIndexOfSubList(var2, var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var10 = java.util.Collections.max((java.util.Collection)var8);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 0+ "'", var7.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);

  }

  public void test214() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.String var5 = var2.toString();
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.lang.Object var9 = var8.clone();
    java.util.Iterator var10 = var8.iterator();
    java.util.Collection var11 = java.util.Collections.unmodifiableCollection((java.util.Collection)var8);
    java.lang.Object var12 = var8.pollLast();
    boolean var13 = var2.containsAll((java.util.Collection)var8);
    java.lang.Object[] var14 = var2.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[1]"+ "'", var5.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + (byte)1+ "'", var12.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);

  }

  public void test215() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.Iterator var3 = var2.iterator();
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.lang.Object[] var11 = new java.lang.Object[] { var6};
    java.lang.Object[] var12 = var2.toArray(var11);
    java.lang.Object var13 = var2.last();
    java.lang.String var14 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + (byte)1+ "'", var13.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[1]"+ "'", var14.equals("[1]"));

  }

  public void test216() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var14);
    boolean var16 = var2.removeAll((java.util.Collection)var14);
    java.lang.Object var18 = var2.ceiling((java.lang.Object)0);
    java.util.SortedSet var19 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var2);
    java.util.List var21 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.lang.Object var23 = var22.clone();
    java.lang.Object var24 = var22.pollFirst();
    java.util.Set var25 = java.util.Collections.synchronizedSet((java.util.Set)var22);
    java.util.List var27 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.Collection)var27);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var34 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var35 = java.util.Collections.lastIndexOfSubList(var31, var34);
    java.util.Comparator var36 = java.util.Collections.reverseOrder();
    java.util.Comparator var37 = java.util.Collections.reverseOrder(var36);
    java.lang.Object var38 = java.util.Collections.min((java.util.Collection)var31, var36);
    java.lang.Object var39 = java.util.Collections.max((java.util.Collection)var28, var36);
    boolean var40 = var28.isEmpty();
    boolean var41 = var22.addAll((java.util.Collection)var28);
    java.util.List var44 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var47 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var44, 0);
    java.util.List var51 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var54 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var51, 0);
    java.util.Collections.rotate(var44, 0);
    java.util.Enumeration var57 = java.util.Collections.enumeration((java.util.Collection)var44);
    java.util.ArrayList var58 = java.util.Collections.list(var57);
    java.util.ArrayList var59 = java.util.Collections.list(var57);
    boolean var60 = var28.containsAll((java.util.Collection)var59);
    boolean var61 = var2.retainAll((java.util.Collection)var59);
    java.util.Comparator var62 = var2.comparator();
    java.util.List var64 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var65 = new java.util.TreeSet((java.util.Collection)var64);
    java.util.TreeSet var66 = new java.util.TreeSet((java.util.SortedSet)var65);
    java.lang.Object[] var67 = new java.lang.Object[] { var65};
    java.lang.Object[] var68 = var2.toArray(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + (byte)1+ "'", var24.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + 0+ "'", var38.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + (byte)1+ "'", var39.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);

  }

  public void test217() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    boolean var8 = java.util.Collections.disjoint((java.util.Collection)var0, (java.util.Collection)var6);
    java.util.Set var9 = java.util.Collections.singleton((java.lang.Object)var0);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.lang.Object[] var13 = var12.toArray();
    java.util.NavigableSet var16 = var12.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var17 = var12.descendingSet();
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.SortedSet)var12);
    int var19 = java.util.Collections.frequency((java.util.Collection)var0, (java.lang.Object)var18);
    java.util.Set var21 = java.util.Collections.singleton((java.lang.Object)10L);
    boolean var22 = var18.retainAll((java.util.Collection)var21);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.SortedSet)var18);
    java.util.Comparator var24 = java.util.Collections.reverseOrder();
    java.util.TreeSet var25 = new java.util.TreeSet(var24);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var32 = java.util.Collections.lastIndexOfSubList(var28, var31);
    boolean var33 = var25.removeAll((java.util.Collection)var28);
    java.util.List var36 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var37 = java.util.Collections.max((java.util.Collection)var36);
    java.util.Collection var38 = java.util.Collections.unmodifiableCollection((java.util.Collection)var36);
    boolean var39 = var25.retainAll(var38);
    int var40 = var25.size();
    boolean var41 = var23.equals((java.lang.Object)var25);
    int var42 = var23.size();
    java.util.Collection var43 = java.util.Collections.synchronizedCollection((java.util.Collection)var23);
    java.util.TreeSet var44 = new java.util.TreeSet();
    java.lang.Object var45 = var44.clone();
    java.util.List var47 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var48 = new java.util.TreeSet((java.util.Collection)var47);
    java.lang.Object[] var49 = var48.toArray();
    java.util.NavigableSet var50 = var48.descendingSet();
    java.lang.String var51 = var48.toString();
    boolean var52 = var44.contains((java.lang.Object)var51);
    boolean var53 = var23.contains((java.lang.Object)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + 0+ "'", var37.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[1]"+ "'", var51.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test218() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var7 = var2.descendingSet();
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.String var9 = var8.toString();
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.SortedSet)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[1]"+ "'", var9.equals("[1]"));

  }

  public void test219() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.util.List var13 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.lang.Object[] var15 = var14.toArray();
    java.util.NavigableSet var18 = var14.headSet((java.lang.Object)10L, true);
    var14.clear();
    java.util.Map var20 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var14);
    java.util.Comparator var21 = java.util.Collections.reverseOrder();
    java.util.TreeSet var22 = new java.util.TreeSet(var21);
    java.util.List var25 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var29 = java.util.Collections.lastIndexOfSubList(var25, var28);
    java.util.Comparator var30 = java.util.Collections.reverseOrder();
    java.util.Comparator var31 = java.util.Collections.reverseOrder(var30);
    java.lang.Object var32 = java.util.Collections.min((java.util.Collection)var25, var30);
    int var33 = java.util.Collections.frequency((java.util.Collection)var22, (java.lang.Object)var30);
    boolean var34 = var14.equals((java.lang.Object)var33);
    java.lang.Object var35 = var3.higher((java.lang.Object)var14);
    java.util.List var38 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var39 = java.util.Collections.singletonList((java.lang.Object)10);
    boolean var40 = var3.addAll((java.util.Collection)var39);
    java.util.TreeSet var41 = new java.util.TreeSet((java.util.Collection)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 0+ "'", var32.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test220() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)var3);
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.SortedSet)var8);
    java.lang.Object var10 = var8.pollLast();
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)var8);
    int var12 = java.util.Collections.lastIndexOfSubList(var5, var11);
    java.util.List var13 = java.util.Collections.unmodifiableList(var5);
    java.util.List var15 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.Collection)var15);
    java.lang.Object[] var17 = var16.toArray();
    java.util.NavigableSet var18 = var16.descendingSet();
    java.lang.Object[] var19 = var16.toArray();
    java.lang.Object var20 = var16.last();
    java.util.List var21 = java.util.Collections.emptyList();
    java.util.Set var22 = java.util.Collections.emptySet();
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.Collection)var22);
    java.util.NavigableSet var24 = var23.descendingSet();
    int var25 = java.util.Collections.binarySearch(var21, (java.lang.Object)var23);
    java.util.Comparator var26 = java.util.Collections.reverseOrder();
    java.util.Comparator var27 = java.util.Collections.reverseOrder(var26);
    java.util.Collections.sort(var21, var26);
    java.lang.Object var29 = java.util.Collections.min((java.util.Collection)var16, var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.sort(var5, var26);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + (byte)1+ "'", var10.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + (byte)1+ "'", var20.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + (byte)1+ "'", var29.equals((byte)1));

  }

  public void test221() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var2, 0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.Collections.rotate(var2, 0);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.ArrayList var16 = java.util.Collections.list(var15);
    java.util.List var18 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var18);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.SortedSet)var19);
    java.util.SortedSet var21 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var20);
    java.util.Comparator var22 = java.util.Collections.reverseOrder();
    java.util.Comparator var23 = java.util.Collections.reverseOrder(var22);
    java.util.Comparator var24 = java.util.Collections.reverseOrder(var23);
    java.lang.Object var25 = java.util.Collections.min((java.util.Collection)var21, var24);
    java.util.Comparator var26 = java.util.Collections.reverseOrder(var24);
    java.util.Collections.sort((java.util.List)var16, var24);
    java.util.List var29 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.Collection)var29);
    java.lang.Object[] var31 = var30.toArray();
    java.util.NavigableSet var32 = var30.descendingSet();
    java.lang.String var33 = var30.toString();
    java.util.Comparator var34 = var30.comparator();
    java.util.Set var35 = java.util.Collections.synchronizedSet((java.util.Set)var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var36 = var16.retainAll((java.util.Collection)var30);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + (byte)1+ "'", var25.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[1]"+ "'", var33.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);

  }

  public void test222() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var3 = java.util.Collections.max((java.util.Collection)var2);
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var7 = java.util.Collections.unmodifiableList(var5);
    java.util.Collection var8 = java.util.Collections.unmodifiableCollection((java.util.Collection)var5);
    java.util.Collections.shuffle(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 0+ "'", var3.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test223() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.lang.Object var7 = java.util.Collections.min((java.util.Collection)var2);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var10, 100);
    int var13 = java.util.Collections.indexOfSubList(var2, var10);
    java.util.List var14 = java.util.Collections.unmodifiableList(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.shuffle(var10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 0+ "'", var7.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);

  }

  public void test224() throws Throwable {

    java.util.TreeSet var0 = new java.util.TreeSet();
    java.util.Set var1 = java.util.Collections.emptySet();
    boolean var2 = var0.removeAll((java.util.Collection)var1);
    java.util.List var4 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var5 = new java.util.TreeSet((java.util.Collection)var4);
    java.lang.Object var6 = var5.clone();
    java.lang.Object var7 = var5.pollFirst();
    java.util.Set var8 = java.util.Collections.synchronizedSet((java.util.Set)var5);
    java.lang.Object[] var9 = var5.toArray();
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.SortedSet)var12);
    java.lang.Object var14 = var12.pollLast();
    java.util.List var17 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var21 = java.util.Collections.lastIndexOfSubList(var17, var20);
    boolean var22 = var12.removeAll((java.util.Collection)var17);
    java.util.List var25 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.Collection)var25);
    java.lang.Object[] var27 = var26.toArray();
    java.util.NavigableSet var30 = var26.headSet((java.lang.Object)10L, true);
    var26.clear();
    java.util.Map var32 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var26);
    java.lang.Object[] var33 = var26.toArray();
    java.util.List var35 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var36 = new java.util.TreeSet((java.util.Collection)var35);
    java.lang.Object[] var37 = var36.toArray();
    java.util.NavigableSet var40 = var36.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var41 = var36.descendingSet();
    boolean var42 = var26.add((java.lang.Object)var41);
    java.util.SortedSet var44 = var26.tailSet((java.lang.Object)"");
    java.util.SortedSet var45 = var12.headSet((java.lang.Object)"");
    java.util.Collection var46 = java.util.Collections.synchronizedCollection((java.util.Collection)var12);
    java.lang.Object[] var47 = var12.toArray();
    java.lang.String var48 = var12.toString();
    boolean var49 = var5.add((java.lang.Object)var48);
    boolean var50 = var0.contains((java.lang.Object)var49);
    java.util.List var52 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var53 = new java.util.TreeSet((java.util.Collection)var52);
    java.util.NavigableSet var54 = var53.descendingSet();
    java.lang.Object var55 = java.util.Collections.min((java.util.Collection)var53);
    java.util.List var57 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var58 = new java.util.TreeSet((java.util.Collection)var57);
    java.lang.Object[] var59 = var58.toArray();
    java.util.NavigableSet var62 = var58.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var63 = var58.descendingSet();
    java.util.List var66 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var67 = java.util.Collections.max((java.util.Collection)var66);
    java.util.List var69 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var70 = new java.util.TreeSet((java.util.Collection)var69);
    java.lang.Object[] var71 = var70.toArray();
    java.util.NavigableSet var74 = var70.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var75 = var58.tailSet(var67, true);
    java.util.SortedSet var76 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var58);
    java.util.TreeSet var77 = new java.util.TreeSet((java.util.SortedSet)var58);
    java.lang.Object var78 = var77.clone();
    java.lang.Object[] var79 = new java.lang.Object[] { var77};
    java.lang.Object[] var80 = var53.toArray(var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var81 = var0.remove((java.lang.Object)var80);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + (byte)1+ "'", var14.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + (byte)1+ "'", var55.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + 0+ "'", var67.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);

  }

  public void test225() throws Throwable {

    java.util.TreeSet var0 = new java.util.TreeSet();
    java.lang.Object var2 = var0.floor((java.lang.Object)true);
    var0.clear();
    java.util.TreeSet var4 = new java.util.TreeSet((java.util.Collection)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var5 = java.util.Collections.max((java.util.Collection)var0);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test226() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.Iterator var3 = var2.iterator();
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.lang.Object[] var11 = new java.lang.Object[] { var6};
    java.lang.Object[] var12 = var2.toArray(var11);
    java.util.Enumeration var13 = java.util.Collections.enumeration((java.util.Collection)var2);
    java.util.List var15 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var16 = new java.util.TreeSet((java.util.Collection)var15);
    java.util.TreeSet var17 = new java.util.TreeSet((java.util.SortedSet)var16);
    java.lang.Object var18 = var16.pollLast();
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var25 = java.util.Collections.lastIndexOfSubList(var21, var24);
    boolean var26 = var16.removeAll((java.util.Collection)var21);
    java.util.List var29 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.Collection)var29);
    java.lang.Object[] var31 = var30.toArray();
    java.util.NavigableSet var34 = var30.headSet((java.lang.Object)10L, true);
    var30.clear();
    java.util.Map var36 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var30);
    java.lang.Object[] var37 = var30.toArray();
    java.util.List var39 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var40 = new java.util.TreeSet((java.util.Collection)var39);
    java.lang.Object[] var41 = var40.toArray();
    java.util.NavigableSet var44 = var40.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var45 = var40.descendingSet();
    boolean var46 = var30.add((java.lang.Object)var45);
    java.util.SortedSet var48 = var30.tailSet((java.lang.Object)"");
    java.util.SortedSet var49 = var16.headSet((java.lang.Object)"");
    java.util.Collection var50 = java.util.Collections.synchronizedCollection((java.util.Collection)var16);
    java.lang.Object[] var51 = var16.toArray();
    boolean var52 = java.util.Collections.disjoint((java.util.Collection)var2, (java.util.Collection)var16);
    java.util.NavigableSet var53 = var16.descendingSet();
    java.util.Set var54 = java.util.Collections.unmodifiableSet((java.util.Set)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + (byte)1+ "'", var18.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);

  }

  public void test227() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.lang.Object[] var7 = var2.toArray();
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var14 = java.util.Collections.lastIndexOfSubList(var10, var13);
    java.lang.Object var15 = java.util.Collections.min((java.util.Collection)var10);
    boolean var16 = var2.removeAll((java.util.Collection)var10);
    java.lang.Object var17 = var2.pollLast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var18 = var2.first();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 0+ "'", var15.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + (byte)1+ "'", var17.equals((byte)1));

  }

  public void test228() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    var1.clear();
    java.util.Comparator var3 = java.util.Collections.reverseOrder();
    java.util.TreeSet var4 = new java.util.TreeSet(var3);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Comparator var12 = java.util.Collections.reverseOrder();
    java.util.Comparator var13 = java.util.Collections.reverseOrder(var12);
    java.lang.Object var14 = java.util.Collections.min((java.util.Collection)var7, var12);
    int var15 = java.util.Collections.frequency((java.util.Collection)var4, (java.lang.Object)var12);
    java.util.Map var16 = java.util.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)var4);
    java.util.Set var17 = java.util.Collections.emptySet();
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    java.util.Enumeration var19 = java.util.Collections.enumeration((java.util.Collection)var18);
    java.util.Comparator var20 = var18.comparator();
    java.lang.String var21 = var18.toString();
    boolean var22 = var1.removeAll((java.util.Collection)var18);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.SortedSet)var18);
    java.lang.Object var24 = var18.pollFirst();
    java.util.NavigableSet var25 = var18.descendingSet();
    java.util.Set var26 = java.util.Collections.singleton((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 0+ "'", var14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);

  }

  public void test229() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    java.util.Enumeration var2 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.lang.Object var3 = var1.pollLast();
    java.lang.Object[] var4 = var1.toArray();
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.lang.Object[] var9 = var8.toArray();
    java.util.NavigableSet var12 = var8.headSet((java.lang.Object)10L, true);
    var8.clear();
    java.util.Map var14 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var8);
    java.util.Map var15 = java.util.Collections.synchronizedMap(var14);
    java.util.Map var16 = java.util.Collections.synchronizedMap(var14);
    java.util.Map var17 = java.util.Collections.synchronizedMap(var14);
    boolean var18 = var1.equals((java.lang.Object)var14);
    java.lang.Object var19 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);

  }

  public void test230() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java.util.NavigableSet var17 = var13.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var18 = var13.descendingSet();
    boolean var19 = var3.add((java.lang.Object)var18);
    java.util.SortedSet var21 = var3.tailSet((java.lang.Object)"");
    java.util.List var24 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    java.lang.Object var28 = var27.clone();
    java.util.Iterator var29 = var27.iterator();
    java.util.Collection var30 = java.util.Collections.unmodifiableCollection((java.util.Collection)var27);
    java.util.List var33 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var34 = new java.util.TreeSet((java.util.Collection)var33);
    java.lang.Object[] var35 = var34.toArray();
    java.util.NavigableSet var38 = var34.headSet((java.lang.Object)10L, true);
    var34.clear();
    java.util.Map var40 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var34);
    java.util.NavigableSet var41 = var34.descendingSet();
    java.lang.Object var42 = var34.pollFirst();
    java.util.List var44 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.util.TreeSet var46 = new java.util.TreeSet((java.util.SortedSet)var45);
    java.util.SortedSet var47 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var46);
    java.lang.Object var48 = var34.higher((java.lang.Object)var46);
    boolean var49 = var27.removeAll((java.util.Collection)var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.NavigableSet var50 = var3.tailSet((java.lang.Object)var24, var49);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test231() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    boolean var5 = var3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test232() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.List var8 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var9 = new java.util.TreeSet((java.util.Collection)var8);
    java.util.NavigableSet var10 = var9.descendingSet();
    boolean var11 = var2.retainAll((java.util.Collection)var10);
    java.util.Comparator var12 = java.util.Collections.reverseOrder();
    java.util.TreeSet var13 = new java.util.TreeSet(var12);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var20 = java.util.Collections.lastIndexOfSubList(var16, var19);
    boolean var21 = var13.removeAll((java.util.Collection)var16);
    java.util.Iterator var22 = var13.iterator();
    boolean var23 = var2.removeAll((java.util.Collection)var13);
    java.util.List var25 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.Collection)var25);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.SortedSet)var26);
    java.util.SortedSet var28 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var27);
    java.lang.Object var29 = var27.clone();
    java.util.Iterator var30 = var27.descendingIterator();
    java.lang.Object var31 = java.util.Collections.max((java.util.Collection)var27);
    java.util.List var33 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var34 = new java.util.TreeSet((java.util.Collection)var33);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.SortedSet)var34);
    java.util.SortedSet var36 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var35);
    java.util.Comparator var37 = java.util.Collections.reverseOrder();
    java.util.Comparator var38 = java.util.Collections.reverseOrder(var37);
    java.util.Comparator var39 = java.util.Collections.reverseOrder(var38);
    java.lang.Object var40 = java.util.Collections.min((java.util.Collection)var36, var39);
    boolean var41 = var27.add(var40);
    java.util.List var44 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.lang.Object[] var46 = var45.toArray();
    java.util.NavigableSet var49 = var45.headSet((java.lang.Object)10L, true);
    var45.clear();
    java.util.Map var51 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var45);
    java.util.List var52 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.Comparator var53 = java.util.Collections.reverseOrder();
    java.util.Map var54 = java.util.Collections.singletonMap((java.lang.Object)var52, (java.lang.Object)var53);
    boolean var55 = var27.equals((java.lang.Object)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var56 = var2.contains((java.lang.Object)var27);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + (byte)1+ "'", var31.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + (byte)1+ "'", var40.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test233() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    boolean var9 = var1.removeAll((java.util.Collection)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.<java.lang.Comparable>sort(var4);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test234() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.List var5 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var6 = new java.util.TreeSet((java.util.Collection)var5);
    java.lang.Object[] var7 = var6.toArray();
    java.util.NavigableSet var8 = var6.descendingSet();
    java.util.List var10 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var11 = new java.util.TreeSet((java.util.Collection)var10);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.SortedSet)var11);
    java.lang.Object var13 = var11.pollLast();
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var20 = java.util.Collections.lastIndexOfSubList(var16, var19);
    boolean var21 = var11.removeAll((java.util.Collection)var16);
    java.util.List var24 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.lang.Object[] var26 = var25.toArray();
    java.util.NavigableSet var29 = var25.headSet((java.lang.Object)10L, true);
    var25.clear();
    java.util.Map var31 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var25);
    java.lang.Object[] var32 = var25.toArray();
    java.util.List var34 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.Collection)var34);
    java.lang.Object[] var36 = var35.toArray();
    java.util.NavigableSet var39 = var35.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var40 = var35.descendingSet();
    boolean var41 = var25.add((java.lang.Object)var40);
    java.util.SortedSet var43 = var25.tailSet((java.lang.Object)"");
    java.util.SortedSet var44 = var11.headSet((java.lang.Object)"");
    java.util.SortedSet var45 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var11);
    boolean var46 = var6.addAll((java.util.Collection)var45);
    boolean var47 = var2.equals((java.lang.Object)var46);
    java.lang.Object[] var48 = var2.toArray();
    java.util.Set var49 = java.util.Collections.synchronizedSet((java.util.Set)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + (byte)1+ "'", var13.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);

  }

  public void test235() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var14);
    boolean var16 = var2.removeAll((java.util.Collection)var14);
    boolean var17 = var2.isEmpty();
    java.util.Set var18 = java.util.Collections.synchronizedSet((java.util.Set)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);

  }

  public void test236() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.TreeSet var5 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var6 = var2.toArray();
    java.util.Comparator var7 = var2.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);

  }

  public void test237() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var6 = var2.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var7 = var2.descendingSet();
    java.util.Collection var8 = java.util.Collections.synchronizedCollection((java.util.Collection)var2);
    java.util.SortedSet var9 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var2);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.util.Iterator var13 = var12.iterator();
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var20 = java.util.Collections.lastIndexOfSubList(var16, var19);
    java.lang.Object[] var21 = new java.lang.Object[] { var16};
    java.lang.Object[] var22 = var12.toArray(var21);
    java.util.Comparator var24 = java.util.Collections.reverseOrder();
    java.util.TreeSet var25 = new java.util.TreeSet(var24);
    java.util.List var28 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var31 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var32 = java.util.Collections.lastIndexOfSubList(var28, var31);
    boolean var33 = var25.removeAll((java.util.Collection)var28);
    java.util.NavigableSet var34 = var12.tailSet((java.lang.Object)10.0d, var33);
    java.util.List var36 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var37 = new java.util.TreeSet((java.util.Collection)var36);
    java.util.TreeSet var38 = new java.util.TreeSet((java.util.SortedSet)var37);
    java.lang.Object var39 = var37.pollLast();
    java.util.List var42 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var45 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var46 = java.util.Collections.lastIndexOfSubList(var42, var45);
    boolean var47 = var37.removeAll((java.util.Collection)var42);
    java.util.List var50 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var51 = new java.util.TreeSet((java.util.Collection)var50);
    java.lang.Object[] var52 = var51.toArray();
    java.util.NavigableSet var55 = var51.headSet((java.lang.Object)10L, true);
    var51.clear();
    java.util.Map var57 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var51);
    java.lang.Object[] var58 = var51.toArray();
    java.util.List var60 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var61 = new java.util.TreeSet((java.util.Collection)var60);
    java.lang.Object[] var62 = var61.toArray();
    java.util.NavigableSet var65 = var61.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var66 = var61.descendingSet();
    boolean var67 = var51.add((java.lang.Object)var66);
    java.util.SortedSet var69 = var51.tailSet((java.lang.Object)"");
    java.util.SortedSet var70 = var37.headSet((java.lang.Object)"");
    java.util.TreeSet var71 = new java.util.TreeSet(var70);
    boolean var72 = var12.removeAll((java.util.Collection)var70);
    java.util.TreeSet var73 = new java.util.TreeSet((java.util.Collection)var12);
    boolean var74 = var2.retainAll((java.util.Collection)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + (byte)1+ "'", var39.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test238() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java.util.NavigableSet var4 = var2.descendingSet();
    java.lang.String var5 = var2.toString();
    java.util.List var6 = java.util.Collections.emptyList();
    java.util.Set var7 = java.util.Collections.emptySet();
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.util.NavigableSet var9 = var8.descendingSet();
    int var10 = java.util.Collections.binarySearch(var6, (java.lang.Object)var8);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 100);
    java.util.Collections.rotate(var6, 100);
    boolean var17 = var2.addAll((java.util.Collection)var6);
    java.lang.String var18 = var2.toString();
    java.lang.Object var19 = var2.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[1]"+ "'", var5.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[1]"+ "'", var18.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + (byte)1+ "'", var19.equals((byte)1));

  }

  public void test239() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.lang.Object var4 = var2.pollLast();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));

  }

  public void test240() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.util.List var10 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.List var13 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var13, 0);
    java.util.List var20 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var20, 0);
    java.util.Collections.rotate(var13, 0);
    java.util.Enumeration var26 = java.util.Collections.enumeration((java.util.Collection)var13);
    java.util.ArrayList var27 = java.util.Collections.list(var26);
    java.util.Collections.swap((java.util.List)var27, 1, 0);
    java.util.Collections.shuffle((java.util.List)var27);
    java.util.List var34 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.Collection)var34);
    java.lang.Object[] var36 = var35.toArray();
    java.util.NavigableSet var39 = var35.headSet((java.lang.Object)10L, true);
    var35.clear();
    java.util.Map var41 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var35);
    java.lang.Object[] var42 = var35.toArray();
    java.util.List var44 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.lang.Object[] var46 = var45.toArray();
    java.util.NavigableSet var49 = var45.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var50 = var45.descendingSet();
    boolean var51 = var35.add((java.lang.Object)var50);
    boolean var52 = var27.containsAll((java.util.Collection)var50);
    java.util.Collection var53 = java.util.Collections.unmodifiableCollection((java.util.Collection)var27);
    int var54 = java.util.Collections.lastIndexOfSubList(var10, (java.util.List)var27);
    java.util.List var57 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var60 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var61 = java.util.Collections.lastIndexOfSubList(var57, var60);
    java.util.List var64 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var67 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var64, 0);
    java.util.List var71 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var74 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var71, 0);
    java.util.Collections.rotate(var64, 0);
    java.util.Enumeration var77 = java.util.Collections.enumeration((java.util.Collection)var64);
    java.util.Collection var78 = java.util.Collections.synchronizedCollection((java.util.Collection)var64);
    int var79 = java.util.Collections.indexOfSubList(var60, var64);
    boolean var80 = var27.containsAll((java.util.Collection)var60);
    java.util.List var83 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var83, 100);
    java.util.Collection var86 = java.util.Collections.synchronizedCollection((java.util.Collection)var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collections.copy(var60, var83);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);

  }

  public void test241() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java.util.Iterator var6 = var3.descendingIterator();
    java.lang.Object var7 = java.util.Collections.max((java.util.Collection)var3);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.util.TreeSet var11 = new java.util.TreeSet((java.util.SortedSet)var10);
    java.util.SortedSet var12 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var11);
    java.util.Comparator var13 = java.util.Collections.reverseOrder();
    java.util.Comparator var14 = java.util.Collections.reverseOrder(var13);
    java.util.Comparator var15 = java.util.Collections.reverseOrder(var14);
    java.lang.Object var16 = java.util.Collections.min((java.util.Collection)var12, var15);
    boolean var17 = var3.add(var16);
    java.util.Iterator var18 = var3.iterator();
    java.util.List var20 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.SortedSet)var21);
    java.util.SortedSet var23 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var22);
    java.lang.Object var24 = var22.clone();
    java.util.Iterator var25 = var22.descendingIterator();
    boolean var26 = var3.removeAll((java.util.Collection)var22);
    java.util.Iterator var27 = var22.descendingIterator();
    java.util.List var29 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.Collection)var29);
    java.lang.Object var31 = var30.clone();
    java.util.Set var32 = java.util.Collections.unmodifiableSet((java.util.Set)var30);
    boolean var33 = var22.removeAll((java.util.Collection)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + (byte)1+ "'", var16.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test242() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    java.util.Comparator var9 = java.util.Collections.reverseOrder();
    java.util.Comparator var10 = java.util.Collections.reverseOrder(var9);
    java.lang.Object var11 = java.util.Collections.min((java.util.Collection)var4, var9);
    java.util.TreeSet var12 = new java.util.TreeSet(var9);
    java.lang.String var13 = var12.toString();
    java.util.List var16 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var17 = new java.util.TreeSet((java.util.Collection)var16);
    java.lang.Object[] var18 = var17.toArray();
    java.util.NavigableSet var21 = var17.headSet((java.lang.Object)10L, true);
    var17.clear();
    java.util.Map var23 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var17);
    java.lang.Object var25 = var17.lower((java.lang.Object)'#');
    boolean var26 = var12.equals((java.lang.Object)var17);
    java.util.List var27 = java.util.Collections.emptyList();
    java.util.Set var28 = java.util.Collections.emptySet();
    java.util.TreeSet var29 = new java.util.TreeSet((java.util.Collection)var28);
    java.util.NavigableSet var30 = var29.descendingSet();
    int var31 = java.util.Collections.binarySearch(var27, (java.lang.Object)var29);
    java.util.List var33 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var34 = new java.util.TreeSet((java.util.Collection)var33);
    boolean var35 = java.util.Collections.disjoint((java.util.Collection)var27, (java.util.Collection)var33);
    java.util.Set var36 = java.util.Collections.singleton((java.lang.Object)var27);
    java.util.Collections.reverse(var27);
    java.util.List var38 = java.util.Collections.emptyList();
    java.util.Set var39 = java.util.Collections.emptySet();
    java.util.TreeSet var40 = new java.util.TreeSet((java.util.Collection)var39);
    java.util.NavigableSet var41 = var40.descendingSet();
    int var42 = java.util.Collections.binarySearch(var38, (java.lang.Object)var40);
    java.util.List var44 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    boolean var46 = java.util.Collections.disjoint((java.util.Collection)var38, (java.util.Collection)var44);
    java.util.Set var47 = java.util.Collections.singleton((java.lang.Object)var38);
    java.util.Collections.reverse(var38);
    int var49 = java.util.Collections.indexOfSubList(var27, var38);
    java.util.List var51 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var52 = new java.util.TreeSet((java.util.Collection)var51);
    java.util.TreeSet var53 = new java.util.TreeSet((java.util.SortedSet)var52);
    java.lang.Object[] var54 = var52.toArray();
    int var55 = java.util.Collections.binarySearch(var27, (java.lang.Object)var54);
    boolean var56 = var12.contains((java.lang.Object)var27);
    java.util.Collections.copy(var1, var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 0+ "'", var11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test243() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.Iterator var3 = var2.iterator();
    java.util.Collection var4 = java.util.Collections.unmodifiableCollection((java.util.Collection)var2);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.List var14 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var15 = java.util.Collections.indexOfSubList(var7, var14);
    java.util.List var16 = java.util.Collections.emptyList();
    java.util.Set var17 = java.util.Collections.emptySet();
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    java.util.NavigableSet var19 = var18.descendingSet();
    int var20 = java.util.Collections.binarySearch(var16, (java.lang.Object)var18);
    java.util.List var22 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.Collection)var22);
    boolean var24 = java.util.Collections.disjoint((java.util.Collection)var16, (java.util.Collection)var22);
    java.util.Set var25 = java.util.Collections.singleton((java.lang.Object)var16);
    int var26 = java.util.Collections.indexOfSubList(var7, var16);
    java.util.Collection var27 = java.util.Collections.unmodifiableCollection((java.util.Collection)var16);
    boolean var28 = var2.containsAll(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test244() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    boolean var9 = var1.removeAll((java.util.Collection)var4);
    java.util.List var10 = java.util.Collections.emptyList();
    java.util.Set var11 = java.util.Collections.emptySet();
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.util.NavigableSet var13 = var12.descendingSet();
    int var14 = java.util.Collections.binarySearch(var10, (java.lang.Object)var12);
    java.util.List var16 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var17 = new java.util.TreeSet((java.util.Collection)var16);
    boolean var18 = java.util.Collections.disjoint((java.util.Collection)var10, (java.util.Collection)var16);
    java.util.Set var19 = java.util.Collections.singleton((java.lang.Object)var10);
    java.util.List var21 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.lang.Object[] var23 = var22.toArray();
    java.util.NavigableSet var26 = var22.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var27 = var22.descendingSet();
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.SortedSet)var22);
    int var29 = java.util.Collections.frequency((java.util.Collection)var10, (java.lang.Object)var28);
    java.util.Set var31 = java.util.Collections.singleton((java.lang.Object)10L);
    boolean var32 = var28.retainAll((java.util.Collection)var31);
    java.util.TreeSet var33 = new java.util.TreeSet((java.util.SortedSet)var28);
    boolean var34 = var1.add((java.lang.Object)var28);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.SortedSet)var28);
    java.lang.Object[] var36 = var28.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);

  }

  public void test245() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.lang.Object var4 = var2.pollLast();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    boolean var12 = var2.removeAll((java.util.Collection)var7);
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.Enumeration var15 = java.util.Collections.enumeration((java.util.Collection)var14);
    boolean var16 = var2.removeAll((java.util.Collection)var14);
    java.lang.Object var18 = var2.ceiling((java.lang.Object)0);
    java.util.SortedSet var19 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var2);
    java.util.List var20 = java.util.Collections.emptyList();
    java.util.Set var21 = java.util.Collections.emptySet();
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.util.NavigableSet var23 = var22.descendingSet();
    int var24 = java.util.Collections.binarySearch(var20, (java.lang.Object)var22);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    boolean var28 = java.util.Collections.disjoint((java.util.Collection)var20, (java.util.Collection)var26);
    java.util.Set var29 = java.util.Collections.singleton((java.lang.Object)var20);
    boolean var30 = var2.addAll((java.util.Collection)var20);
    java.util.Iterator var31 = var2.descendingIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (byte)1+ "'", var4.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);

  }

  public void test246() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.List var3 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var7 = java.util.Collections.lastIndexOfSubList(var3, var6);
    java.util.List var10 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var11 = java.util.Collections.indexOfSubList(var3, var10);
    java.util.List var14 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var17 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var14, 0);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var21, 0);
    java.util.Collections.rotate(var14, 0);
    java.util.Enumeration var27 = java.util.Collections.enumeration((java.util.Collection)var14);
    java.util.Collection var28 = java.util.Collections.synchronizedCollection((java.util.Collection)var14);
    int var29 = java.util.Collections.indexOfSubList(var3, var14);
    java.util.Collections.rotate(var3, 0);
    int var32 = java.util.Collections.binarySearch(var0, (java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));

  }

  public void test247() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.lang.Object var11 = var3.pollFirst();
    java.util.SortedSet var12 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.TreeSet var13 = new java.util.TreeSet();
    java.util.Set var14 = java.util.Collections.emptySet();
    boolean var15 = var13.removeAll((java.util.Collection)var14);
    boolean var16 = var3.removeAll((java.util.Collection)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test248() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder();
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.TreeSet var10 = new java.util.TreeSet(var7);
    java.lang.String var11 = var10.toString();
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.SortedSet)var10);
    java.util.Collection var13 = java.util.Collections.synchronizedCollection((java.util.Collection)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);

  }

  public void test249() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java.util.Iterator var6 = var3.descendingIterator();
    java.lang.Object var7 = java.util.Collections.max((java.util.Collection)var3);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.util.TreeSet var11 = new java.util.TreeSet((java.util.SortedSet)var10);
    java.util.SortedSet var12 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var11);
    java.util.Comparator var13 = java.util.Collections.reverseOrder();
    java.util.Comparator var14 = java.util.Collections.reverseOrder(var13);
    java.util.Comparator var15 = java.util.Collections.reverseOrder(var14);
    java.lang.Object var16 = java.util.Collections.min((java.util.Collection)var12, var15);
    boolean var17 = var3.add(var16);
    java.util.List var20 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var21 = new java.util.TreeSet((java.util.Collection)var20);
    java.lang.Object[] var22 = var21.toArray();
    java.util.NavigableSet var25 = var21.headSet((java.lang.Object)10L, true);
    var21.clear();
    java.util.Map var27 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var21);
    java.util.List var28 = java.util.Collections.singletonList((java.lang.Object)10.0d);
    java.util.Comparator var29 = java.util.Collections.reverseOrder();
    java.util.Map var30 = java.util.Collections.singletonMap((java.lang.Object)var28, (java.lang.Object)var29);
    boolean var31 = var3.equals((java.lang.Object)var28);
    java.util.List var32 = java.util.Collections.singletonList((java.lang.Object)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + (byte)1+ "'", var16.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);

  }

  public void test250() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.pollLast();
    java.util.List var7 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var8 = new java.util.TreeSet((java.util.Collection)var7);
    java.lang.Object var9 = var8.clone();
    java.util.Iterator var10 = var8.iterator();
    java.util.Collection var11 = java.util.Collections.unmodifiableCollection((java.util.Collection)var8);
    java.lang.Object var12 = var8.pollLast();
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    var14.clear();
    boolean var16 = var8.retainAll((java.util.Collection)var14);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var19, 100);
    java.util.Set var22 = java.util.Collections.emptySet();
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.Collection)var22);
    java.util.Enumeration var24 = java.util.Collections.enumeration((java.util.Collection)var23);
    java.util.List var25 = java.util.Collections.nCopies(100, (java.lang.Object)var24);
    boolean var26 = var14.add((java.lang.Object)var25);
    boolean var27 = var3.addAll((java.util.Collection)var14);
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.SortedSet)var14);
    int var29 = var28.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + (byte)1+ "'", var5.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + (byte)1+ "'", var12.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);

  }

  public void test251() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java.util.NavigableSet var17 = var13.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var18 = var13.descendingSet();
    boolean var19 = var3.add((java.lang.Object)var18);
    java.util.TreeSet var20 = new java.util.TreeSet((java.util.SortedSet)var18);
    java.lang.Object[] var21 = var20.toArray();
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);

  }

  public void test252() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java.util.NavigableSet var17 = var13.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var18 = var13.descendingSet();
    boolean var19 = var3.add((java.lang.Object)var18);
    java.util.Set var20 = java.util.Collections.singleton((java.lang.Object)var3);
    java.util.Set var21 = java.util.Collections.unmodifiableSet(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);

  }

  public void test253() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var16, 0);
    java.util.Collections.rotate(var9, 0);
    java.util.Enumeration var22 = java.util.Collections.enumeration((java.util.Collection)var9);
    java.util.Collection var23 = java.util.Collections.synchronizedCollection((java.util.Collection)var9);
    int var24 = java.util.Collections.indexOfSubList(var5, var9);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    int var27 = java.util.Collections.lastIndexOfSubList(var5, var26);
    java.util.List var30 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var33 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var34 = java.util.Collections.lastIndexOfSubList(var30, var33);
    int var35 = java.util.Collections.indexOfSubList(var26, var33);
    java.util.List var36 = java.util.Collections.synchronizedList(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);

  }

  public void test254() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    java.util.Enumeration var2 = java.util.Collections.enumeration((java.util.Collection)var1);
    java.lang.Object var3 = var1.pollLast();
    java.lang.Object[] var4 = var1.toArray();
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var7, 0);
    java.util.List var14 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var17 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var14, 0);
    java.util.Collections.rotate(var7, 0);
    java.util.Enumeration var20 = java.util.Collections.enumeration((java.util.Collection)var7);
    java.util.ArrayList var21 = java.util.Collections.list(var20);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var27 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var28 = java.util.Collections.lastIndexOfSubList(var24, var27);
    java.util.Comparator var29 = java.util.Collections.reverseOrder();
    java.util.Comparator var30 = java.util.Collections.reverseOrder(var29);
    java.lang.Object var31 = java.util.Collections.min((java.util.Collection)var24, var29);
    java.util.TreeSet var32 = new java.util.TreeSet(var29);
    java.util.Collections.fill((java.util.List)var21, (java.lang.Object)var29);
    java.util.List var35 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var36 = new java.util.TreeSet((java.util.Collection)var35);
    java.lang.Object[] var37 = var36.toArray();
    java.util.Set var38 = java.util.Collections.emptySet();
    java.util.TreeSet var39 = new java.util.TreeSet((java.util.Collection)var38);
    java.util.Enumeration var40 = java.util.Collections.enumeration((java.util.Collection)var39);
    java.lang.Object var42 = var39.lower((java.lang.Object)(short)(-1));
    boolean var43 = var36.removeAll((java.util.Collection)var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.NavigableSet var44 = var1.tailSet((java.lang.Object)var21, var43);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + 0+ "'", var31.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test255() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    java.util.Comparator var9 = java.util.Collections.reverseOrder();
    java.util.Comparator var10 = java.util.Collections.reverseOrder(var9);
    java.lang.Object var11 = java.util.Collections.min((java.util.Collection)var4, var9);
    int var12 = java.util.Collections.frequency((java.util.Collection)var1, (java.lang.Object)var9);
    java.util.List var14 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var15 = new java.util.TreeSet((java.util.Collection)var14);
    java.lang.Object[] var16 = var15.toArray();
    java.util.NavigableSet var19 = var15.headSet((java.lang.Object)10L, true);
    int var20 = var15.size();
    java.lang.Object var21 = var15.clone();
    java.lang.Object[] var22 = var15.toArray();
    java.lang.Object var23 = var1.ceiling((java.lang.Object)var15);
    java.util.List var24 = java.util.Collections.emptyList();
    java.util.Set var25 = java.util.Collections.emptySet();
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.Collection)var25);
    java.util.NavigableSet var27 = var26.descendingSet();
    int var28 = java.util.Collections.binarySearch(var24, (java.lang.Object)var26);
    java.util.List var30 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    boolean var32 = java.util.Collections.disjoint((java.util.Collection)var24, (java.util.Collection)var30);
    java.util.Set var33 = java.util.Collections.singleton((java.lang.Object)var24);
    java.util.Collections.reverse(var24);
    java.util.List var35 = java.util.Collections.emptyList();
    java.util.Set var36 = java.util.Collections.emptySet();
    java.util.TreeSet var37 = new java.util.TreeSet((java.util.Collection)var36);
    java.util.NavigableSet var38 = var37.descendingSet();
    int var39 = java.util.Collections.binarySearch(var35, (java.lang.Object)var37);
    java.util.List var41 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var42 = new java.util.TreeSet((java.util.Collection)var41);
    boolean var43 = java.util.Collections.disjoint((java.util.Collection)var35, (java.util.Collection)var41);
    java.util.Set var44 = java.util.Collections.singleton((java.lang.Object)var35);
    java.util.Collections.reverse(var35);
    int var46 = java.util.Collections.indexOfSubList(var24, var35);
    java.util.Enumeration var47 = java.util.Collections.enumeration((java.util.Collection)var35);
    java.util.ArrayList var48 = java.util.Collections.list(var47);
    java.util.Collections.<java.lang.Comparable>sort((java.util.List)var48);
    java.util.List var52 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var55 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var56 = java.util.Collections.lastIndexOfSubList(var52, var55);
    java.util.List var59 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var60 = java.util.Collections.indexOfSubList(var52, var59);
    java.util.Collection var61 = java.util.Collections.synchronizedCollection((java.util.Collection)var52);
    java.util.Set var62 = java.util.Collections.emptySet();
    java.util.TreeSet var63 = new java.util.TreeSet((java.util.Collection)var62);
    var63.clear();
    java.util.Comparator var65 = java.util.Collections.reverseOrder();
    java.util.TreeSet var66 = new java.util.TreeSet(var65);
    java.util.List var69 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var72 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var73 = java.util.Collections.lastIndexOfSubList(var69, var72);
    java.util.Comparator var74 = java.util.Collections.reverseOrder();
    java.util.Comparator var75 = java.util.Collections.reverseOrder(var74);
    java.lang.Object var76 = java.util.Collections.min((java.util.Collection)var69, var74);
    int var77 = java.util.Collections.frequency((java.util.Collection)var66, (java.lang.Object)var74);
    java.util.Map var78 = java.util.Collections.singletonMap((java.lang.Object)var63, (java.lang.Object)var66);
    java.util.Set var79 = java.util.Collections.emptySet();
    java.util.TreeSet var80 = new java.util.TreeSet((java.util.Collection)var79);
    java.util.Enumeration var81 = java.util.Collections.enumeration((java.util.Collection)var80);
    java.util.Comparator var82 = var80.comparator();
    java.lang.String var83 = var80.toString();
    boolean var84 = var63.removeAll((java.util.Collection)var80);
    java.util.TreeSet var85 = new java.util.TreeSet((java.util.SortedSet)var80);
    java.lang.Object var86 = var80.pollFirst();
    boolean var87 = java.util.Collections.replaceAll((java.util.List)var48, (java.lang.Object)var61, (java.lang.Object)var80);
    boolean var88 = var15.containsAll((java.util.Collection)var48);
    java.util.List var89 = java.util.Collections.singletonList((java.lang.Object)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 0+ "'", var11.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + 0+ "'", var76.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "[]"+ "'", var83.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);

  }

  public void test256() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var8 = java.util.Collections.max((java.util.Collection)var7);
    java.util.List var10 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Set var12 = java.util.Collections.emptySet();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    var13.clear();
    java.util.Comparator var15 = java.util.Collections.reverseOrder();
    java.util.TreeSet var16 = new java.util.TreeSet(var15);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var22 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var23 = java.util.Collections.lastIndexOfSubList(var19, var22);
    java.util.Comparator var24 = java.util.Collections.reverseOrder();
    java.util.Comparator var25 = java.util.Collections.reverseOrder(var24);
    java.lang.Object var26 = java.util.Collections.min((java.util.Collection)var19, var24);
    int var27 = java.util.Collections.frequency((java.util.Collection)var16, (java.lang.Object)var24);
    java.util.Map var28 = java.util.Collections.singletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    java.util.Set var29 = java.util.Collections.emptySet();
    java.util.TreeSet var30 = new java.util.TreeSet((java.util.Collection)var29);
    java.util.Enumeration var31 = java.util.Collections.enumeration((java.util.Collection)var30);
    java.util.Comparator var32 = var30.comparator();
    java.lang.String var33 = var30.toString();
    boolean var34 = var13.removeAll((java.util.Collection)var30);
    java.util.TreeSet var35 = new java.util.TreeSet((java.util.SortedSet)var30);
    java.lang.Object var36 = var30.pollFirst();
    java.util.List var38 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var39 = new java.util.TreeSet((java.util.Collection)var38);
    java.util.TreeSet var40 = new java.util.TreeSet((java.util.SortedSet)var39);
    java.util.SortedSet var41 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var40);
    java.util.Comparator var42 = java.util.Collections.reverseOrder();
    java.util.Comparator var43 = java.util.Collections.reverseOrder(var42);
    java.util.Comparator var44 = java.util.Collections.reverseOrder(var43);
    java.lang.Object var45 = java.util.Collections.min((java.util.Collection)var41, var44);
    java.util.Comparator var46 = java.util.Collections.reverseOrder(var44);
    java.util.Comparator var47 = java.util.Collections.reverseOrder(var44);
    java.lang.Object var48 = var30.ceiling((java.lang.Object)var44);
    int var49 = java.util.Collections.binarySearch(var0, (java.lang.Object)var7, var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 0+ "'", var8.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 0+ "'", var26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + (byte)1+ "'", var45.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));

  }

  public void test257() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.lang.Object var3 = var2.clone();
    java.util.List var6 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var10 = java.util.Collections.lastIndexOfSubList(var6, var9);
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.SortedSet)var13);
    java.util.SortedSet var15 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var14);
    java.lang.Object var16 = var14.clone();
    java.util.Iterator var17 = var14.descendingIterator();
    java.lang.Object var18 = java.util.Collections.max((java.util.Collection)var14);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var14);
    java.util.List var20 = java.util.Collections.nCopies(var10, (java.lang.Object)var14);
    boolean var21 = var2.containsAll((java.util.Collection)var14);
    java.util.List var24 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var27 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var28 = java.util.Collections.lastIndexOfSubList(var24, var27);
    java.util.Comparator var29 = java.util.Collections.reverseOrder();
    java.util.Comparator var30 = java.util.Collections.reverseOrder(var29);
    java.lang.Object var31 = java.util.Collections.min((java.util.Collection)var24, var29);
    java.util.Comparator var32 = java.util.Collections.reverseOrder(var29);
    java.lang.Object var33 = java.util.Collections.min((java.util.Collection)var2, var32);
    java.util.Comparator var34 = java.util.Collections.reverseOrder(var32);
    java.util.Comparator var35 = java.util.Collections.reverseOrder(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + (byte)1+ "'", var18.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + 0+ "'", var31.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + (byte)1+ "'", var33.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);

  }

  public void test258() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object var11 = var3.lower((java.lang.Object)'#');
    java.util.List var12 = java.util.Collections.emptyList();
    java.util.Set var13 = java.util.Collections.emptySet();
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.Collection)var13);
    java.util.NavigableSet var15 = var14.descendingSet();
    int var16 = java.util.Collections.binarySearch(var12, (java.lang.Object)var14);
    java.util.List var18 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.Collection)var18);
    boolean var20 = java.util.Collections.disjoint((java.util.Collection)var12, (java.util.Collection)var18);
    java.lang.Object var21 = var3.higher((java.lang.Object)var20);
    var3.clear();
    java.util.List var24 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.lang.Object[] var26 = var25.toArray();
    java.util.NavigableSet var29 = var25.headSet((java.lang.Object)10L, true);
    java.util.List var31 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var32 = new java.util.TreeSet((java.util.Collection)var31);
    java.util.NavigableSet var33 = var32.descendingSet();
    boolean var34 = var25.retainAll((java.util.Collection)var33);
    java.util.List var36 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var37 = new java.util.TreeSet((java.util.Collection)var36);
    java.lang.Object[] var38 = var37.toArray();
    java.util.NavigableSet var41 = var37.headSet((java.lang.Object)10L, true);
    int var42 = var37.size();
    java.util.List var44 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.lang.Object[] var46 = var45.toArray();
    java.util.NavigableSet var49 = var45.headSet((java.lang.Object)10L, true);
    int var50 = var45.size();
    java.util.List var51 = java.util.Collections.nCopies(var42, (java.lang.Object)var50);
    java.util.Collection var52 = java.util.Collections.synchronizedCollection((java.util.Collection)var51);
    java.util.Comparator var53 = java.util.Collections.reverseOrder();
    java.util.TreeSet var54 = new java.util.TreeSet(var53);
    java.util.Comparator var55 = java.util.Collections.reverseOrder(var53);
    java.util.TreeSet var56 = new java.util.TreeSet(var53);
    java.lang.Object var57 = java.util.Collections.max((java.util.Collection)var51, var53);
    java.lang.Object var58 = java.util.Collections.min((java.util.Collection)var33, var53);
    java.util.Set var59 = java.util.Collections.emptySet();
    java.util.TreeSet var60 = new java.util.TreeSet((java.util.Collection)var59);
    java.util.Enumeration var61 = java.util.Collections.enumeration((java.util.Collection)var60);
    java.lang.String var62 = var60.toString();
    java.util.List var64 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var65 = new java.util.TreeSet((java.util.Collection)var64);
    java.lang.Object[] var66 = var65.toArray();
    java.util.NavigableSet var69 = var65.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var70 = var65.descendingSet();
    java.lang.String var71 = var65.toString();
    java.lang.Object var72 = var60.lower((java.lang.Object)var65);
    java.util.List var74 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var75 = new java.util.TreeSet((java.util.Collection)var74);
    java.lang.Object[] var76 = var75.toArray();
    java.util.NavigableSet var79 = var75.headSet((java.lang.Object)10L, true);
    java.util.SortedSet var80 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var75);
    java.util.List var82 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var83 = new java.util.TreeSet((java.util.Collection)var82);
    java.util.TreeSet var84 = new java.util.TreeSet((java.util.SortedSet)var83);
    java.lang.Object var85 = var83.pollLast();
    java.util.TreeSet var86 = new java.util.TreeSet((java.util.Collection)var83);
    java.util.NavigableSet var87 = var83.descendingSet();
    boolean var88 = var75.removeAll((java.util.Collection)var87);
    boolean var89 = var65.addAll((java.util.Collection)var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.NavigableSet var90 = var3.headSet((java.lang.Object)var53, var89);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + 1+ "'", var57.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + (byte)1+ "'", var58.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "[]"+ "'", var62.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[1]"+ "'", var71.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + (byte)1+ "'", var85.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test259() throws Throwable {

    java.util.List var2 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var5 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var6 = java.util.Collections.lastIndexOfSubList(var2, var5);
    java.util.Comparator var7 = java.util.Collections.reverseOrder();
    java.util.Comparator var8 = java.util.Collections.reverseOrder(var7);
    java.lang.Object var9 = java.util.Collections.min((java.util.Collection)var2, var7);
    java.util.TreeSet var10 = new java.util.TreeSet(var7);
    java.util.List var12 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.TreeSet var14 = new java.util.TreeSet((java.util.SortedSet)var13);
    java.lang.Object var15 = var13.pollLast();
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var21 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var22 = java.util.Collections.lastIndexOfSubList(var18, var21);
    boolean var23 = var13.removeAll((java.util.Collection)var18);
    java.util.Set var24 = java.util.Collections.emptySet();
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.util.Enumeration var26 = java.util.Collections.enumeration((java.util.Collection)var25);
    boolean var27 = var13.removeAll((java.util.Collection)var25);
    boolean var28 = var13.isEmpty();
    java.util.Comparator var29 = var13.comparator();
    boolean var30 = var13.isEmpty();
    java.lang.Object var31 = var10.higher((java.lang.Object)var30);
    java.util.SortedSet var32 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var10);
    java.util.Iterator var33 = var10.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 0+ "'", var9.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + (byte)1+ "'", var15.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);

  }

  public void test260() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    java.lang.Object var8 = var7.clone();
    java.util.List var11 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var14 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var15 = java.util.Collections.lastIndexOfSubList(var11, var14);
    java.util.List var17 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    java.util.TreeSet var19 = new java.util.TreeSet((java.util.SortedSet)var18);
    java.util.SortedSet var20 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var19);
    java.lang.Object var21 = var19.clone();
    java.util.Iterator var22 = var19.descendingIterator();
    java.lang.Object var23 = java.util.Collections.max((java.util.Collection)var19);
    java.util.TreeSet var24 = new java.util.TreeSet((java.util.Collection)var19);
    java.util.List var25 = java.util.Collections.nCopies(var15, (java.lang.Object)var19);
    boolean var26 = var7.containsAll((java.util.Collection)var19);
    java.util.List var29 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var32 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var33 = java.util.Collections.lastIndexOfSubList(var29, var32);
    java.util.Comparator var34 = java.util.Collections.reverseOrder();
    java.util.Comparator var35 = java.util.Collections.reverseOrder(var34);
    java.lang.Object var36 = java.util.Collections.min((java.util.Collection)var29, var34);
    java.util.Comparator var37 = java.util.Collections.reverseOrder(var34);
    java.lang.Object var38 = java.util.Collections.min((java.util.Collection)var7, var37);
    boolean var39 = var3.addAll((java.util.Collection)var7);
    java.util.Set var40 = java.util.Collections.emptySet();
    java.util.TreeSet var41 = new java.util.TreeSet((java.util.Collection)var40);
    java.util.List var44 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var45 = new java.util.TreeSet((java.util.Collection)var44);
    java.lang.Object[] var46 = var45.toArray();
    java.util.NavigableSet var49 = var45.headSet((java.lang.Object)10L, true);
    var45.clear();
    java.util.Map var51 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var45);
    java.lang.Object[] var52 = var45.toArray();
    boolean var53 = var41.removeAll((java.util.Collection)var45);
    boolean var54 = var7.addAll((java.util.Collection)var41);
    java.util.List var56 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var57 = new java.util.TreeSet((java.util.Collection)var56);
    java.lang.Object[] var58 = var57.toArray();
    java.util.NavigableSet var59 = var57.descendingSet();
    java.lang.Object[] var60 = var57.toArray();
    java.lang.Object var61 = var57.last();
    java.util.List var62 = java.util.Collections.emptyList();
    java.util.Set var63 = java.util.Collections.emptySet();
    java.util.TreeSet var64 = new java.util.TreeSet((java.util.Collection)var63);
    java.util.NavigableSet var65 = var64.descendingSet();
    int var66 = java.util.Collections.binarySearch(var62, (java.lang.Object)var64);
    java.util.Comparator var67 = java.util.Collections.reverseOrder();
    java.util.Comparator var68 = java.util.Collections.reverseOrder(var67);
    java.util.Collections.sort(var62, var67);
    java.lang.Object var70 = java.util.Collections.min((java.util.Collection)var57, var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var71 = java.util.Collections.min((java.util.Collection)var41, var67);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + (byte)1+ "'", var23.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 0+ "'", var36.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + (byte)1+ "'", var38.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + (byte)1+ "'", var61.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + (byte)1+ "'", var70.equals((byte)1));

  }

  public void test261() throws Throwable {

    java.util.Set var0 = java.util.Collections.emptySet();
    java.util.TreeSet var1 = new java.util.TreeSet((java.util.Collection)var0);
    var1.clear();
    java.util.Comparator var3 = java.util.Collections.reverseOrder();
    java.util.TreeSet var4 = new java.util.TreeSet(var3);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var10 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var11 = java.util.Collections.lastIndexOfSubList(var7, var10);
    java.util.Comparator var12 = java.util.Collections.reverseOrder();
    java.util.Comparator var13 = java.util.Collections.reverseOrder(var12);
    java.lang.Object var14 = java.util.Collections.min((java.util.Collection)var7, var12);
    int var15 = java.util.Collections.frequency((java.util.Collection)var4, (java.lang.Object)var12);
    java.util.Map var16 = java.util.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)var4);
    java.util.Set var17 = java.util.Collections.emptySet();
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    java.util.Enumeration var19 = java.util.Collections.enumeration((java.util.Collection)var18);
    java.util.Comparator var20 = var18.comparator();
    java.lang.String var21 = var18.toString();
    boolean var22 = var1.removeAll((java.util.Collection)var18);
    var18.clear();
    java.util.NavigableSet var24 = var18.descendingSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 0+ "'", var14.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);

  }

  public void test262() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java.util.Iterator var6 = var3.descendingIterator();
    java.lang.Object var7 = java.util.Collections.max((java.util.Collection)var3);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.util.TreeSet var11 = new java.util.TreeSet((java.util.SortedSet)var10);
    java.util.SortedSet var12 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var11);
    java.util.Comparator var13 = java.util.Collections.reverseOrder();
    java.util.Comparator var14 = java.util.Collections.reverseOrder(var13);
    java.util.Comparator var15 = java.util.Collections.reverseOrder(var14);
    java.lang.Object var16 = java.util.Collections.min((java.util.Collection)var12, var15);
    boolean var17 = var3.add(var16);
    java.util.Iterator var18 = var3.iterator();
    java.lang.Object var19 = var3.pollFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + (byte)1+ "'", var16.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + (byte)1+ "'", var19.equals((byte)1));

  }

  public void test263() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java.util.Iterator var6 = var3.descendingIterator();
    java.lang.Object var7 = java.util.Collections.max((java.util.Collection)var3);
    java.util.List var9 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var10 = new java.util.TreeSet((java.util.Collection)var9);
    java.lang.Object[] var11 = var10.toArray();
    java.util.NavigableSet var14 = var10.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var15 = var10.descendingSet();
    java.util.List var18 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.lang.Object var19 = java.util.Collections.max((java.util.Collection)var18);
    java.util.List var21 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.lang.Object[] var23 = var22.toArray();
    java.util.NavigableSet var26 = var22.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var27 = var10.tailSet(var19, true);
    java.util.SortedSet var28 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet)var10);
    java.util.Comparator var29 = var10.comparator();
    java.util.Collection var30 = java.util.Collections.synchronizedCollection((java.util.Collection)var10);
    boolean var31 = var3.addAll(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + (byte)1+ "'", var7.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + 0+ "'", var19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test264() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    boolean var8 = java.util.Collections.disjoint((java.util.Collection)var0, (java.util.Collection)var6);
    java.util.Set var9 = java.util.Collections.singleton((java.lang.Object)var0);
    java.util.List var11 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.lang.Object[] var13 = var12.toArray();
    java.util.NavigableSet var16 = var12.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var17 = var12.descendingSet();
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.SortedSet)var12);
    int var19 = java.util.Collections.frequency((java.util.Collection)var0, (java.lang.Object)var18);
    java.util.List var21 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.util.TreeSet var23 = new java.util.TreeSet((java.util.SortedSet)var22);
    java.util.List var26 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var27 = new java.util.TreeSet((java.util.Collection)var26);
    java.lang.Object[] var28 = var27.toArray();
    java.util.NavigableSet var31 = var27.headSet((java.lang.Object)10L, true);
    var27.clear();
    java.util.Map var33 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var27);
    java.util.Map var34 = java.util.Collections.synchronizedMap(var33);
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.lang.Object[] var36 = var22.toArray(var35);
    java.util.List var39 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var42 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var43 = java.util.Collections.lastIndexOfSubList(var39, var42);
    java.util.List var46 = java.util.Collections.nCopies(100, (java.lang.Object)0.0d);
    int var47 = java.util.Collections.indexOfSubList(var39, var46);
    java.util.Collection var48 = java.util.Collections.synchronizedCollection((java.util.Collection)var39);
    java.util.List var51 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var54 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var55 = java.util.Collections.lastIndexOfSubList(var51, var54);
    java.util.Comparator var56 = java.util.Collections.reverseOrder();
    java.util.Comparator var57 = java.util.Collections.reverseOrder(var56);
    java.lang.Object var58 = java.util.Collections.min((java.util.Collection)var51, var56);
    java.util.TreeSet var59 = new java.util.TreeSet(var56);
    java.lang.Object var60 = java.util.Collections.min(var48, var56);
    boolean var61 = java.util.Collections.replaceAll(var0, (java.lang.Object)var35, (java.lang.Object)var48);
    java.util.Set var62 = java.util.Collections.singleton((java.lang.Object)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + 0+ "'", var58.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + 0+ "'", var60.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);

  }

  public void test265() throws Throwable {

    java.util.Comparator var0 = java.util.Collections.reverseOrder();
    java.util.TreeSet var1 = new java.util.TreeSet(var0);
    java.util.List var4 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var7 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    int var8 = java.util.Collections.lastIndexOfSubList(var4, var7);
    boolean var9 = var1.removeAll((java.util.Collection)var4);
    java.util.List var10 = java.util.Collections.emptyList();
    java.util.Set var11 = java.util.Collections.emptySet();
    java.util.TreeSet var12 = new java.util.TreeSet((java.util.Collection)var11);
    java.util.NavigableSet var13 = var12.descendingSet();
    int var14 = java.util.Collections.binarySearch(var10, (java.lang.Object)var12);
    java.util.List var16 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var17 = new java.util.TreeSet((java.util.Collection)var16);
    boolean var18 = java.util.Collections.disjoint((java.util.Collection)var10, (java.util.Collection)var16);
    java.util.Set var19 = java.util.Collections.singleton((java.lang.Object)var10);
    java.util.List var21 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var22 = new java.util.TreeSet((java.util.Collection)var21);
    java.lang.Object[] var23 = var22.toArray();
    java.util.NavigableSet var26 = var22.headSet((java.lang.Object)10L, true);
    java.util.NavigableSet var27 = var22.descendingSet();
    java.util.TreeSet var28 = new java.util.TreeSet((java.util.SortedSet)var22);
    int var29 = java.util.Collections.frequency((java.util.Collection)var10, (java.lang.Object)var28);
    java.util.Set var31 = java.util.Collections.singleton((java.lang.Object)10L);
    boolean var32 = var28.retainAll((java.util.Collection)var31);
    java.util.TreeSet var33 = new java.util.TreeSet((java.util.SortedSet)var28);
    boolean var34 = var1.add((java.lang.Object)var28);
    java.util.Iterator var35 = var1.descendingIterator();
    java.lang.Object var36 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);

  }

  public void test266() throws Throwable {

    java.util.List var2 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.Collection)var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.NavigableSet var7 = var3.headSet((java.lang.Object)10L, true);
    var3.clear();
    java.util.Map var9 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var3);
    java.lang.Object[] var10 = var3.toArray();
    java.lang.Object var11 = var3.pollFirst();
    java.util.Set var12 = java.util.Collections.emptySet();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.List var16 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var17 = new java.util.TreeSet((java.util.Collection)var16);
    java.lang.Object[] var18 = var17.toArray();
    java.util.NavigableSet var21 = var17.headSet((java.lang.Object)10L, true);
    var17.clear();
    java.util.Map var23 = java.util.Collections.singletonMap((java.lang.Object)10.0d, (java.lang.Object)var17);
    java.lang.Object[] var24 = var17.toArray();
    boolean var25 = var13.removeAll((java.util.Collection)var17);
    boolean var26 = var3.addAll((java.util.Collection)var17);
    java.util.TreeSet var27 = new java.util.TreeSet();
    java.lang.Object var29 = var27.floor((java.lang.Object)true);
    var27.clear();
    java.util.Iterator var31 = var27.descendingIterator();
    java.util.List var33 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var34 = new java.util.TreeSet((java.util.Collection)var33);
    java.lang.Object[] var35 = var34.toArray();
    java.util.NavigableSet var36 = var34.descendingSet();
    java.lang.String var37 = var34.toString();
    java.util.List var38 = java.util.Collections.emptyList();
    java.util.Set var39 = java.util.Collections.emptySet();
    java.util.TreeSet var40 = new java.util.TreeSet((java.util.Collection)var39);
    java.util.NavigableSet var41 = var40.descendingSet();
    int var42 = java.util.Collections.binarySearch(var38, (java.lang.Object)var40);
    java.util.List var45 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var45, 100);
    java.util.Collections.rotate(var38, 100);
    boolean var49 = var34.addAll((java.util.Collection)var38);
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    boolean var51 = java.util.Collections.addAll((java.util.Collection)var27, var50);
    java.lang.Object[] var52 = new java.lang.Object[] { var50};
    java.lang.Object[] var53 = var17.toArray(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[1]"+ "'", var37.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);

  }

  public void test267() throws Throwable {

    java.util.List var1 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.TreeSet var3 = new java.util.TreeSet((java.util.SortedSet)var2);
    java.util.SortedSet var4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java.util.Iterator var6 = var3.descendingIterator();
    java.util.List var9 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var12 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var9, 0);
    java.util.List var16 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var19 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var16, 0);
    java.util.List var23 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.List var26 = java.util.Collections.nCopies(10, (java.lang.Object)0);
    java.util.Collections.rotate(var23, 0);
    java.util.Collections.rotate(var16, 0);
    java.util.Enumeration var29 = java.util.Collections.enumeration((java.util.Collection)var16);
    java.util.ArrayList var30 = java.util.Collections.list(var29);
    java.util.Collections.swap((java.util.List)var30, 1, 0);
    java.util.Collections.reverse((java.util.List)var30);
    int var35 = java.util.Collections.indexOfSubList(var9, (java.util.List)var30);
    java.lang.Object[] var36 = new java.lang.Object[] { var9};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var37 = java.util.Collections.addAll((java.util.Collection)var3, var36);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);

  }

  public void test268() throws Throwable {

    java.util.List var0 = java.util.Collections.emptyList();
    java.util.Set var1 = java.util.Collections.emptySet();
    java.util.TreeSet var2 = new java.util.TreeSet((java.util.Collection)var1);
    java.util.NavigableSet var3 = var2.descendingSet();
    int var4 = java.util.Collections.binarySearch(var0, (java.lang.Object)var2);
    java.util.List var6 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var7 = new java.util.TreeSet((java.util.Collection)var6);
    boolean var8 = java.util.Collections.disjoint((java.util.Collection)var0, (java.util.Collection)var6);
    java.util.Set var9 = java.util.Collections.singleton((java.lang.Object)var0);
    java.util.Collections.reverse(var0);
    java.util.List var11 = java.util.Collections.emptyList();
    java.util.Set var12 = java.util.Collections.emptySet();
    java.util.TreeSet var13 = new java.util.TreeSet((java.util.Collection)var12);
    java.util.NavigableSet var14 = var13.descendingSet();
    int var15 = java.util.Collections.binarySearch(var11, (java.lang.Object)var13);
    java.util.List var17 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var18 = new java.util.TreeSet((java.util.Collection)var17);
    boolean var19 = java.util.Collections.disjoint((java.util.Collection)var11, (java.util.Collection)var17);
    java.util.Set var20 = java.util.Collections.singleton((java.lang.Object)var11);
    java.util.Collections.reverse(var11);
    int var22 = java.util.Collections.indexOfSubList(var0, var11);
    java.util.List var24 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var25 = new java.util.TreeSet((java.util.Collection)var24);
    java.util.TreeSet var26 = new java.util.TreeSet((java.util.SortedSet)var25);
    java.lang.Object[] var27 = var25.toArray();
    int var28 = java.util.Collections.binarySearch(var0, (java.lang.Object)var27);
    java.util.List var29 = java.util.Collections.emptyList();
    java.util.Set var30 = java.util.Collections.emptySet();
    java.util.TreeSet var31 = new java.util.TreeSet((java.util.Collection)var30);
    java.util.NavigableSet var32 = var31.descendingSet();
    int var33 = java.util.Collections.binarySearch(var29, (java.lang.Object)var31);
    java.util.List var35 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var36 = new java.util.TreeSet((java.util.Collection)var35);
    boolean var37 = java.util.Collections.disjoint((java.util.Collection)var29, (java.util.Collection)var35);
    java.util.Set var38 = java.util.Collections.singleton((java.lang.Object)var29);
    java.util.Collections.reverse(var29);
    java.util.List var40 = java.util.Collections.emptyList();
    java.util.Set var41 = java.util.Collections.emptySet();
    java.util.TreeSet var42 = new java.util.TreeSet((java.util.Collection)var41);
    java.util.NavigableSet var43 = var42.descendingSet();
    int var44 = java.util.Collections.binarySearch(var40, (java.lang.Object)var42);
    java.util.List var46 = java.util.Collections.singletonList((java.lang.Object)(byte)1);
    java.util.TreeSet var47 = new java.util.TreeSet((java.util.Collection)var46);
    boolean var48 = java.util.Collections.disjoint((java.util.Collection)var40, (java.util.Collection)var46);
    java.util.Set var49 = java.util.Collections.singleton((java.lang.Object)var40);
    java.util.Collections.reverse(var40);
    int var51 = java.util.Collections.indexOfSubList(var29, var40);
    java.util.Collections.rotate(var0, var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);

  }

}
