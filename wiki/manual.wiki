#summary User manual of FailureDoc

<wiki:toc max_depth="3" />

= Installation =

Download the release jar from [https://code.google.com/p/failuredoc/downloads/list Downloads] tab. The jar there includes source code and all other dependent libraries.

(or check out the latest source code from repository)

= Get Started =

To test whether FailureDoc is well-installed, type the following command:

{{{
$ java -cp .:./failuredoc-0.1.jar:$CLASSPATH failure.main.Main --help
}}}

If you can see a welcome page, FailureDoc is successfully installed.

= Command Options =


There are two ways to use FailureDoc:

== Use FailureDoc as an independent tool ==

FailureDoc can explain any failed test encoding in a certain form. Here is an example file:  [http://code.google.com/p/failuredoc/source/browse/trunk/failuredoctests/failure/sequence/one_seq.txt a sample failed test]. (of course, you can encode multiple failed tests in one file, and let FailureDoc to explain them one by one)

Here is the general option form:

{{{
$ java -cp failuredoc-0.1.jar failure.main.Main
--failed_tests = file_name_including_all_failed_tests  OTHER_OPTIONS
}}}

Here is a complete supported options:


|| *Option* || * Explanation* || *Default* || *Required? ||
|| --failed_tests || File containing all failed test || null|| Yes ||
|| --additional_classes|| File containing aditional classes for value pool generation || null|| No ||
|| --testgen_time|| Time used for generating the value pool (in seconds) || 10|| No ||
|| --forbidden_exception|| User specified forbidden exception || null || No ||
|| --documented_test || The name of output documented test || Documented_Failed_Test || No ||
|| --documented_test_output || The output dir of documented test || "./failuredoc_output/"|| No ||
|| --adaptive_select || Using adaptive object selection strategy|| false || No ||
|| --obj_select_num || The number of objects to select in each round || 20 || No ||
|| --aggressive_pruning|| Prune likely erroneous document by heuristics || false || No ||
|| --remove_likely_useless || Remove likely redundant document by heuristics || false || No ||
|| --select_closest_type || Select the closest type when multiple types are available || false || No ||
|| --use_profile_over_value || Use abstract object profile in document other than a single value || false || No ||
|| --append_example || Append an example in inferred document || false || No ||
|| --failure_doc_log || The log file for FailureDoc || null || No ||
|| --failuredoc_verbose || Dumping debugging information in console || false || No ||




== Use FailureDoc to explain Failed Tests by Randoop ==

FailureDoc is also seamlessly integrated with Randoop. It can automatically be invoked to explain a failed test generated by Randoop before writing to disk.

Invoking FailureDoc in this mode just needs to append `--failuredoc` and `--long_format` after normal Randoop [http://randoop.googlecode.com/hg/doc/index.html#command-line-options options]. And, it is completely compatible with other Randoop options.

Here is the general option form:

{{{
$ java -cp failuredoc-0.1.jar randoop.main.Main gentests
RANDOOP_COMMAND_OPTIONS  FailureDoc_COMMAND_OPTIONS
}}}

For example, the following *Randoop* command will generate failed tests:

{{{
$ java -classpath failuredoc-0.1.jar randoop.main.Main gentests
 -testclass=java.util.TreeSet --testclass=java.util.Collections --timelimit=10

}}}

*note:* due to the difference in running environment, available resources and other factors, if you can a difficult result, please check there are at least 900 test inputs generated for the object pool. If less objects are created, please increase the timelimit.

To infer document for the generated failed tests (when outputting them). Users can append the following *FailureDoc* command:

{{{
$ java -classpath failuredoc-0.1.jar randoop.main.Main gentests 
 -testclass=java.util.TreeSet --testclass=java.util.Collections
 --timelimit=10 --failuredoc --long_format --output-tests=fail
}}}

`--output-tests = fail` is optional, indicating Randoop only output failed tests.



Here is a complete option list (many options are overlapped with the above list).


|| *Option* || * Explanation* || *Default* || *Required? ||
|| --failure_doc || Invoking FailureDoc || false || Yes ||
|| --documented_test || The name of output documented test || Documented_Failed_Test || No ||
|| --pretty_print || Pretty print the documented test || false|| No ||
|| --documented_test_output || The output dir of documented test || "./failuredoc_output/"|| No ||
|| --adaptive_select || Using adaptive object selection strategy|| false || No ||
|| --obj_select_num || The number of objects to select in each round || 20 || No ||
|| --aggressive_pruning|| Prune likely erroneous document by heuristics || false || No ||
|| --remove_likely_useless || Remove likely redundant document by heuristics || false || No ||
|| --select_closest_type || Select the closest type when multiple types are available || false || No ||
|| --use_profile_over_value || Use abstract object profile in document other than a single value || false || No ||
|| --append_example || Append an example in inferred document || false || No ||
|| --failure_doc_log || The log file for FailureDoc || null || No ||
|| --failuredoc_verbose || Dumping debugging information in console || false || No ||



= Examples =

Please go to the [examples examples] page.